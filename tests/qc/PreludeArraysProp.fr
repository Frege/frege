{--
 - Test properties of the 'frege.prelude.PreludeArrays' module.
 -}
module tests.qc.PreludeArraysProp where

import frege.test.QuickCheck as Q (Arbitrary)

--- The non-primitive wrapper of 'Int'
data RInt = RInt Int
derive Eq RInt
derive Show RInt
derive JavaType RInt
derive ArrayElement RInt  -- TODO remove

instance Arbitrary RInt where
  arbitrary = RInt <$> arbitrary

p_JArray_genericFromList = Q.property $ \xs -> ST.run (st xs)
  where
    st :: [RInt] -> ST s Bool
    st xs = do
        marr <- JArray.genericFromList xs
        readonly (\parr -> toList parr == xs) marr

p_JArray_genericModify = Q.property $ \(xs, i) -> ST.run (st xs i)
  where
    st :: [RInt] -> Int -> ST s Bool
    st xs i = do
        marr <- JArray.genericFromList xs
        let f (RInt x) = RInt $ x + i
        JArray.genericModify f marr
        readonly (\parr -> toList parr == map f xs) marr

p_JArray_genericFold = Q.property $ \xs -> ST.run (st xs)
  where
    st :: [RInt] -> ST s Bool
    st xs = do
        marr <- JArray.genericFromList xs
        arrsum <- JArray.genericFold (\acc (RInt x) -> acc + x) 0 marr
        pure $ arrsum == sum [x | RInt x <- xs]
