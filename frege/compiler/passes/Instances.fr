--- Enter @derive@ and @instance@ definitions
module frege.compiler.passes.Instances where

-- import  Data.TreeMap as TM(TreeMap, each, keys, values, insert)
import  Data.List  as  DL(uniqBy, sort, sortBy)
import  frege.lib.PP(text, msgdoc)

-- import  Compiler.enums.Flags  as  Compilerflags(TRACE3, TRACE4)
import  Compiler.enums.TokenID
import  Compiler.enums.Visibility
import  Compiler.enums.Literals
import  Compiler.enums.CaseKind

import  Compiler.types.Positions
import  Compiler.types.Tokens
-- import  Compiler.types.NSNames
import  Compiler.types.SNames
import  Compiler.types.Packs
import  Compiler.types.QNames
import  Compiler.types.Types
import  Compiler.types.SourceDefinitions
import  Compiler.types.Symbols
import  Compiler.types.Global  as  G
import  Compiler.types.AbstractJava(rawName)

import  Compiler.common.Errors  as  E()
import  Compiler.common.Resolve  as  R(defaultXName)
-- import  Compiler.common.SymbolTable  as  ST(linkq)
import  Compiler.classes.Nice

import  frege.compiler.Utilities  as  U(vSym)
import  frege.compiler.passes.Enter(enter, isInstOrDerive)
import  frege.compiler.gen.java.Common(sigmaJT)


{--
    'pass' must be called only after type aliases have been resolved and all
    class and data definitions are entered.
 -}
pass () = do
    g <- getST
    -- not sure if including InsDcl here is needed; if ordering doesn't matter,
    -- it shouldn't be needed
    let insdrv = flip mapMaybe g.sub.sourcedefs $ \d ->
          case d of
            DefinitionS.Ins ins -> Just $ Left ins
            DefinitionS.Drv drv -> Just $ Right drv
            otherwise -> Nothing
        normal = filter (not • isInstOrDerive) g.sub.sourcedefs
    derived <- mapSt (fmap DefinitionS.Ins . either pure deriveInst) insdrv
    enter (VName g.thisPack) derived
    -- change state so that derived instances will be transdef'ed later
    changeST Global.{sub <- SubSt.{sourcedefs = normal ++ derived}}
    stio ("instances", length derived)

--- make an instance definition from a derive definition
deriveInst :: DrvDcl -> StG InsDcl
deriveInst (d@DrvDcl{pos}) = do
        g <- getST
        clas <- defaultXName pos (TName pPreludeBase "Eq") d.clas
        typ  <- U.transSigma d.typ
        case instTSym typ g of
            Just (sym@SymT {env}) | ctrs <- U.envConstructors env,
                                    not (null ctrs)
                                    || inPrelude clas.pack g && clas.base == "ArrayElement" 
                                    || inPrelude clas.pack g && clas.base == "JavaType" 
                                    || inPrelude clas.pack g && clas.base == "Exceptional" -> do
                dcls <- deriveDcls pos clas sym ctrs d.typ.rho
                -- dtyp <- withDerivedContext pos d.typ d.clas
                return idcl.{defs=dcls, typ=withDerivedContext pos d.typ d.clas clas}
            Just sym -> do
                E.error pos (msgdoc ("Can't derive " ++  clas.nice g
                             ++ " (" ++ typ.nice g ++ "), type has no constructors"))
                stio idcl
            Nothing ->  do
                E.error pos (msgdoc ("Can't derive " ++  clas.nice g
                             ++ " (" ++ typ.nice g ++ ")"))
                stio idcl
    where
        idcl = InsDcl {pos=d.pos, vis=d.vis, clas=d.clas,
                       typ=d.typ, doc=d.doc, defs=[]}
        withDerivedContext pos (ForAll [] rho) klasse qname
            | TName ppp base <- qname, 
              base `notElem` derivable = ForAll [] rho
            | null rho.context = ForAll [] rho.{context}
            where
                context = [ Ctx pos klasse (TVar pos KVar v) | v <- U.freeTVnames [] rho ]
        withDerivedContext pos sigma _ _ = sigma

--- List of derivable classes
--- Note that special classes like 'Exceptional' and 'JavaType' are not listed here.
--- This controls also whether type variables in the instance type must have the same class membership.
derivable = ["Hashable", "Eq", "Ord", "Enum", "Bounded", "Show", "Exceptional"]

--- arity of a constructor
arity ∷ Symbol → Int
arity sym = length (Symbol.flds sym)

deriveClass :: Position → QName → Symbol → [Symbol] → RhoT SName -> Global → String → [DefinitionS]
deriveClass pos clas forty ctrs instrho g toderive = deriveClass toderive
    where
        con = head ctrs
        isEnum ∷ Bool
        isEnum = all (0==) (map arity ctrs)
        -- displayed name of a constructor
        cname ∷ Symbol → SName
        cname sym = case Symbol.name sym of
            MName tn base -> With1 pos.first.{tokid=CONID, value=tn.base}
                                   pos.first.{tokid=CONID, value=base}
            _ -> error "constructor must be a member"
        -- [PVar c1, PVar c2, PVar c3, ...]
        -- subpats "_" = repeat (pvar "_")
        subpats c = subvars c   -- [ var  (c ++ show a) | a <- enumFromTo 1 1000 ]
        subvars c = [ var  (c ++ show a) | a <- enumFromTo 1 1000 ]
        -- construct pattern  Con s1 s2 s3 ... sn
        conpat :: Symbol -> String -> ExprS
        conpat con s = Term app -- PCon {qname=cname con, pos=pos.change QCONID con.name.base, pats}
            where
                app  = fold App Con{name=cname con} pats 
                pats = take (arity con) (subpats s)
        -- construct simple (pattern) variables
        
        var :: String -> ExprS
        var  s = Vbl  {name=Simple pos.first.{tokid=VARID, value=s}}
        gvar p s = Vbl {name=With1 pos.first.{tokid=CONID, value=p} pos.first.{tokid=VARID, value=s}}
        gvar2 p t s = Vbl {name=With2 pos.first.{tokid=CONID, value=p}
                                      pos.first.{tokid=CONID, value=t}
                                      pos.first.{tokid=VARID, value=s}}
        !varg1  = var  "arg1"
        !varg2  = var  "arg2"
        !varg3  = var  "arg3"
        
        !parg1  = var "arg1"
        !parg2  = var "arg2"
        !parg3  = var "arg3"
        
        vOrd    = var "ord"
        vFrom   = var "from"
        baseToken = baseTokenAt pos.first
        -- misc global SNames
        tuple2Name  = With1 baseToken pos.first.{tokid=CONID, value="(,)"}
        consName    = With1 baseToken pos.first.{tokid=CONID, value=":"}
        nilName     = With1 baseToken pos.first.{tokid=CONID, value="[]"}
        eqName      = With2 baseToken pos.first.{tokid=CONID, value="Ordering"} pos.first.{tokid=CONID, value="Eq"}
        eqeqName    = With2 baseToken pos.first.{tokid=CONID, value="Eq"} pos.first.{tokid=VARID, value="=="}
        lteqName    = Simple pos.first.{tokid=VARID, value="<"}
        hashName    = With2 baseToken pos.first.{tokid=CONID, value="Eq"} pos.first.{tokid=VARID, value="hashCode"}
        addName     = With2 baseToken pos.first.{tokid=CONID, value="Int"} pos.first.{tokid=VARID, value="+"}
        mulName     = With2 baseToken pos.first.{tokid=CONID, value="Int"} pos.first.{tokid=VARID, value="*"}
        -- undefName   = With1 baseToken pos.first.{tokid=VARID, value="undefined"}
        errorName   = With1 baseToken pos.first.{tokid=VARID, value="error"}
        mapName     = With1 listToken pos.first.{tokid=VARID, value="map"}
        intEnumFTTName = With2 baseToken pos.first.{tokid=CONID, value="Int"} pos.first.{tokid=VARID, value="enumFromThenTo"}
        appName     = With2 baseToken pos.first.{tokid=CONID, value="String"} pos.first.{tokid=VARID, value="++"}
        showName    = With1 pos.first.{tokid=CONID, value="PreludeText"} pos.first.{tokid=VARID, value="show"}
        ptcon pats  = Term (fold App vtcon pats)
        !vtcon      = Con  {name= tuple2Name}
        ptup a b = ptcon [a,b]
        vtup a b = nApp  (nApp  vtcon a) b
        -- lists
        consCon = Con {name = consName}
        nilCon  = Con {name = nilName}
        singleton x = nApp (nApp consCon x) nilCon 
        -- misc constructors and vars
        !vEq = Con  {name=eqName}
        !vFalse = Lit {kind=LBool, value="false", pos, negated=false}
        !vTrue  = Lit {kind=LBool, value="true",  pos, negated=false}
        -- !vUndef = Vbl {name=undefName, pos=pos.change VARID "undefined", typ = Nothing}
        !vError = Vbl {name=errorName}
        !vMap   = Vbl {name=mapName}
        !vIntEnumFTT = Vbl {name=intEnumFTTName}
        !vApp   = Vbl {name=appName}
        !vShow  = Vbl {name=showName}
        !opEq   = Vbl {name=eqeqName}
        !opLt   = Vbl {name=lteqName}
        !opHash = Vbl {name=hashName}
        !opAdd  = Vbl {name=addName}
        !opMul  = Vbl {name=mulName}
        string s = Lit {kind=LString, value=show s,  pos=pos.change STRCONST (show s), negated=false}
        int :: Int -> ExprS
        int n    = Lit  {kind=LInt, value=n.abs.show, pos=pos.change INTCONST (show n), negated = n<0}
        -- make a function definition
        publicfun name pats expr = FunDcl {vis=Public, 
                                        positions = [pos.first], 
                                        lhs = var name, pats, expr,
                                        doc=Just "Function generated for derived instance."}
        calt p x  = CAlt {pat=p, ex=x}
        -- construct  a ++ b
        mkapp a b = nApp (nApp vApp a) b
        -- construct  a `op` b
        mkop a op b = nApp (nApp op a) b
        -- construct "show v"
        showit v = vShow `nApp` v
        -- type constructor for 'Class'
        pClass = TCon{pos, name = With1 baseToken pos.first.{tokid=CONID, value="Class"}}
        hash  = Case CNormal varg1 halts
        halts = map hashalt ctrs
        hashalt con = calt p hashex
                where
                    a = arity con
                    p = conpat con "a"
                    vs = take a (subvars "a")
                    c = nApp (gvar "PreludeBase" "constructor") varg1
                    hs = map (nApp opHash) vs
                    hfun a b = mkop (mkop (int 31) opMul a) opAdd b
                    hashex = fold hfun (int 1) (c:hs)  

        deriveClass :: String -> [DefinitionS]
        -- derive Hashable
        deriveClass "Hashable" = [DefinitionS.Fun $ publicfun "hashCode" [parg1] hash]

        -- derive Eq
        deriveClass "Eq" = map DefinitionS.Fun [publicfun "==" [parg1,parg2] ifx, publicfun "hashCode" [parg1] hash] where
            ifx   = if length ctrs == 1 then eex else Ifte cond eex vFalse
            eex   = if isEnum then vTrue else Case CNormal (vtup varg1 varg2) alts
            alts  = map mkequalalt ctrs ++ deflt
            deflt = if length ctrs == 1 then [] else [dalt]
            dalt  = calt (var "_") vFalse
            cond  = nApp  (nApp opEq ca1) ca2
            ca1   = nApp (gvar "PreludeBase" "constructor") varg1
            ca2   = nApp (gvar "PreludeBase" "constructor") varg2
            -- (C,C) -> true, (C1 a1 a2, C1 b1 b2) -> a1 == b1 && a2==b2
            mkequalalt con = calt (ptup peq1 peq2) eqex
                where
                    a = arity con
                    peq1 = conpat con "a"
                    peq2 = conpat con "b"
                    sub1 = take a (subvars "a")
                    sub2 = take a (subvars "b")
                    eqex = andit (map eqit (zip sub1 sub2))
                    eqit (a,b) = nApp (nApp opEq a) b
                    andit [] = vTrue
                    andit [x] = x
                    andit (x:xs) = nApp (nApp (gvar "PreludeBase" "&&") x) (andit xs)
        -- derive Ord
        deriveClass "Ord"
            | [prod] <- ctrs = [DefinitionS.Fun $ publicfun "<=>"
                                          [conpat prod "a", conpat prod "b"]
                                          (ordex (arity prod) 0)]
            | otherwise = [DefinitionS.Fun $ publicfun "<=>" [parg1, parg2] outercase]
            where
                --* case a1 <=> b1 of { Eq -> case a2 <=> b2 of { ...
                ordex a n
                    | a == n    = vEq
                    | a == n+1  = comp
                    | otherwise = Case CNormal comp [calt1, calt2]
                    where
                        cmp = gvar2 "PreludeBase" "Ord" "<=>"
                        va  = var ("a" ++ show (n+1))
                        vb  = var ("b" ++ show (n+1))
                        comp = nApp (nApp cmp va) vb
                        calt1 = calt vEq (ordex a (n+1))
                        calt2 = calt (var "r") (var "r")
                --*  (C ai, C bi) -> ordex ai bi
                mkeqcase con = calt (ptup peq1 peq2) oex
                    where
                        a = arity con
                        peq1 = conpat con "a"    -- C a1 a2 .. an
                        peq2 = conpat con "b"    -- C b1 b2 .. bn
                        oex  = ordex a 0
                outercase = Case CNormal  defex [alt1, alt2]
                defex     = nApp (nApp (gvar2 "PreludeBase" "Ord" "<=>") oa1) oa2
                oa1       = nApp (gvar "PreludeBase" "constructor") varg1
                oa2       = nApp (gvar "PreludeBase" "constructor") varg2
                alt1      = calt vEq cas
                alt2      = calt (var "x") (var "x")
                cas       = if isEnum then vEq else Case CNormal (vtup varg1 varg2) eqexs
                eqexs     = (map mkeqcase ctrs) ++ [default_]
                default_  = calt (var "_") vEq
        deriveClass "Show"
            | forty.name.base ~ ´^\(,+\)´ = let             -- tuple
                    sex     = Case CNormal (var "r") [(mktupshowalt con)]
                    show    = publicfun "show"     [var "r"]  sex
                    -- showsub = publicfun "showsub"  []          (var "show")
                in [DefinitionS.Fun show]
            | otherwise = let
                    sex =   Case CNormal (var "r") (mkshowalts ctrs)
                    subex = Case CNormal (var "r") (mkshowsubalts ctrs)
                    show    = publicfun "show"      [var "r"]  sex
                    showsub = publicfun "showsub"   [var "r"]  subex
                in map DefinitionS.Fun [show, showsub]
            where
                mkshowalts    constr = map mkshowalt constr
                mkshowsubalts constr = map mkshowsubalt constr
                mkshowalt :: Symbol -> CAltS
                mkshowalt con = calt (conpat con "a") sx
                    where
                        scon = string (con.name.base)
                        sub  = take (arity con) (subvars "a")
                        sx   = joinit scon sub
                        blanked s  = s `mkapp` string " "
                        showit v   = gvar "PreludeText" "showsub" `nApp` v
                        showsv s v = blanked s `mkapp` showit v
                        joinit s [] = s
                        joinit s (v:vs) = joinit (showsv s v) vs
                mkshowsubalt con =
                    let
                        salt = mkshowalt con
                        subx = (string "(" `mkapp` salt.ex) `mkapp` string ")"
                    in if arity con == 0 then salt
                        else salt.{ex=subx}
                mktupshowalt con = calt (conpat con "a") sx where
                    scon = string "("
                    sub  = take (arity con) (subvars "a")
                    sx = joinit scon sub
                    showsv s v d = (s `mkapp` showit v) `mkapp` string d
                    joinit s [] = s `mkapp` string ")"
                    joinit s [v] = showsv s v ")"
                    joinit s (a:b:c) = joinit (showsv s a ", ") (b:c)

        deriveClass "Enum" = map DefinitionS.Fun [ord, from, succ, pred,
                                eFromThenTo, eFromThen]  -- , eq]
            where
                -- eq      = publicfun "=="    [pvar "a", pvar "b"]  eqex
                ord     = publicfun "ord"   [var "r"]      oex
                from    = publicfun "from"  [var "r"]      fex
                succ    = publicfun "succ"  [var "r"]      sex
                pred    = publicfun "pred"  [var "r"]      pex
                eFromThenTo = publicfun "enumFromThenTo" [parg1, parg2, parg3]
                                eFTTex
                eFromThen = publicfun "enumFromThen" [parg1, parg2]
                                eFTex                                
                -- eqex    = (opEq `nApp`
                --             ((var "<=>" `nApp` var "a") `nApp` var "b")) `nApp`
                --                 pEq
                ctup    = sortBy (comparing Symbol.cid) ctrs
                ctdn    = reverse ctup
                max     = Con {name=cname (head ctdn)}
                min     = Con {name=cname (head ctup)}
                minmax  = Ifte (mkop varg1 opLt varg2) max min
                oex     = nApp (gvar "PreludeBase" "constructor") (var "r")
                fex     = Case CNormal (var "r") (map fromalt ctup ++ [last])
                sex     = Case CNormal (var "r") (mkalts "succ " ctup)
                pex     = Case CNormal (var "r") (mkalts "pred " ctdn)
                last    = calt (var "_") (nApp vError msg)        -- _ -> error ...
                msg     = (string (forty.name.nice g)
                          `mkapp` string ".from ")
                          `mkapp` showit (var "r")                  -- "X" ++ ".from " ++ show r
                fromalt ctr = calt (int (Symbol.cid ctr)) (Con {name=cname ctr})
                mkalts s [x] = [calt (conpat x "_") (nApp vError (string (s ++ show (cname x))))]
                mkalts s (x:y:zs) = calt (conpat x "_") (Con  {name=cname y}) : mkalts s (y:zs)
                mkalts s [] = []
                eFTTex
                    | length ctrs > 1  = nApp (nApp vMap vFrom)
                            (fold nApp vIntEnumFTT 
                                (map (nApp vOrd) [varg1, varg2, varg3]))
                    | otherwise = singleton min
                eFTex   = fold nApp (var "enumFromThenTo") [varg1, varg2, minmax]

        deriveClass "Bounded" = map DefinitionS.Fun [minval, maxval]
            where
                ctup    = sortBy (comparing Symbol.cid) ctrs
                ctdn    = reverse ctup
                min     = Con {name=cname (head ctup)}
                max     = Con {name=cname (head ctdn)}
                maxval  = publicfun "maxBound" [] max
                minval  = publicfun "minBound" [] min

        deriveClass "Exceptional" =  [
                DefinitionS.Nat $
                NatDcl{pos, vis=Public, name="javaClass", 
                    txs = [(ForAll [] (RhoTau [] tapp), [])], 
                    meth = fromMaybe (rawName jt) forty.nativ ++ ".class", 
                    isPure = true, gargs = Nothing,
                    doc = Nothing}]
            where
                tapp = TApp pClass this
                this | RhoTau{tau} <- instrho = tau
                     | otherwise = error ("Cannot derive for non type: " ++ nicer forty g)
                jt = sigmaJT g forty.typ
        deriveClass "JavaType" = deriveClass "Exceptional"
        deriveClass "ArrayElement" = deriveClass "Exceptional"
        deriveClass s = error ("can't deriveClass " ++ s)


deriveDcls :: Position -> QName -> Symbol -> [Symbol] -> RhoT SName -> StG [DefinitionS]
deriveDcls pos clas forty ctrs instrho = do
    g <- getST
    -- E.logmsg TRACE4 pos (text ("derive " ++ QName.nice clas g ++ " for " ++ Symbol.nice forty g))
    let dC = deriveClass pos clas forty ctrs instrho g
    case clas of
        TName ppp ccc | inPrelude ppp g,
                        ccc `elem` ["Enum", "Bounded"] -> if all (0==) (map arity ctrs)
            then stio (dC ccc)
            else do
                let bad = [ c.name.nice g | c <- ctrs, arity c != 0 ]
                E.error pos (msgdoc ("Can't derive " ++ clas.nice g
                    ++ " for " ++ forty.nice g ++ " because "
                    ++ (if length bad == 1 then head bad ++ " is not a nullary constructor"
                        else joined ", " bad ++ " are not nullary constructors")))
                stio []
        TName ppp "JavaType"
            | inPrelude ppp g = return (dC "JavaType")
        TName ppp "ArrayElement"
            | inPrelude ppp g = return (dC "ArrayElement")
        TName ppp "Exceptional" 
            | inPrelude ppp g = if isJust forty.nativ
                then return (dC "Exceptional")
                else do
                    E.error pos (msgdoc ("Can't derive Exceptional for " ++ forty.nicer g
                        ++ ", only native types are allowed. "
                        ++ "(Did you want do derive JavaType?)"))
                    return []
        TName ppp ccc | inPrelude ppp g,
                        ccc `elem` derivable = stio (dC ccc)
        _ -> do
            E.error pos (msgdoc ("Can't derive " ++ clas.nice g
                ++ ", only Prelude classes Eq, Ord, Enum, Bounded and Show may be derived."))
            stio []
