--- Code generation compatible with Java7 *or* Java8 syntax

{--
    Here is a short overview on the most important concepts.

    - Representation of data types doesn't change.
    - Interface functions can now be called directly, instead of first
      getting a function pointer.
    - Arguments that have a function type are not lazy, ever.
    - The code generator keeps track of the arity of functions.
      For example, in @flip :: (a -> b -> c) -> b -> a -> c@
      it will pass and expect a @Func2@. If you pass a function @f@ with
      arity 1 to @flip@, it will be wrapped in an extra lambda
      @\a\b -> (f a) $ b@. 
      When you pass a function @g@ with a higher arity, say 4,
      it will be wrapped in a lambda @(\a\b -> (\x3\x4 -> g a b x3 x4))@.
      Fortunately, the compiler will have established type soundness
      during type checking, so that in the first case we know that
      the unary function actually returns another unary function and the
      application @flip g a b@ yields a binary function.
    - Partial applications like  @flip (-)@ are eta-expanded to
      @\a\b -> flip (-) a b@. 
    - A special case of partial application is when a function is not
      applied at all - like in @fold (+) 0 xs@.
    - Lazy values will be instances of @java.run.Lazy@, that is in 
      Java8 notation @() -> some code@. Those are not shared.
    - Shared lazy values (i.e. in @let@ or arguments for constructors) are
      @new Thunk(() -> value)@.
-}

module frege.compiler.passes.GenCode where

import Compiler.types.Global

pass :: StIO (String, Int)
pass = do
    g   ‚Üê getSTT
    liftIO $ g.printer.println "Thank you!"
    return ("Gen78", 1)
