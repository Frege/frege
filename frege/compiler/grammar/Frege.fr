--begin top
{- 

    Copyright Â© 2011 - 2015, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. 

        Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

     -}

{--
    This is the grammar for the Frege language.
-}
module frege.compiler.grammar.Frege; -- where

    {-
       !!! DO NOT CHANGE FILE Frege.fr, IT HAS BEEN CREATED AUTOMATICALLY !!!
    -}

import frege.Prelude hiding(<+>, break);

import frege.control.monad.State(State);

import Data.TreeMap(insert);
import Data.List as DL(elemBy);

import  Compiler.enums.Flags ;
import  Compiler.enums.TokenID(TokenID);
import  Compiler.enums.Visibility;
import  Compiler.enums.Literals;
import  Compiler.enums.CaseKind;

import  Compiler.types.Positions;
import  Compiler.types.Tokens;
import  Compiler.types.SNames;
import  Compiler.types.Packs(magicPack);
import  Compiler.types.ImportDetails;
import  Compiler.types.Types;
import  Compiler.types.SourceDefinitions;
import  Compiler.types.ConstructorField;
import  Compiler.types.Global as G;

import  Compiler.common.Mangle;
import  Compiler.common.Errors as E();
import  Compiler.common.Resolve as R(enclosed);

import Lib.PP (group, break, msgdoc);
import frege.compiler.common.Tuples as T(tuple);
import frege.compiler.common.Desugar;

import frege.compiler.grammar.Lexer (substQQ);


-- this will speed up the parser by a factor of 70, cause yyprods comes out monotyped.
private yyprod1 :: [(Int, YYsi ParseResult Token)]
    -> StG (YYsi ParseResult Token, [(Int, YYsi ParseResult Token)]);


{-
 The following definitions are not strictly necessary, but they help
 to avoid truly crazy type signatures for parse stack items and
 considerably speed up type checking in giving the result types of
 certain nonterminal reduction rules.
 Note that you cannot lie about the type of nonterminal reduction rules.
 Note that types like "Maybe x" on the RHS must be given like so: (Maybe x)
 -}
--end top
type YYM = State;
-- data YYAction = YYShift Int | YYRed Int | YYErr | YYAccept;
!yyAccept = maxBound :: Int;
!yyErr    = minBound :: Int;
!yyBrace  = 0xbacebace; -- hack to cause insertion of '}'
{-- positive numbers are *shift* actions, or *accept*
    negative ones are *reduce* actions, or *error* --};
newtype YYAction = YYAction Int;
data YYsi res tok  = 
	  YYStart () | YYAcc res | YYTok tok
	| YYNTaeq Token
	| YYNTalias Token
	| YYNTannoitem Token
	| YYNTannoitems [Token]
	| YYNTannotation [AnnDcl]
	| YYNTapats [Exp]
	| YYNTappex Exp
	| YYNTbinex Exp
	| YYNTcalt CAltS
	| YYNTcalts [CAltS]
	| YYNTccontext [ContextS]
	| YYNTclassdef ClaDcl
	| YYNTcommata Int
	| YYNTconfld [ConField SName]
	| YYNTconflds [ConField SName]
	| YYNTcontype (ConField SName)
	| YYNTcontypes [ConField SName]
	| YYNTdalt DConS
	| YYNTdalts [DConS]
	| YYNTdatadef DatDcl
	| YYNTdatainit DatDcl
	| YYNTdatajavadef JavDcl
	| YYNTdatajavainit JavDcl
	| YYNTdefinition [Def]
	| YYNTdefinitions [Def]
	| YYNTderivedef DrvDcl
	| YYNTdocs String
	| YYNTdocsO (Maybe String)
	| YYNTdocumentation DocDcl
	| YYNTdodefs [Qual]
	| YYNTdplocaldef [Def]
	| YYNTdvars [TauS]
	| YYNTelsex Token
	| YYNTexpr Exp
	| YYNTexprSC [Exp]
	| YYNTexprSS [Exp]
	| YYNTfield (String, Exp)
	| YYNTfields [(String, Exp)]
	| YYNTfitem Token
	| YYNTfixity FixDcl
	| YYNTfldid (SigmaS -> ConField SName)
	| YYNTfldids [SigmaS -> ConField SName]
	| YYNTforall SigmaS
	| YYNTfundef FunDcl
	| YYNTfunhead (Exp, [Pat])
	| YYNTgargs [TauS]
	| YYNTgetfield (Token, Bool,Exp)
	| YYNTgetfields [(Token,Bool,Exp)]
	| YYNTgqual Qual
	| YYNTgquals [Qual]
	| YYNTguard Guard
	| YYNTguards [Guard]
	| YYNTicontext [ContextS]
	| YYNTimport ImpDcl
	| YYNTimportitem ImportItem
	| YYNTimportliste ImportList
	| YYNTimportspec ImportItem
	| YYNTimportspecs [ImportItem]
	| YYNTimpurenativedef NatDcl
	| YYNTinfix FixDcl
	| YYNTinstdef InsDcl
	| YYNTinsthead InsDcl
	| YYNTinterfaces [TauS]
	| YYNTjitem String
	| YYNTjtoken Token
	| YYNTjtokens [Token]
	| YYNTkind KindS
	| YYNTlambda Exp
	| YYNTlambdabody Exp
	| YYNTlcqual Qual
	| YYNTlcquals [Qual]
	| YYNTletdef [LetMemberS]
	| YYNTletdefs [LetMemberS]
	| YYNTliteral Exp
	| YYNTlocaldef [Def]
	| YYNTlocaldefs [Def]
	| YYNTmbdot Token
	| YYNTmemspec ImportItem
	| YYNTmemspecs [ImportItem]
	| YYNTmethodspec (Token, String, Maybe [TauS])
	| YYNTmodule ParseResult
	| YYNTmoduleclause (String, Position)
	| YYNTmoduledefinition ModDcl
	| YYNTmodulename (String, Position)
	| YYNTmodulename1 (String, Position)
	| YYNTnativedef NatDcl
	| YYNTnativename String
	| YYNTnativepur Bool
	| YYNTnativespec (String, Maybe [TauS])
	| YYNToperator Token
	| YYNToperators [String]
	| YYNTopstring String
	| YYNTpattern Pat
	| YYNTplainfldid (SigmaS -> ConField SName)
	| YYNTplocaldef [Def]
	| YYNTprimary Exp
	| YYNTpublicdefinition [Def]
	| YYNTqconid SName
	| YYNTqualifiers (Token -> SName)
	| YYNTqvarid SName
	| YYNTqvarids [SName]
	| YYNTqvarop SName
	| YYNTrawnativename String
	| YYNTrho RhoS
	| YYNTrhofun RhoS
	| YYNTscontext ContextS
	| YYNTscontexts [ContextS]
	| YYNTsicontext ContextS
	| YYNTsicontexts [ContextS]
	| YYNTsigex SigExs
	| YYNTsigexs [SigExs]
	| YYNTsigma SigmaS
	| YYNTsimpledalt DConS
	| YYNTsimplekind KindS
	| YYNTsimpletype TauS
	| YYNTsimpletypes [TauS]
	| YYNTstrictcontype (ConField SName)
	| YYNTstrictdalt DConS
	| YYNTstrictfldid (SigmaS -> ConField SName)
	| YYNTtapp TauS
	| YYNTtau TauS
	| YYNTtauSB [TauS]
	| YYNTtauSC [TauS]
	| YYNTterm Exp
	| YYNTthenx Token
	| YYNTtopdefinition [Def]
	| YYNTtopex Exp
	| YYNTtyname SName
	| YYNTtypeclause (Maybe TauS)
	| YYNTtypedef TypDcl
	| YYNTtyvar TauS
	| YYNTunex Exp
	| YYNTunop Token
	| YYNTvarid Token
	| YYNTvaridkw Token
	| YYNTvarop Token
	| YYNTvisdalt DConS
	| YYNTvisibledefinition [Def]
	| YYNTwheredef [Def]
	| YYNTwherelet [LetMemberS]
	| YYNTwheretokens [Token]
	| YYNTword String
	| YYNTwords [String];
showsi (YYStart  _) = "%start ";
	showsi (YYAcc _) = "%accept ";
	showsi (YYTok x) = yyshow x;
	showsi (YYNTaeq _) = "<aeq>";
	showsi (YYNTalias _) = "<alias>";
	showsi (YYNTannoitem _) = "<annoitem>";
	showsi (YYNTannoitems _) = "<annoitems>";
	showsi (YYNTannotation _) = "<annotation>";
	showsi (YYNTapats _) = "<apats>";
	showsi (YYNTappex _) = "<appex>";
	showsi (YYNTbinex _) = "<binex>";
	showsi (YYNTcalt _) = "<calt>";
	showsi (YYNTcalts _) = "<calts>";
	showsi (YYNTccontext _) = "<ccontext>";
	showsi (YYNTclassdef _) = "<classdef>";
	showsi (YYNTcommata _) = "<commata>";
	showsi (YYNTconfld _) = "<confld>";
	showsi (YYNTconflds _) = "<conflds>";
	showsi (YYNTcontype _) = "<contype>";
	showsi (YYNTcontypes _) = "<contypes>";
	showsi (YYNTdalt _) = "<dalt>";
	showsi (YYNTdalts _) = "<dalts>";
	showsi (YYNTdatadef _) = "<datadef>";
	showsi (YYNTdatainit _) = "<datainit>";
	showsi (YYNTdatajavadef _) = "<datajavadef>";
	showsi (YYNTdatajavainit _) = "<datajavainit>";
	showsi (YYNTdefinition _) = "<definition>";
	showsi (YYNTdefinitions _) = "<definitions>";
	showsi (YYNTderivedef _) = "<derivedef>";
	showsi (YYNTdocs _) = "<docs>";
	showsi (YYNTdocsO _) = "<docsO>";
	showsi (YYNTdocumentation _) = "<documentation>";
	showsi (YYNTdodefs _) = "<dodefs>";
	showsi (YYNTdplocaldef _) = "<dplocaldef>";
	showsi (YYNTdvars _) = "<dvars>";
	showsi (YYNTelsex _) = "<elsex>";
	showsi (YYNTexpr _) = "<expr>";
	showsi (YYNTexprSC _) = "<exprSC>";
	showsi (YYNTexprSS _) = "<exprSS>";
	showsi (YYNTfield _) = "<field>";
	showsi (YYNTfields _) = "<fields>";
	showsi (YYNTfitem _) = "<fitem>";
	showsi (YYNTfixity _) = "<fixity>";
	showsi (YYNTfldid _) = "<fldid>";
	showsi (YYNTfldids _) = "<fldids>";
	showsi (YYNTforall _) = "<forall>";
	showsi (YYNTfundef _) = "<fundef>";
	showsi (YYNTfunhead _) = "<funhead>";
	showsi (YYNTgargs _) = "<gargs>";
	showsi (YYNTgetfield _) = "<getfield>";
	showsi (YYNTgetfields _) = "<getfields>";
	showsi (YYNTgqual _) = "<gqual>";
	showsi (YYNTgquals _) = "<gquals>";
	showsi (YYNTguard _) = "<guard>";
	showsi (YYNTguards _) = "<guards>";
	showsi (YYNTicontext _) = "<icontext>";
	showsi (YYNTimport _) = "<import>";
	showsi (YYNTimportitem _) = "<importitem>";
	showsi (YYNTimportliste _) = "<importliste>";
	showsi (YYNTimportspec _) = "<importspec>";
	showsi (YYNTimportspecs _) = "<importspecs>";
	showsi (YYNTimpurenativedef _) = "<impurenativedef>";
	showsi (YYNTinfix _) = "<infix>";
	showsi (YYNTinstdef _) = "<instdef>";
	showsi (YYNTinsthead _) = "<insthead>";
	showsi (YYNTinterfaces _) = "<interfaces>";
	showsi (YYNTjitem _) = "<jitem>";
	showsi (YYNTjtoken _) = "<jtoken>";
	showsi (YYNTjtokens _) = "<jtokens>";
	showsi (YYNTkind _) = "<kind>";
	showsi (YYNTlambda _) = "<lambda>";
	showsi (YYNTlambdabody _) = "<lambdabody>";
	showsi (YYNTlcqual _) = "<lcqual>";
	showsi (YYNTlcquals _) = "<lcquals>";
	showsi (YYNTletdef _) = "<letdef>";
	showsi (YYNTletdefs _) = "<letdefs>";
	showsi (YYNTliteral _) = "<literal>";
	showsi (YYNTlocaldef _) = "<localdef>";
	showsi (YYNTlocaldefs _) = "<localdefs>";
	showsi (YYNTmbdot _) = "<mbdot>";
	showsi (YYNTmemspec _) = "<memspec>";
	showsi (YYNTmemspecs _) = "<memspecs>";
	showsi (YYNTmethodspec _) = "<methodspec>";
	showsi (YYNTmodule _) = "<module>";
	showsi (YYNTmoduleclause _) = "<moduleclause>";
	showsi (YYNTmoduledefinition _) = "<moduledefinition>";
	showsi (YYNTmodulename _) = "<modulename>";
	showsi (YYNTmodulename1 _) = "<modulename1>";
	showsi (YYNTnativedef _) = "<nativedef>";
	showsi (YYNTnativename _) = "<nativename>";
	showsi (YYNTnativepur _) = "<nativepur>";
	showsi (YYNTnativespec _) = "<nativespec>";
	showsi (YYNToperator _) = "<operator>";
	showsi (YYNToperators _) = "<operators>";
	showsi (YYNTopstring _) = "<opstring>";
	showsi (YYNTpattern _) = "<pattern>";
	showsi (YYNTplainfldid _) = "<plainfldid>";
	showsi (YYNTplocaldef _) = "<plocaldef>";
	showsi (YYNTprimary _) = "<primary>";
	showsi (YYNTpublicdefinition _) = "<publicdefinition>";
	showsi (YYNTqconid _) = "<qconid>";
	showsi (YYNTqualifiers _) = "<qualifiers>";
	showsi (YYNTqvarid _) = "<qvarid>";
	showsi (YYNTqvarids _) = "<qvarids>";
	showsi (YYNTqvarop _) = "<qvarop>";
	showsi (YYNTrawnativename _) = "<rawnativename>";
	showsi (YYNTrho _) = "<rho>";
	showsi (YYNTrhofun _) = "<rhofun>";
	showsi (YYNTscontext _) = "<scontext>";
	showsi (YYNTscontexts _) = "<scontexts>";
	showsi (YYNTsicontext _) = "<sicontext>";
	showsi (YYNTsicontexts _) = "<sicontexts>";
	showsi (YYNTsigex _) = "<sigex>";
	showsi (YYNTsigexs _) = "<sigexs>";
	showsi (YYNTsigma _) = "<sigma>";
	showsi (YYNTsimpledalt _) = "<simpledalt>";
	showsi (YYNTsimplekind _) = "<simplekind>";
	showsi (YYNTsimpletype _) = "<simpletype>";
	showsi (YYNTsimpletypes _) = "<simpletypes>";
	showsi (YYNTstrictcontype _) = "<strictcontype>";
	showsi (YYNTstrictdalt _) = "<strictdalt>";
	showsi (YYNTstrictfldid _) = "<strictfldid>";
	showsi (YYNTtapp _) = "<tapp>";
	showsi (YYNTtau _) = "<tau>";
	showsi (YYNTtauSB _) = "<tauSB>";
	showsi (YYNTtauSC _) = "<tauSC>";
	showsi (YYNTterm _) = "<term>";
	showsi (YYNTthenx _) = "<thenx>";
	showsi (YYNTtopdefinition _) = "<topdefinition>";
	showsi (YYNTtopex _) = "<topex>";
	showsi (YYNTtyname _) = "<tyname>";
	showsi (YYNTtypeclause _) = "<typeclause>";
	showsi (YYNTtypedef _) = "<typedef>";
	showsi (YYNTtyvar _) = "<tyvar>";
	showsi (YYNTunex _) = "<unex>";
	showsi (YYNTunop _) = "<unop>";
	showsi (YYNTvarid _) = "<varid>";
	showsi (YYNTvaridkw _) = "<varidkw>";
	showsi (YYNTvarop _) = "<varop>";
	showsi (YYNTvisdalt _) = "<visdalt>";
	showsi (YYNTvisibledefinition _) = "<visibledefinition>";
	showsi (YYNTwheredef _) = "<wheredef>";
	showsi (YYNTwherelet _) = "<wherelet>";
	showsi (YYNTwheretokens _) = "<wheretokens>";
	showsi (YYNTword _) = "<word>";
	showsi (YYNTwords _) = "<words>";
showst st = joined " " (map (\(_,si) -> showsi si) (reverse st));
!yydebug = (maybe "" id (System.getenv "YYDEBUG")).toLowerCase ~ Â´(1|yes|true|on)Â´;
yytrace s = (if yydebug then trace s else false) `seq` ();
yydbgAccept  s t = yytrace ("in state " ++ show s ++ " accept  " ++ show t ++  "\n" );
private yyaction0 t =   case yychar t of {
  '{' -> YYAction (-18);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    PACKAGE -> YYAction (-18);
    PROTECTED -> YYAction (-18);
    _ -> YYAction yyErr;
  };
};
private yyaction1 t =   case yychar t of {
  '{' -> YYAction (-16);
  '?' -> YYAction (-16);
  '!' -> YYAction (-16);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    VARID -> YYAction (-16);
    PACKAGE -> YYAction (-16);
    PRIVATE -> YYAction (-16);
    PROTECTED -> YYAction (-16);
    PUBLIC -> YYAction (-16);
    _ -> YYAction yyErr;
  };
};
yyaccept  (yyvals@((2, (YYNTmodule yy1)):_), yytoks) = yydbgAccept 2 (showst (take 1 yyvals)) `seq`
	([(2, YYAcc yy1)], yytoks);
yyaccept (yyvs,_) = yybadprod 2 yyvs;
private yyaction2 t = YYAction yyErr;
private yyaction3 t =   case yychar t of {
  '{' -> YYAction 8;
  _ ->   case yytoken t of {
    PACKAGE -> YYAction 6;
    PROTECTED -> YYAction 7;
    _ -> YYAction yyErr;
  };
};
private yyaction4 t = YYAction (-19);
private yyaction5 t = YYAction (-17);
private yyaction6 t =   case yytoken t of {
    VARID -> YYAction 10;
    CONID -> YYAction 11;
    QUALIFIER -> YYAction 12;
    PACKAGE -> YYAction 13;
    IMPORT -> YYAction 14;
    NATIVE -> YYAction 15;
    DATA -> YYAction 16;
    TYPE -> YYAction 17;
    PURE -> YYAction 18;
    _ -> YYAction yyErr;
  };
private yyaction7 t =   case yytoken t of {
    PACKAGE -> YYAction 22;
    _ -> YYAction yyErr;
  };
private yyaction8 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    DOCUMENTATION -> YYAction 26;
    IMPORT -> YYAction 27;
    INFIX -> YYAction 28;
    INFIXR -> YYAction 29;
    INFIXL -> YYAction 30;
    NATIVE -> YYAction 31;
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    CLASS -> YYAction 34;
    INSTANCE -> YYAction 35;
    ABSTRACT -> YYAction 36;
    TYPE -> YYAction 37;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    DERIVE -> YYAction 42;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PRIVATE -> YYAction 45;
    PROTECTED -> YYAction 46;
    PUBLIC -> YYAction 47;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction9 t =   case yychar t of {
  ';' -> YYAction 106;
  _ ->   case yytoken t of {
    VARID -> YYAction 104;
    WHERE -> YYAction 105;
    _ -> YYAction yyErr;
  };
};
private yyaction10 t = YYAction (-170);
private yyaction11 t = YYAction (-12);
private yyaction12 t =   case yytoken t of {
    VARID -> YYAction 10;
    CONID -> YYAction 11;
    QUALIFIER -> YYAction 12;
    PACKAGE -> YYAction 13;
    IMPORT -> YYAction 14;
    NATIVE -> YYAction 15;
    DATA -> YYAction 16;
    TYPE -> YYAction 17;
    PURE -> YYAction 18;
    _ -> YYAction yyErr;
  };
private yyaction13 t = YYAction (-175);
private yyaction14 t = YYAction (-176);
private yyaction15 t = YYAction (-173);
private yyaction16 t = YYAction (-171);
private yyaction17 t = YYAction (-172);
private yyaction18 t = YYAction (-174);
private yyaction19 t = YYAction (-15);
private yyaction20 t =   case yychar t of {
  '.' -> YYAction 110;
  _ -> YYAction yyErr;
};
private yyaction21 t = YYAction (-20);
private yyaction22 t =   case yytoken t of {
    VARID -> YYAction 10;
    CONID -> YYAction 11;
    QUALIFIER -> YYAction 12;
    PACKAGE -> YYAction 13;
    IMPORT -> YYAction 14;
    NATIVE -> YYAction 15;
    DATA -> YYAction 16;
    TYPE -> YYAction 17;
    PURE -> YYAction 18;
    _ -> YYAction yyErr;
  };
private yyaction23 t =   case yychar t of {
  '-' -> YYAction (-181);
  '.' -> YYAction (-181);
  '(' -> YYAction (-181);
  ',' -> YYAction (-169);
  '|' -> YYAction (-181);
  '[' -> YYAction (-181);
  '?' -> YYAction (-181);
  '!' -> YYAction (-181);
  '=' -> YYAction (-181);
  '_' -> YYAction (-181);
  _ ->   case yytoken t of {
    VARID -> YYAction (-181);
    CONID -> YYAction (-181);
    QUALIFIER -> YYAction (-181);
    TRUE -> YYAction (-181);
    FALSE -> YYAction (-181);
    DO -> YYAction (-181);
    INTCONST -> YYAction (-181);
    STRCONST -> YYAction (-181);
    LONGCONST -> YYAction (-181);
    FLTCONST -> YYAction (-181);
    DBLCONST -> YYAction (-181);
    DECCONST -> YYAction (-181);
    CHRCONST -> YYAction (-181);
    REGEXP -> YYAction (-181);
    BIGCONST -> YYAction (-181);
    DCOLON -> YYAction (-169);
    SOMEOP -> YYAction (-181);
    _ -> YYAction yyErr;
  };
};
private yyaction24 t = YYAction (-184);
private yyaction25 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '{' -> YYAction (-410);
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    CONID -> YYAction 113;
    QUALIFIER -> YYAction 114;
    _ -> YYAction yyErr;
  };
};
private yyaction26 t = YYAction (-114);
private yyaction27 t =   case yytoken t of {
    VARID -> YYAction 10;
    CONID -> YYAction 11;
    QUALIFIER -> YYAction 12;
    PACKAGE -> YYAction 13;
    IMPORT -> YYAction 14;
    NATIVE -> YYAction 15;
    DATA -> YYAction 16;
    TYPE -> YYAction 17;
    PURE -> YYAction 18;
    _ -> YYAction yyErr;
  };
private yyaction28 t =   case yytoken t of {
    INTCONST -> YYAction 118;
    _ -> YYAction yyErr;
  };
private yyaction29 t =   case yytoken t of {
    INTCONST -> YYAction 119;
    _ -> YYAction yyErr;
  };
private yyaction30 t =   case yytoken t of {
    INTCONST -> YYAction 120;
    _ -> YYAction yyErr;
  };
private yyaction31 t =   case yychar t of {
  '-' -> YYAction 124;
  '(' -> YYAction 125;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    PACKAGE -> YYAction 122;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction32 t =   case yytoken t of {
    CONID -> YYAction 131;
    _ -> YYAction yyErr;
  };
private yyaction33 t =   case yytoken t of {
    CONID -> YYAction 132;
    _ -> YYAction yyErr;
  };
private yyaction34 t =   case yychar t of {
  '(' -> YYAction 134;
  _ ->   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
};
private yyaction35 t =   case yychar t of {
  '(' -> YYAction 138;
  _ ->   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
};
private yyaction36 t =   case yytoken t of {
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 143;
    _ -> YYAction yyErr;
  };
private yyaction37 t =   case yytoken t of {
    CONID -> YYAction 145;
    _ -> YYAction yyErr;
  };
private yyaction38 t = YYAction (-349);
private yyaction39 t = YYAction (-350);
private yyaction40 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction41 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction42 t =   case yychar t of {
  '(' -> YYAction 138;
  _ ->   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
};
private yyaction43 t =   case yychar t of {
  '{' -> YYAction 152;
  _ -> YYAction yyErr;
};
private yyaction44 t =   case yychar t of {
  '{' -> YYAction 153;
  _ -> YYAction yyErr;
};
private yyaction45 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    NATIVE -> YYAction 154;
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    CLASS -> YYAction 34;
    INSTANCE -> YYAction 35;
    TYPE -> YYAction 37;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    DERIVE -> YYAction 42;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction46 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    NATIVE -> YYAction 154;
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    CLASS -> YYAction 34;
    INSTANCE -> YYAction 35;
    TYPE -> YYAction 37;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    DERIVE -> YYAction 42;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction47 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    NATIVE -> YYAction 154;
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    CLASS -> YYAction 34;
    INSTANCE -> YYAction 35;
    TYPE -> YYAction 37;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    DERIVE -> YYAction 42;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction48 t =   case yytoken t of {
    NATIVE -> YYAction 154;
    _ -> YYAction yyErr;
  };
private yyaction49 t = YYAction (-353);
private yyaction50 t = YYAction (-352);
private yyaction51 t = YYAction (-355);
private yyaction52 t = YYAction (-356);
private yyaction53 t = YYAction (-357);
private yyaction54 t = YYAction (-358);
private yyaction55 t = YYAction (-351);
private yyaction56 t = YYAction (-359);
private yyaction57 t = YYAction (-354);
private yyaction58 t =   case yychar t of {
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction59 t =   case yychar t of {
  '-' -> YYAction 160;
  '(' -> YYAction 147;
  ')' -> YYAction 161;
  ',' -> YYAction 162;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction60 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  ']' -> YYAction 168;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction61 t = YYAction (-193);
private yyaction62 t = YYAction (-192);
private yyaction63 t =   case yychar t of {
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction64 t = YYAction (-428);
private yyaction65 t =   case yychar t of {
  '}' -> YYAction 173;
  _ -> YYAction yyBrace;
};
private yyaction66 t =   case yychar t of {
  ';' -> YYAction 174;
  '}' -> YYAction (-26);
  _ -> YYAction yyBrace;
};
private yyaction67 t = YYAction (-29);
private yyaction68 t = YYAction (-30);
private yyaction69 t = YYAction (-31);
private yyaction70 t = YYAction (-39);
private yyaction71 t = YYAction (-116);
private yyaction72 t = YYAction (-36);
private yyaction73 t = YYAction (-37);
private yyaction74 t = YYAction (-38);
private yyaction75 t = YYAction (-115);
private yyaction76 t = YYAction (-117);
private yyaction77 t = YYAction (-118);
private yyaction78 t = YYAction (-119);
private yyaction79 t = YYAction (-120);
private yyaction80 t = YYAction (-121);
private yyaction81 t = YYAction (-125);
private yyaction82 t = YYAction (-126);
private yyaction83 t =   case yychar t of {
  ';' -> YYAction (-127);
  '}' -> YYAction (-127);
  _ ->   case yytoken t of {
    WHERE -> YYAction 175;
    _ -> YYAction yyBrace;
  };
};
private yyaction84 t = YYAction (-204);
private yyaction85 t = YYAction (-426);
private yyaction86 t =   case yychar t of {
  '{' -> YYAction 177;
  '-' -> YYAction (-429);
  ';' -> YYAction (-429);
  '}' -> YYAction (-429);
  '.' -> YYAction (-429);
  '(' -> YYAction (-429);
  ')' -> YYAction (-429);
  ',' -> YYAction (-429);
  '|' -> YYAction (-429);
  '[' -> YYAction (-429);
  ']' -> YYAction (-429);
  '?' -> YYAction (-429);
  '!' -> YYAction (-429);
  '=' -> YYAction (-429);
  '\\' -> YYAction (-429);
  '_' -> YYAction (-429);
  _ ->   case yytoken t of {
    VARID -> YYAction (-429);
    CONID -> YYAction (-429);
    QUALIFIER -> YYAction (-429);
    WHERE -> YYAction (-429);
    TRUE -> YYAction (-429);
    FALSE -> YYAction (-429);
    THEN -> YYAction (-429);
    ELSE -> YYAction (-429);
    OF -> YYAction (-429);
    DO -> YYAction (-429);
    INTCONST -> YYAction (-429);
    STRCONST -> YYAction (-429);
    LONGCONST -> YYAction (-429);
    FLTCONST -> YYAction (-429);
    DBLCONST -> YYAction (-429);
    DECCONST -> YYAction (-429);
    CHRCONST -> YYAction (-429);
    REGEXP -> YYAction (-429);
    BIGCONST -> YYAction (-429);
    ARROW -> YYAction (-429);
    DCOLON -> YYAction (-429);
    GETS -> YYAction (-429);
    DOTDOT -> YYAction (-429);
    SOMEOP -> YYAction (-429);
    _ -> YYAction yyBrace;
  };
};
private yyaction87 t =   case yychar t of {
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction88 t =   case yychar t of {
  '-' -> YYAction 180;
  _ ->   case yytoken t of {
    VARID -> YYAction 179;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction89 t =   case yytoken t of {
    DCOLON -> YYAction 184;
    _ -> YYAction yyErr;
  };
private yyaction90 t =   case yychar t of {
  ',' -> YYAction 185;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-208);
    _ -> YYAction yyErr;
  };
};
private yyaction91 t = YYAction (-211);
private yyaction92 t =   case yychar t of {
  ';' -> YYAction (-340);
  '}' -> YYAction (-340);
  _ ->   case yytoken t of {
    WHERE -> YYAction 186;
    _ -> YYAction yyBrace;
  };
};
private yyaction93 t =   case yychar t of {
  ';' -> YYAction (-340);
  '}' -> YYAction (-340);
  _ ->   case yytoken t of {
    WHERE -> YYAction 186;
    _ -> YYAction yyBrace;
  };
};
private yyaction94 t =   case yychar t of {
  '|' -> YYAction 189;
  '=' -> YYAction 190;
  _ -> YYAction yyErr;
};
private yyaction95 t =   case yychar t of {
  '-' -> YYAction 194;
  '|' -> YYAction (-348);
  '=' -> YYAction (-348);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 193;
    _ -> YYAction yyErr;
  };
};
private yyaction96 t = YYAction (-427);
private yyaction97 t = YYAction (-402);
private yyaction98 t = YYAction (-398);
private yyaction99 t =   case yychar t of {
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '_' -> YYAction 64;
  '-' -> YYAction (-403);
  ';' -> YYAction (-403);
  '}' -> YYAction (-403);
  ')' -> YYAction (-403);
  ',' -> YYAction (-403);
  '|' -> YYAction (-403);
  ']' -> YYAction (-403);
  '=' -> YYAction (-403);
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    WHERE -> YYAction (-403);
    THEN -> YYAction (-403);
    ELSE -> YYAction (-403);
    OF -> YYAction (-403);
    ARROW -> YYAction (-403);
    DCOLON -> YYAction (-403);
    GETS -> YYAction (-403);
    DOTDOT -> YYAction (-403);
    SOMEOP -> YYAction (-403);
    _ -> YYAction yyBrace;
  };
};
private yyaction100 t = YYAction (-404);
private yyaction101 t =   case yychar t of {
  '.' -> YYAction 196;
  '-' -> YYAction (-406);
  ';' -> YYAction (-406);
  '}' -> YYAction (-406);
  '(' -> YYAction (-406);
  ')' -> YYAction (-406);
  ',' -> YYAction (-406);
  '|' -> YYAction (-406);
  '[' -> YYAction (-406);
  ']' -> YYAction (-406);
  '?' -> YYAction (-406);
  '!' -> YYAction (-406);
  '=' -> YYAction (-406);
  '\\' -> YYAction (-406);
  '_' -> YYAction (-406);
  _ ->   case yytoken t of {
    VARID -> YYAction (-406);
    CONID -> YYAction (-406);
    QUALIFIER -> YYAction (-406);
    WHERE -> YYAction (-406);
    TRUE -> YYAction (-406);
    FALSE -> YYAction (-406);
    THEN -> YYAction (-406);
    ELSE -> YYAction (-406);
    OF -> YYAction (-406);
    DO -> YYAction (-406);
    INTCONST -> YYAction (-406);
    STRCONST -> YYAction (-406);
    LONGCONST -> YYAction (-406);
    FLTCONST -> YYAction (-406);
    DBLCONST -> YYAction (-406);
    DECCONST -> YYAction (-406);
    CHRCONST -> YYAction (-406);
    REGEXP -> YYAction (-406);
    BIGCONST -> YYAction (-406);
    ARROW -> YYAction (-406);
    DCOLON -> YYAction (-406);
    GETS -> YYAction (-406);
    DOTDOT -> YYAction (-406);
    SOMEOP -> YYAction (-406);
    _ -> YYAction yyBrace;
  };
};
private yyaction102 t =   case yychar t of {
  '{' -> YYAction 197;
  _ -> YYAction yyErr;
};
private yyaction103 t = YYAction (-412);
private yyaction104 t = YYAction (-23);
private yyaction105 t =   case yychar t of {
  '{' -> YYAction 198;
  _ -> YYAction yyErr;
};
private yyaction106 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    DOCUMENTATION -> YYAction 26;
    IMPORT -> YYAction 27;
    INFIX -> YYAction 28;
    INFIXR -> YYAction 29;
    INFIXL -> YYAction 30;
    NATIVE -> YYAction 31;
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    CLASS -> YYAction 34;
    INSTANCE -> YYAction 35;
    ABSTRACT -> YYAction 36;
    TYPE -> YYAction 37;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    DERIVE -> YYAction 42;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PRIVATE -> YYAction 45;
    PROTECTED -> YYAction 46;
    PUBLIC -> YYAction 47;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction107 t =   case yychar t of {
  '(' -> YYAction 200;
  _ -> YYAction yyErr;
};
private yyaction108 t =   case yychar t of {
  '(' -> YYAction (-24);
  _ ->   case yytoken t of {
    VARID -> YYAction 104;
    _ -> YYAction yyErr;
  };
};
private yyaction109 t = YYAction (-14);
private yyaction110 t =   case yytoken t of {
    VARID -> YYAction 10;
    CONID -> YYAction 11;
    QUALIFIER -> YYAction 12;
    PACKAGE -> YYAction 13;
    IMPORT -> YYAction 14;
    NATIVE -> YYAction 15;
    DATA -> YYAction 16;
    TYPE -> YYAction 17;
    PURE -> YYAction 18;
    _ -> YYAction yyErr;
  };
private yyaction111 t = YYAction (-21);
private yyaction112 t = YYAction (-185);
private yyaction113 t = YYAction (-183);
private yyaction114 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '{' -> YYAction (-411);
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    CONID -> YYAction 203;
    _ -> YYAction yyErr;
  };
};
private yyaction115 t = YYAction (-186);
private yyaction116 t = YYAction (-180);
private yyaction117 t =   case yychar t of {
  '(' -> YYAction 208;
  ';' -> YYAction (-143);
  '}' -> YYAction (-143);
  _ ->   case yytoken t of {
    VARID -> YYAction 205;
    CONID -> YYAction 206;
    PUBLIC -> YYAction 207;
    _ -> YYAction yyBrace;
  };
};
private yyaction118 t = YYAction (-194);
private yyaction119 t = YYAction (-196);
private yyaction120 t = YYAction (-195);
private yyaction121 t = YYAction (-169);
private yyaction122 t =   case yytoken t of {
    TYPE -> YYAction 211;
    WHERE -> YYAction (-41);
    CLASS -> YYAction (-41);
    _ -> YYAction yyErr;
  };
private yyaction123 t = YYAction (-191);
private yyaction124 t = YYAction (-214);
private yyaction125 t =   case yychar t of {
  '-' -> YYAction 213;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction126 t = YYAction (-215);
private yyaction127 t = YYAction (-213);
private yyaction128 t = YYAction (-212);
private yyaction129 t =   case yychar t of {
  '{' -> YYAction 221;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 216;
    CONID -> YYAction 217;
    QUALIFIER -> YYAction 218;
    PACKAGE -> YYAction 219;
    STRCONST -> YYAction 220;
    SOMEOP -> YYAction 123;
    DCOLON -> YYAction (-222);
    _ -> YYAction yyErr;
  };
};
private yyaction130 t =   case yytoken t of {
    DCOLON -> YYAction 228;
    _ -> YYAction yyErr;
  };
private yyaction131 t =   case yychar t of {
  '(' -> YYAction 230;
  '=' -> YYAction 231;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    _ -> YYAction yyErr;
  };
};
private yyaction132 t =   case yychar t of {
  '(' -> YYAction 230;
  '=' -> YYAction 234;
  ';' -> YYAction (-293);
  '}' -> YYAction (-293);
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    WHERE -> YYAction (-293);
    _ -> YYAction yyBrace;
  };
};
private yyaction133 t =   case yytoken t of {
    CONID -> YYAction 113;
    QUALIFIER -> YYAction 236;
    _ -> YYAction yyErr;
  };
private yyaction134 t =   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
private yyaction135 t =   case yychar t of {
  '(' -> YYAction 230;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    _ -> YYAction yyErr;
  };
};
private yyaction136 t = YYAction (-269);
private yyaction137 t =   case yychar t of {
  ';' -> YYAction (-340);
  '}' -> YYAction (-340);
  _ ->   case yytoken t of {
    WHERE -> YYAction 186;
    EARROW -> YYAction 240;
    _ -> YYAction yyBrace;
  };
};
private yyaction138 t =   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
private yyaction139 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
};
private yyaction140 t = YYAction (-277);
private yyaction141 t =   case yychar t of {
  ';' -> YYAction (-280);
  '}' -> YYAction (-280);
  _ ->   case yytoken t of {
    EARROW -> YYAction 250;
    WHERE -> YYAction (-280);
    _ -> YYAction yyBrace;
  };
};
private yyaction142 t =   case yychar t of {
  ';' -> YYAction (-340);
  '}' -> YYAction (-340);
  _ ->   case yytoken t of {
    WHERE -> YYAction 186;
    _ -> YYAction yyBrace;
  };
};
private yyaction143 t =   case yytoken t of {
    CONID -> YYAction 252;
    _ -> YYAction yyErr;
  };
private yyaction144 t = YYAction (-35);
private yyaction145 t =   case yychar t of {
  '(' -> YYAction 230;
  '=' -> YYAction 253;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    _ -> YYAction yyErr;
  };
};
private yyaction146 t = YYAction (-181);
private yyaction147 t =   case yychar t of {
  '-' -> YYAction 255;
  '(' -> YYAction 147;
  ')' -> YYAction 161;
  ',' -> YYAction 162;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction148 t =   case yychar t of {
  ';' -> YYAction 259;
  _ ->   case yytoken t of {
    THEN -> YYAction 258;
    _ -> YYAction yyErr;
  };
};
private yyaction149 t =   case yychar t of {
  '-' -> YYAction 194;
  ';' -> YYAction (-390);
  '}' -> YYAction (-390);
  ')' -> YYAction (-390);
  ',' -> YYAction (-390);
  '|' -> YYAction (-390);
  ']' -> YYAction (-390);
  '=' -> YYAction (-390);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 261;
    SOMEOP -> YYAction 193;
    WHERE -> YYAction (-390);
    THEN -> YYAction (-390);
    ELSE -> YYAction (-390);
    OF -> YYAction (-390);
    ARROW -> YYAction (-390);
    GETS -> YYAction (-390);
    DOTDOT -> YYAction (-390);
    _ -> YYAction yyBrace;
  };
};
private yyaction150 t =   case yytoken t of {
    OF -> YYAction 262;
    _ -> YYAction yyErr;
  };
private yyaction151 t = YYAction (-282);
private yyaction152 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction153 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 267;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction154 t =   case yychar t of {
  '-' -> YYAction 124;
  '(' -> YYAction 125;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction155 t = YYAction (-32);
private yyaction156 t = YYAction (-33);
private yyaction157 t = YYAction (-34);
private yyaction158 t = YYAction (-210);
private yyaction159 t = YYAction (-397);
private yyaction160 t =   case yychar t of {
  '(' -> YYAction 147;
  ')' -> YYAction 272;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction161 t = YYAction (-432);
private yyaction162 t =   case yychar t of {
  ',' -> YYAction 162;
  ')' -> YYAction (-448);
  _ -> YYAction yyErr;
};
private yyaction163 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  ')' -> YYAction 274;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction164 t =   case yychar t of {
  '(' -> YYAction 147;
  ')' -> YYAction 276;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction165 t =   case yychar t of {
  ')' -> YYAction 277;
  _ -> YYAction yyErr;
};
private yyaction166 t =   case yychar t of {
  ';' -> YYAction 278;
  ')' -> YYAction 279;
  ',' -> YYAction 280;
  _ -> YYAction yyErr;
};
private yyaction167 t =   case yychar t of {
  '-' -> YYAction 282;
  ';' -> YYAction (-390);
  ')' -> YYAction (-390);
  ',' -> YYAction (-390);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 261;
    SOMEOP -> YYAction 281;
    _ -> YYAction yyErr;
  };
};
private yyaction168 t = YYAction (-443);
private yyaction169 t =   case yychar t of {
  ',' -> YYAction 284;
  '|' -> YYAction 285;
  ']' -> YYAction (-461);
  _ ->   case yytoken t of {
    DOTDOT -> YYAction (-461);
    _ -> YYAction yyErr;
  };
};
private yyaction170 t =   case yychar t of {
  ']' -> YYAction 287;
  _ ->   case yytoken t of {
    DOTDOT -> YYAction 286;
    _ -> YYAction yyErr;
  };
};
private yyaction171 t =   case yychar t of {
  '\\' -> YYAction 63;
  _ ->   case yytoken t of {
    ARROW -> YYAction 288;
    _ -> YYAction yyErr;
  };
};
private yyaction172 t =   case yychar t of {
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '_' -> YYAction 64;
  '\\' -> YYAction (-408);
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    ARROW -> YYAction (-408);
    _ -> YYAction yyErr;
  };
};
private yyaction173 t = YYAction (-3);
private yyaction174 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  '}' -> YYAction (-27);
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    DOCUMENTATION -> YYAction 26;
    IMPORT -> YYAction 27;
    INFIX -> YYAction 28;
    INFIXR -> YYAction 29;
    INFIXL -> YYAction 30;
    NATIVE -> YYAction 31;
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    CLASS -> YYAction 34;
    INSTANCE -> YYAction 35;
    ABSTRACT -> YYAction 36;
    TYPE -> YYAction 37;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    DERIVE -> YYAction 42;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PRIVATE -> YYAction 45;
    PROTECTED -> YYAction 46;
    PUBLIC -> YYAction 47;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyBrace;
  };
};
private yyaction175 t =   case yychar t of {
  '{' -> YYAction 293;
  _ -> YYAction yyErr;
};
private yyaction176 t = YYAction (-347);
private yyaction177 t =   case yychar t of {
  '}' -> YYAction 294;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    _ -> YYAction yyBrace;
  };
};
private yyaction178 t = YYAction (-407);
private yyaction179 t = YYAction (-198);
private yyaction180 t = YYAction (-199);
private yyaction181 t = YYAction (-197);
private yyaction182 t =   case yychar t of {
  '-' -> YYAction 180;
  ';' -> YYAction (-200);
  '}' -> YYAction (-200);
  _ ->   case yytoken t of {
    VARID -> YYAction 179;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyBrace;
  };
};
private yyaction183 t = YYAction (-202);
private yyaction184 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction185 t =   case yychar t of {
  '(' -> YYAction 125;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    _ -> YYAction yyErr;
  };
};
private yyaction186 t =   case yychar t of {
  '{' -> YYAction 308;
  _ -> YYAction yyErr;
};
private yyaction187 t = YYAction (-283);
private yyaction188 t = YYAction (-284);
private yyaction189 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction190 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction191 t = YYAction (-346);
private yyaction192 t =   case yychar t of {
  '|' -> YYAction 189;
  ';' -> YYAction (-378);
  '}' -> YYAction (-378);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-378);
    _ -> YYAction yyBrace;
  };
};
private yyaction193 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction194 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction195 t = YYAction (-405);
private yyaction196 t =   case yychar t of {
  '{' -> YYAction 317;
  '[' -> YYAction 318;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 316;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction197 t =   case yytoken t of {
    VARID -> YYAction 321;
    _ -> YYAction yyErr;
  };
private yyaction198 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    DOCUMENTATION -> YYAction 26;
    IMPORT -> YYAction 27;
    INFIX -> YYAction 28;
    INFIXR -> YYAction 29;
    INFIXL -> YYAction 30;
    NATIVE -> YYAction 31;
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    CLASS -> YYAction 34;
    INSTANCE -> YYAction 35;
    ABSTRACT -> YYAction 36;
    TYPE -> YYAction 37;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    DERIVE -> YYAction 42;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PRIVATE -> YYAction 45;
    PROTECTED -> YYAction 46;
    PUBLIC -> YYAction 47;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction199 t = YYAction (-1);
private yyaction200 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    QUALIFIER -> YYAction 325;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction201 t = YYAction (-25);
private yyaction202 t = YYAction (-13);
private yyaction203 t = YYAction (-182);
private yyaction204 t = YYAction (-179);
private yyaction205 t =   case yychar t of {
  '(' -> YYAction (-169);
  _ ->   case yytoken t of {
    CONID -> YYAction 330;
    _ -> YYAction yyErr;
  };
};
private yyaction206 t =   case yychar t of {
  '(' -> YYAction 208;
  ';' -> YYAction (-143);
  '}' -> YYAction (-143);
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    PUBLIC -> YYAction 207;
    _ -> YYAction yyBrace;
  };
};
private yyaction207 t =   case yychar t of {
  '(' -> YYAction 208;
  ';' -> YYAction (-143);
  '}' -> YYAction (-143);
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    PUBLIC -> YYAction 207;
    _ -> YYAction yyBrace;
  };
};
private yyaction208 t =   case yychar t of {
  ')' -> YYAction 336;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 333;
    QUALIFIER -> YYAction 334;
    PUBLIC -> YYAction 335;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction209 t = YYAction (-140);
private yyaction210 t =   case yychar t of {
  '(' -> YYAction 344;
  _ -> YYAction yyErr;
};
private yyaction211 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction212 t =   case yytoken t of {
    CLASS -> YYAction 348;
    WHERE -> YYAction (-43);
    _ -> YYAction yyErr;
  };
private yyaction213 t =   case yychar t of {
  ')' -> YYAction 350;
  _ -> YYAction yyErr;
};
private yyaction214 t =   case yychar t of {
  ')' -> YYAction 351;
  _ -> YYAction yyErr;
};
private yyaction215 t =   case yychar t of {
  ')' -> YYAction 352;
  _ -> YYAction yyErr;
};
private yyaction216 t =   case yychar t of {
  '.' -> YYAction 353;
  ';' -> YYAction (-5);
  '{' -> YYAction (-5);
  '}' -> YYAction (-5);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-5);
    DCOLON -> YYAction (-5);
    _ -> YYAction yyBrace;
  };
};
private yyaction217 t = YYAction (-6);
private yyaction218 t =   case yytoken t of {
    VARID -> YYAction 216;
    CONID -> YYAction 217;
    QUALIFIER -> YYAction 218;
    PACKAGE -> YYAction 219;
    STRCONST -> YYAction 220;
    _ -> YYAction yyErr;
  };
private yyaction219 t =   case yychar t of {
  '.' -> YYAction 355;
  ';' -> YYAction (-7);
  '{' -> YYAction (-7);
  '}' -> YYAction (-7);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-7);
    DCOLON -> YYAction (-7);
    _ -> YYAction yyBrace;
  };
};
private yyaction220 t = YYAction (-11);
private yyaction221 t =   case yychar t of {
  '}' -> YYAction 356;
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyBrace;
  };
};
private yyaction222 t = YYAction (-216);
private yyaction223 t = YYAction (-4);
private yyaction224 t = YYAction (-217);
private yyaction225 t = YYAction (-218);
private yyaction226 t =   case yychar t of {
  '{' -> YYAction 221;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-220);
    _ -> YYAction yyErr;
  };
};
private yyaction227 t = YYAction (-221);
private yyaction228 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction229 t = YYAction (-251);
private yyaction230 t =   case yytoken t of {
    VARID -> YYAction 363;
    EXTENDS -> YYAction 364;
    SUPER -> YYAction 365;
    _ -> YYAction yyErr;
  };
private yyaction231 t =   case yychar t of {
  '?' -> YYAction 371;
  '!' -> YYAction 372;
  _ ->   case yytoken t of {
    CONID -> YYAction 366;
    DOCUMENTATION -> YYAction 367;
    PRIVATE -> YYAction 368;
    PROTECTED -> YYAction 369;
    PUBLIC -> YYAction 370;
    _ -> YYAction yyErr;
  };
};
private yyaction232 t =   case yychar t of {
  '=' -> YYAction 377;
  _ -> YYAction yyErr;
};
private yyaction233 t =   case yychar t of {
  '(' -> YYAction 230;
  '.' -> YYAction (-298);
  '=' -> YYAction (-298);
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    SOMEOP -> YYAction (-298);
    _ -> YYAction yyErr;
  };
};
private yyaction234 t =   case yychar t of {
  '?' -> YYAction 371;
  '!' -> YYAction 372;
  _ ->   case yytoken t of {
    CONID -> YYAction 366;
    DOCUMENTATION -> YYAction 367;
    NATIVE -> YYAction 379;
    PRIVATE -> YYAction 368;
    PROTECTED -> YYAction 369;
    PUBLIC -> YYAction 370;
    PURE -> YYAction 380;
    _ -> YYAction yyErr;
  };
};
private yyaction235 t =   case yychar t of {
  '=' -> YYAction 384;
  _ -> YYAction yyErr;
};
private yyaction236 t =   case yytoken t of {
    CONID -> YYAction 203;
    _ -> YYAction yyErr;
  };
private yyaction237 t =   case yychar t of {
  ',' -> YYAction 385;
  ')' -> YYAction (-266);
  _ -> YYAction yyErr;
};
private yyaction238 t =   case yychar t of {
  ')' -> YYAction 386;
  _ -> YYAction yyErr;
};
private yyaction239 t = YYAction (-265);
private yyaction240 t =   case yytoken t of {
    CONID -> YYAction 387;
    _ -> YYAction yyErr;
  };
private yyaction241 t = YYAction (-272);
private yyaction242 t =   case yychar t of {
  ',' -> YYAction 388;
  ')' -> YYAction (-274);
  _ -> YYAction yyErr;
};
private yyaction243 t =   case yychar t of {
  ')' -> YYAction 389;
  _ -> YYAction yyErr;
};
private yyaction244 t =   case yychar t of {
  '(' -> YYAction 244;
  ')' -> YYAction 392;
  ',' -> YYAction 162;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 390;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    EXTENDS -> YYAction 364;
    SUPER -> YYAction 365;
    FORALL -> YYAction 299;
    ARROW -> YYAction 391;
    _ -> YYAction yyErr;
  };
};
private yyaction245 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  ']' -> YYAction 395;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction246 t = YYAction (-256);
private yyaction247 t = YYAction (-273);
private yyaction248 t = YYAction (-245);
private yyaction249 t = YYAction (-246);
private yyaction250 t =   case yychar t of {
  '(' -> YYAction 397;
  '[' -> YYAction 398;
  _ ->   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
};
private yyaction251 t = YYAction (-281);
private yyaction252 t =   case yychar t of {
  '(' -> YYAction 230;
  '=' -> YYAction 400;
  ';' -> YYAction (-293);
  '}' -> YYAction (-293);
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    WHERE -> YYAction (-293);
    _ -> YYAction yyBrace;
  };
};
private yyaction253 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction254 t =   case yychar t of {
  '=' -> YYAction 403;
  _ -> YYAction yyErr;
};
private yyaction255 t =   case yychar t of {
  '(' -> YYAction 147;
  ')' -> YYAction 404;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction256 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  ')' -> YYAction 405;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction257 t =   case yychar t of {
  '(' -> YYAction 147;
  ')' -> YYAction 406;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction258 t = YYAction (-392);
private yyaction259 t =   case yytoken t of {
    THEN -> YYAction 407;
    _ -> YYAction yyErr;
  };
private yyaction260 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction261 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction262 t =   case yychar t of {
  '{' -> YYAction 410;
  _ -> YYAction yyErr;
};
private yyaction263 t = YYAction (-135);
private yyaction264 t =   case yychar t of {
  ';' -> YYAction (-136);
  '}' -> YYAction (-136);
  _ ->   case yytoken t of {
    WHERE -> YYAction 175;
    _ -> YYAction yyBrace;
  };
};
private yyaction265 t =   case yychar t of {
  ';' -> YYAction 411;
  '}' -> YYAction (-137);
  _ -> YYAction yyBrace;
};
private yyaction266 t =   case yychar t of {
  '}' -> YYAction 412;
  _ -> YYAction yyBrace;
};
private yyaction267 t =   case yychar t of {
  '{' -> YYAction 413;
  _ -> YYAction yyErr;
};
private yyaction268 t =   case yychar t of {
  '=' -> YYAction 415;
  ';' -> YYAction (-372);
  '}' -> YYAction (-372);
  ',' -> YYAction (-372);
  ']' -> YYAction (-372);
  _ ->   case yytoken t of {
    GETS -> YYAction 414;
    _ -> YYAction yyBrace;
  };
};
private yyaction269 t =   case yychar t of {
  ';' -> YYAction 416;
  '}' -> YYAction (-369);
  _ -> YYAction yyBrace;
};
private yyaction270 t = YYAction (-363);
private yyaction271 t =   case yychar t of {
  '}' -> YYAction 417;
  _ -> YYAction yyBrace;
};
private yyaction272 t =   case yychar t of {
  '-' -> YYAction (-436);
  '.' -> YYAction (-436);
  '(' -> YYAction (-436);
  ',' -> YYAction (-207);
  '|' -> YYAction (-436);
  '[' -> YYAction (-436);
  '?' -> YYAction (-436);
  '!' -> YYAction (-436);
  '=' -> YYAction (-436);
  '_' -> YYAction (-436);
  _ ->   case yytoken t of {
    VARID -> YYAction (-436);
    CONID -> YYAction (-436);
    QUALIFIER -> YYAction (-436);
    TRUE -> YYAction (-436);
    FALSE -> YYAction (-436);
    DO -> YYAction (-436);
    INTCONST -> YYAction (-436);
    STRCONST -> YYAction (-436);
    LONGCONST -> YYAction (-436);
    FLTCONST -> YYAction (-436);
    DBLCONST -> YYAction (-436);
    DECCONST -> YYAction (-436);
    CHRCONST -> YYAction (-436);
    REGEXP -> YYAction (-436);
    BIGCONST -> YYAction (-436);
    DCOLON -> YYAction (-207);
    SOMEOP -> YYAction (-436);
    _ -> YYAction yyErr;
  };
};
private yyaction273 t = YYAction (-449);
private yyaction274 t =   case yychar t of {
  '-' -> YYAction (-435);
  '.' -> YYAction (-435);
  '(' -> YYAction (-435);
  ',' -> YYAction (-205);
  '|' -> YYAction (-435);
  '[' -> YYAction (-435);
  '?' -> YYAction (-435);
  '!' -> YYAction (-435);
  '=' -> YYAction (-435);
  '_' -> YYAction (-435);
  _ ->   case yytoken t of {
    VARID -> YYAction (-435);
    CONID -> YYAction (-435);
    QUALIFIER -> YYAction (-435);
    TRUE -> YYAction (-435);
    FALSE -> YYAction (-435);
    DO -> YYAction (-435);
    INTCONST -> YYAction (-435);
    STRCONST -> YYAction (-435);
    LONGCONST -> YYAction (-435);
    FLTCONST -> YYAction (-435);
    DBLCONST -> YYAction (-435);
    DECCONST -> YYAction (-435);
    CHRCONST -> YYAction (-435);
    REGEXP -> YYAction (-435);
    BIGCONST -> YYAction (-435);
    DCOLON -> YYAction (-205);
    SOMEOP -> YYAction (-435);
    _ -> YYAction yyErr;
  };
};
private yyaction275 t =   case yychar t of {
  ')' -> YYAction 418;
  _ -> YYAction yyErr;
};
private yyaction276 t =   case yychar t of {
  '-' -> YYAction (-434);
  '.' -> YYAction (-434);
  '(' -> YYAction (-434);
  ',' -> YYAction (-206);
  '|' -> YYAction (-434);
  '[' -> YYAction (-434);
  '?' -> YYAction (-434);
  '!' -> YYAction (-434);
  '=' -> YYAction (-434);
  '_' -> YYAction (-434);
  _ ->   case yytoken t of {
    VARID -> YYAction (-434);
    CONID -> YYAction (-434);
    QUALIFIER -> YYAction (-434);
    TRUE -> YYAction (-434);
    FALSE -> YYAction (-434);
    DO -> YYAction (-434);
    INTCONST -> YYAction (-434);
    STRCONST -> YYAction (-434);
    LONGCONST -> YYAction (-434);
    FLTCONST -> YYAction (-434);
    DBLCONST -> YYAction (-434);
    DECCONST -> YYAction (-434);
    CHRCONST -> YYAction (-434);
    REGEXP -> YYAction (-434);
    BIGCONST -> YYAction (-434);
    DCOLON -> YYAction (-206);
    SOMEOP -> YYAction (-434);
    _ -> YYAction yyErr;
  };
};
private yyaction277 t = YYAction (-433);
private yyaction278 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction279 t = YYAction (-442);
private yyaction280 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction281 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  ')' -> YYAction (-191);
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction282 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  ')' -> YYAction 423;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction283 t =   case yychar t of {
  ')' -> YYAction 424;
  _ -> YYAction yyErr;
};
private yyaction284 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  ')' -> YYAction (-463);
  ']' -> YYAction (-463);
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    DOTDOT -> YYAction (-463);
    _ -> YYAction yyErr;
  };
};
private yyaction285 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 267;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction286 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  ']' -> YYAction 428;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction287 t = YYAction (-444);
private yyaction288 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction289 t = YYAction (-387);
private yyaction290 t = YYAction (-386);
private yyaction291 t = YYAction (-409);
private yyaction292 t = YYAction (-28);
private yyaction293 t =   case yychar t of {
  '-' -> YYAction 58;
  '}' -> YYAction 431;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyBrace;
  };
};
private yyaction294 t = YYAction (-430);
private yyaction295 t =   case yychar t of {
  '=' -> YYAction 433;
  '}' -> YYAction (-460);
  ',' -> YYAction (-460);
  _ -> YYAction yyBrace;
};
private yyaction296 t =   case yychar t of {
  '}' -> YYAction 434;
  _ -> YYAction yyBrace;
};
private yyaction297 t =   case yychar t of {
  ',' -> YYAction 435;
  '}' -> YYAction (-450);
  _ -> YYAction yyBrace;
};
private yyaction298 t = YYAction (-201);
private yyaction299 t =   case yychar t of {
  '(' -> YYAction 230;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    _ -> YYAction yyErr;
  };
};
private yyaction300 t = YYAction (-203);
private yyaction301 t = YYAction (-228);
private yyaction302 t = YYAction (-229);
private yyaction303 t =   case yychar t of {
  '-' -> YYAction (-235);
  ';' -> YYAction (-235);
  '}' -> YYAction (-235);
  ')' -> YYAction (-235);
  ',' -> YYAction (-235);
  '|' -> YYAction (-235);
  ']' -> YYAction (-235);
  '=' -> YYAction (-235);
  _ ->   case yytoken t of {
    ARROW -> YYAction 437;
    EARROW -> YYAction 438;
    DOCUMENTATION -> YYAction (-235);
    WHERE -> YYAction (-235);
    CLASS -> YYAction (-235);
    THEN -> YYAction (-235);
    ELSE -> YYAction (-235);
    OF -> YYAction (-235);
    THROWS -> YYAction (-235);
    DCOLON -> YYAction (-235);
    GETS -> YYAction (-235);
    DOTDOT -> YYAction (-235);
    SOMEOP -> YYAction (-235);
    _ -> YYAction yyBrace;
  };
};
private yyaction304 t = YYAction (-234);
private yyaction305 t = YYAction (-244);
private yyaction306 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  '-' -> YYAction (-321);
  ';' -> YYAction (-321);
  '}' -> YYAction (-321);
  ')' -> YYAction (-321);
  ',' -> YYAction (-321);
  '|' -> YYAction (-321);
  ']' -> YYAction (-321);
  '=' -> YYAction (-321);
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    DOCUMENTATION -> YYAction (-321);
    WHERE -> YYAction (-321);
    CLASS -> YYAction (-321);
    THEN -> YYAction (-321);
    ELSE -> YYAction (-321);
    OF -> YYAction (-321);
    THROWS -> YYAction (-321);
    ARROW -> YYAction (-321);
    DCOLON -> YYAction (-321);
    GETS -> YYAction (-321);
    EARROW -> YYAction (-321);
    DOTDOT -> YYAction (-321);
    SOMEOP -> YYAction (-321);
    _ -> YYAction yyBrace;
  };
};
private yyaction307 t = YYAction (-209);
private yyaction308 t =   case yychar t of {
  '-' -> YYAction 58;
  '}' -> YYAction 443;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    DOCUMENTATION -> YYAction 26;
    NATIVE -> YYAction 154;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PRIVATE -> YYAction 440;
    PROTECTED -> YYAction 441;
    PUBLIC -> YYAction 442;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyBrace;
  };
};
private yyaction309 t =   case yychar t of {
  ',' -> YYAction (-372);
  '=' -> YYAction (-372);
  _ ->   case yytoken t of {
    GETS -> YYAction 414;
    ARROW -> YYAction (-372);
    _ -> YYAction yyErr;
  };
};
private yyaction310 t =   case yychar t of {
  ',' -> YYAction 449;
  '=' -> YYAction (-374);
  _ ->   case yytoken t of {
    ARROW -> YYAction (-374);
    _ -> YYAction yyErr;
  };
};
private yyaction311 t =   case yychar t of {
  '=' -> YYAction 451;
  _ ->   case yytoken t of {
    ARROW -> YYAction 450;
    _ -> YYAction yyErr;
  };
};
private yyaction312 t = YYAction (-345);
private yyaction313 t = YYAction (-379);
private yyaction314 t =   case yychar t of {
  '-' -> YYAction 194;
  ';' -> YYAction (-395);
  '}' -> YYAction (-395);
  ')' -> YYAction (-395);
  ',' -> YYAction (-395);
  '|' -> YYAction (-395);
  ']' -> YYAction (-395);
  '=' -> YYAction (-395);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 193;
    WHERE -> YYAction (-395);
    THEN -> YYAction (-395);
    ELSE -> YYAction (-395);
    OF -> YYAction (-395);
    ARROW -> YYAction (-395);
    DCOLON -> YYAction (-395);
    GETS -> YYAction (-395);
    DOTDOT -> YYAction (-395);
    _ -> YYAction yyBrace;
  };
};
private yyaction315 t =   case yychar t of {
  '-' -> YYAction 194;
  ';' -> YYAction (-396);
  '}' -> YYAction (-396);
  ')' -> YYAction (-396);
  ',' -> YYAction (-396);
  '|' -> YYAction (-396);
  ']' -> YYAction (-396);
  '=' -> YYAction (-396);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 193;
    WHERE -> YYAction (-396);
    THEN -> YYAction (-396);
    ELSE -> YYAction (-396);
    OF -> YYAction (-396);
    ARROW -> YYAction (-396);
    DCOLON -> YYAction (-396);
    GETS -> YYAction (-396);
    DOTDOT -> YYAction (-396);
    _ -> YYAction yyBrace;
  };
};
private yyaction316 t = YYAction (-414);
private yyaction317 t =   case yytoken t of {
    VARID -> YYAction 453;
    _ -> YYAction yyErr;
  };
private yyaction318 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction319 t = YYAction (-415);
private yyaction320 t = YYAction (-416);
private yyaction321 t =   case yychar t of {
  '?' -> YYAction 457;
  '=' -> YYAction 458;
  '}' -> YYAction (-458);
  ',' -> YYAction (-458);
  _ ->   case yytoken t of {
    GETS -> YYAction 456;
    _ -> YYAction yyBrace;
  };
};
private yyaction322 t =   case yychar t of {
  '}' -> YYAction 459;
  _ -> YYAction yyBrace;
};
private yyaction323 t =   case yychar t of {
  ',' -> YYAction 460;
  '}' -> YYAction (-453);
  _ -> YYAction yyBrace;
};
private yyaction324 t =   case yychar t of {
  '}' -> YYAction 461;
  _ -> YYAction yyBrace;
};
private yyaction325 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    QUALIFIER -> YYAction 462;
    _ -> YYAction yyErr;
  };
};
private yyaction326 t =   case yychar t of {
  ')' -> YYAction 464;
  _ -> YYAction yyErr;
};
private yyaction327 t = YYAction (-190);
private yyaction328 t =   case yychar t of {
  ',' -> YYAction 465;
  ')' -> YYAction (-177);
  _ -> YYAction yyErr;
};
private yyaction329 t = YYAction (-189);
private yyaction330 t =   case yychar t of {
  '(' -> YYAction 208;
  ';' -> YYAction (-143);
  '}' -> YYAction (-143);
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    PUBLIC -> YYAction 207;
    _ -> YYAction yyBrace;
  };
};
private yyaction331 t = YYAction (-142);
private yyaction332 t = YYAction (-147);
private yyaction333 t =   case yychar t of {
  '(' -> YYAction 467;
  ')' -> YYAction (-184);
  ',' -> YYAction (-184);
  _ ->   case yytoken t of {
    VARID -> YYAction (-184);
    CONID -> YYAction (-184);
    SOMEOP -> YYAction (-184);
    _ -> YYAction yyErr;
  };
};
private yyaction334 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    CONID -> YYAction 113;
    QUALIFIER -> YYAction 468;
    _ -> YYAction yyErr;
  };
};
private yyaction335 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 333;
    QUALIFIER -> YYAction 334;
    PUBLIC -> YYAction 335;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction336 t = YYAction (-145);
private yyaction337 t =   case yychar t of {
  ')' -> YYAction 470;
  _ -> YYAction yyErr;
};
private yyaction338 t =   case yychar t of {
  ',' -> YYAction 471;
  ')' -> YYAction (-148);
  _ -> YYAction yyErr;
};
private yyaction339 t =   case yychar t of {
  ')' -> YYAction (-157);
  ',' -> YYAction (-157);
  _ ->   case yytoken t of {
    VARID -> YYAction 472;
    CONID -> YYAction 473;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction340 t = YYAction (-151);
private yyaction341 t = YYAction (-154);
private yyaction342 t = YYAction (-155);
private yyaction343 t = YYAction (-156);
private yyaction344 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 333;
    QUALIFIER -> YYAction 334;
    PUBLIC -> YYAction 335;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction345 t = YYAction (-42);
private yyaction346 t = YYAction (-238);
private yyaction347 t =   case yychar t of {
  ';' -> YYAction (-237);
  '}' -> YYAction (-237);
  ')' -> YYAction (-237);
  ',' -> YYAction (-237);
  '|' -> YYAction (-237);
  ']' -> YYAction (-237);
  _ ->   case yytoken t of {
    ARROW -> YYAction 477;
    WHERE -> YYAction (-237);
    CLASS -> YYAction (-237);
    _ -> YYAction yyBrace;
  };
};
private yyaction348 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction349 t =   case yytoken t of {
    WHERE -> YYAction 479;
    _ -> YYAction yyErr;
  };
private yyaction350 t = YYAction (-207);
private yyaction351 t = YYAction (-205);
private yyaction352 t = YYAction (-206);
private yyaction353 t =   case yytoken t of {
    VARID -> YYAction 216;
    CONID -> YYAction 217;
    QUALIFIER -> YYAction 218;
    PACKAGE -> YYAction 219;
    STRCONST -> YYAction 220;
    _ -> YYAction yyErr;
  };
private yyaction354 t = YYAction (-10);
private yyaction355 t =   case yytoken t of {
    VARID -> YYAction 216;
    CONID -> YYAction 217;
    QUALIFIER -> YYAction 218;
    PACKAGE -> YYAction 219;
    STRCONST -> YYAction 220;
    _ -> YYAction yyErr;
  };
private yyaction356 t = YYAction (-290);
private yyaction357 t =   case yychar t of {
  ',' -> YYAction 483;
  ';' -> YYAction (-240);
  '}' -> YYAction (-240);
  ')' -> YYAction (-240);
  '|' -> YYAction (-240);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-240);
    _ -> YYAction yyBrace;
  };
};
private yyaction358 t =   case yychar t of {
  '}' -> YYAction 484;
  _ -> YYAction yyBrace;
};
private yyaction359 t = YYAction (-219);
private yyaction360 t =   case yychar t of {
  ';' -> YYAction (-224);
  '}' -> YYAction (-224);
  '|' -> YYAction (-224);
  _ ->   case yytoken t of {
    THROWS -> YYAction 485;
    _ -> YYAction yyBrace;
  };
};
private yyaction361 t =   case yychar t of {
  '|' -> YYAction 486;
  ';' -> YYAction (-225);
  '}' -> YYAction (-225);
  _ -> YYAction yyBrace;
};
private yyaction362 t = YYAction (-227);
private yyaction363 t =   case yytoken t of {
    EXTENDS -> YYAction 487;
    DCOLON -> YYAction 488;
    _ -> YYAction yyErr;
  };
private yyaction364 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction365 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
};
private yyaction366 t =   case yychar t of {
  '{' -> YYAction 491;
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  '?' -> YYAction 492;
  '!' -> YYAction 493;
  ';' -> YYAction (-312);
  '}' -> YYAction (-312);
  '|' -> YYAction (-312);
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    DOCUMENTATION -> YYAction (-312);
    WHERE -> YYAction (-312);
    _ -> YYAction yyBrace;
  };
};
private yyaction367 t =   case yychar t of {
  '?' -> YYAction 371;
  '!' -> YYAction 372;
  _ ->   case yytoken t of {
    CONID -> YYAction 366;
    PRIVATE -> YYAction 368;
    PROTECTED -> YYAction 369;
    PUBLIC -> YYAction 370;
    _ -> YYAction yyErr;
  };
};
private yyaction368 t =   case yychar t of {
  '?' -> YYAction 371;
  '!' -> YYAction 372;
  _ ->   case yytoken t of {
    CONID -> YYAction 366;
    _ -> YYAction yyErr;
  };
};
private yyaction369 t =   case yychar t of {
  '?' -> YYAction 371;
  '!' -> YYAction 372;
  _ ->   case yytoken t of {
    CONID -> YYAction 366;
    _ -> YYAction yyErr;
  };
};
private yyaction370 t =   case yychar t of {
  '?' -> YYAction 371;
  '!' -> YYAction 372;
  _ ->   case yytoken t of {
    CONID -> YYAction 366;
    _ -> YYAction yyErr;
  };
};
private yyaction371 t =   case yytoken t of {
    CONID -> YYAction 366;
    _ -> YYAction yyErr;
  };
private yyaction372 t =   case yytoken t of {
    CONID -> YYAction 366;
    _ -> YYAction yyErr;
  };
private yyaction373 t = YYAction (-295);
private yyaction374 t =   case yychar t of {
  ';' -> YYAction (-302);
  '}' -> YYAction (-302);
  '|' -> YYAction (-302);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 504;
    WHERE -> YYAction (-302);
    _ -> YYAction yyBrace;
  };
};
private yyaction375 t = YYAction (-305);
private yyaction376 t = YYAction (-311);
private yyaction377 t =   case yychar t of {
  '?' -> YYAction 371;
  '!' -> YYAction 372;
  _ ->   case yytoken t of {
    CONID -> YYAction 366;
    DOCUMENTATION -> YYAction 367;
    PRIVATE -> YYAction 368;
    PROTECTED -> YYAction 369;
    PUBLIC -> YYAction 370;
    _ -> YYAction yyErr;
  };
};
private yyaction378 t = YYAction (-299);
private yyaction379 t = YYAction (-286);
private yyaction380 t =   case yytoken t of {
    NATIVE -> YYAction 506;
    _ -> YYAction yyErr;
  };
private yyaction381 t =   case yytoken t of {
    VARID -> YYAction 216;
    CONID -> YYAction 217;
    QUALIFIER -> YYAction 218;
    PACKAGE -> YYAction 219;
    STRCONST -> YYAction 220;
    _ -> YYAction yyErr;
  };
private yyaction382 t = YYAction (-292);
private yyaction383 t =   case yychar t of {
  '|' -> YYAction 509;
  ';' -> YYAction (-300);
  '}' -> YYAction (-300);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-300);
    _ -> YYAction yyBrace;
  };
};
private yyaction384 t =   case yychar t of {
  '?' -> YYAction 371;
  '!' -> YYAction 372;
  _ ->   case yytoken t of {
    CONID -> YYAction 366;
    DOCUMENTATION -> YYAction 367;
    NATIVE -> YYAction 379;
    PRIVATE -> YYAction 368;
    PROTECTED -> YYAction 369;
    PUBLIC -> YYAction 370;
    PURE -> YYAction 380;
    _ -> YYAction yyErr;
  };
};
private yyaction385 t =   case yychar t of {
  ')' -> YYAction (-267);
  _ ->   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
};
private yyaction386 t = YYAction (-270);
private yyaction387 t =   case yychar t of {
  '(' -> YYAction 230;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    _ -> YYAction yyErr;
  };
};
private yyaction388 t =   case yychar t of {
  ')' -> YYAction (-275);
  _ ->   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
};
private yyaction389 t = YYAction (-278);
private yyaction390 t =   case yychar t of {
  '(' -> YYAction (-251);
  ')' -> YYAction (-251);
  ',' -> YYAction (-251);
  '|' -> YYAction (-251);
  '[' -> YYAction (-251);
  _ ->   case yytoken t of {
    EXTENDS -> YYAction 487;
    DCOLON -> YYAction 488;
    VARID -> YYAction (-251);
    CONID -> YYAction (-251);
    QUALIFIER -> YYAction (-251);
    ARROW -> YYAction (-251);
    _ -> YYAction yyErr;
  };
};
private yyaction391 t =   case yychar t of {
  ')' -> YYAction 515;
  _ -> YYAction yyErr;
};
private yyaction392 t = YYAction (-258);
private yyaction393 t =   case yychar t of {
  ')' -> YYAction 516;
  ',' -> YYAction 517;
  '|' -> YYAction 518;
  _ -> YYAction yyErr;
};
private yyaction394 t =   case yychar t of {
  ')' -> YYAction 519;
  _ -> YYAction yyErr;
};
private yyaction395 t = YYAction (-257);
private yyaction396 t =   case yychar t of {
  ']' -> YYAction 520;
  _ -> YYAction yyErr;
};
private yyaction397 t =   case yychar t of {
  ')' -> YYAction 392;
  ',' -> YYAction 162;
  _ ->   case yytoken t of {
    ARROW -> YYAction 391;
    _ -> YYAction yyErr;
  };
};
private yyaction398 t =   case yychar t of {
  ']' -> YYAction 395;
  _ -> YYAction yyErr;
};
private yyaction399 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
};
private yyaction400 t =   case yychar t of {
  '?' -> YYAction 371;
  '!' -> YYAction 372;
  _ ->   case yytoken t of {
    CONID -> YYAction 366;
    DOCUMENTATION -> YYAction 367;
    PRIVATE -> YYAction 368;
    PROTECTED -> YYAction 369;
    PUBLIC -> YYAction 370;
    _ -> YYAction yyErr;
  };
};
private yyaction401 t =   case yychar t of {
  '=' -> YYAction 522;
  _ -> YYAction yyErr;
};
private yyaction402 t = YYAction (-338);
private yyaction403 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction404 t = YYAction (-436);
private yyaction405 t = YYAction (-435);
private yyaction406 t = YYAction (-434);
private yyaction407 t = YYAction (-391);
private yyaction408 t =   case yychar t of {
  ';' -> YYAction 525;
  _ ->   case yytoken t of {
    ELSE -> YYAction 524;
    _ -> YYAction yyErr;
  };
};
private yyaction409 t = YYAction (-389);
private yyaction410 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction411 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  '}' -> YYAction (-138);
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyBrace;
  };
};
private yyaction412 t =   case yytoken t of {
    IN -> YYAction 532;
    _ -> YYAction yyErr;
  };
private yyaction413 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction414 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction415 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction416 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  '}' -> YYAction (-370);
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 267;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyBrace;
  };
};
private yyaction417 t = YYAction (-413);
private yyaction418 t = YYAction (-437);
private yyaction419 t =   case yychar t of {
  ';' -> YYAction 537;
  ')' -> YYAction (-464);
  _ -> YYAction yyErr;
};
private yyaction420 t =   case yychar t of {
  ')' -> YYAction 538;
  _ -> YYAction yyErr;
};
private yyaction421 t =   case yychar t of {
  ',' -> YYAction 284;
  ')' -> YYAction (-461);
  ']' -> YYAction (-461);
  _ ->   case yytoken t of {
    DOTDOT -> YYAction (-461);
    _ -> YYAction yyErr;
  };
};
private yyaction422 t =   case yychar t of {
  ')' -> YYAction 539;
  _ -> YYAction yyErr;
};
private yyaction423 t = YYAction (-439);
private yyaction424 t = YYAction (-438);
private yyaction425 t = YYAction (-462);
private yyaction426 t =   case yychar t of {
  ',' -> YYAction 540;
  ']' -> YYAction (-366);
  _ -> YYAction yyErr;
};
private yyaction427 t =   case yychar t of {
  ']' -> YYAction 541;
  _ -> YYAction yyErr;
};
private yyaction428 t = YYAction (-445);
private yyaction429 t =   case yychar t of {
  ']' -> YYAction 542;
  _ -> YYAction yyErr;
};
private yyaction430 t = YYAction (-388);
private yyaction431 t = YYAction (-343);
private yyaction432 t =   case yychar t of {
  '}' -> YYAction 543;
  _ -> YYAction yyBrace;
};
private yyaction433 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction434 t = YYAction (-431);
private yyaction435 t =   case yychar t of {
  '}' -> YYAction (-452);
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    _ -> YYAction yyBrace;
  };
};
private yyaction436 t =   case yychar t of {
  '.' -> YYAction 547;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 546;
    _ -> YYAction yyErr;
  };
};
private yyaction437 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
};
private yyaction438 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
};
private yyaction439 t = YYAction (-322);
private yyaction440 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    NATIVE -> YYAction 154;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction441 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    NATIVE -> YYAction 154;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction442 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    NATIVE -> YYAction 154;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction443 t = YYAction (-341);
private yyaction444 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  ';' -> YYAction (-132);
  '}' -> YYAction (-132);
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    DOCUMENTATION -> YYAction 26;
    NATIVE -> YYAction 154;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PRIVATE -> YYAction 440;
    PROTECTED -> YYAction 441;
    PUBLIC -> YYAction 442;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyBrace;
  };
};
private yyaction445 t = YYAction (-128);
private yyaction446 t =   case yychar t of {
  '}' -> YYAction 556;
  _ -> YYAction yyBrace;
};
private yyaction447 t =   case yychar t of {
  ';' -> YYAction 557;
  '}' -> YYAction (-122);
  _ -> YYAction yyBrace;
};
private yyaction448 t = YYAction (-134);
private yyaction449 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  '=' -> YYAction (-376);
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    ARROW -> YYAction (-376);
    _ -> YYAction yyErr;
  };
};
private yyaction450 t = YYAction (-361);
private yyaction451 t = YYAction (-362);
private yyaction452 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction453 t =   case yychar t of {
  '?' -> YYAction 561;
  '=' -> YYAction 562;
  '}' -> YYAction (-458);
  ',' -> YYAction (-458);
  _ ->   case yytoken t of {
    GETS -> YYAction 560;
    _ -> YYAction yyBrace;
  };
};
private yyaction454 t =   case yychar t of {
  '}' -> YYAction 563;
  _ -> YYAction yyBrace;
};
private yyaction455 t =   case yychar t of {
  ']' -> YYAction 564;
  _ -> YYAction yyErr;
};
private yyaction456 t =   case yychar t of {
  '-' -> YYAction 58;
  '}' -> YYAction 565;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyBrace;
  };
};
private yyaction457 t =   case yychar t of {
  '}' -> YYAction 567;
  _ -> YYAction yyBrace;
};
private yyaction458 t =   case yychar t of {
  '-' -> YYAction 58;
  '}' -> YYAction 568;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyBrace;
  };
};
private yyaction459 t = YYAction (-420);
private yyaction460 t =   case yychar t of {
  '}' -> YYAction (-455);
  _ ->   case yytoken t of {
    VARID -> YYAction 570;
    _ -> YYAction yyBrace;
  };
};
private yyaction461 t = YYAction (-2);
private yyaction462 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    _ -> YYAction yyErr;
  };
};
private yyaction463 t = YYAction (-188);
private yyaction464 t = YYAction (-22);
private yyaction465 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    QUALIFIER -> YYAction 325;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction466 t = YYAction (-141);
private yyaction467 t =   case yychar t of {
  ')' -> YYAction 575;
  _ ->   case yytoken t of {
    VARID -> YYAction 472;
    CONID -> YYAction 473;
    PUBLIC -> YYAction 574;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction468 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    CONID -> YYAction 203;
    _ -> YYAction yyErr;
  };
};
private yyaction469 t = YYAction (-159);
private yyaction470 t = YYAction (-146);
private yyaction471 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  ')' -> YYAction (-149);
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 333;
    QUALIFIER -> YYAction 334;
    PUBLIC -> YYAction 335;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction472 t = YYAction (-166);
private yyaction473 t = YYAction (-167);
private yyaction474 t = YYAction (-168);
private yyaction475 t = YYAction (-158);
private yyaction476 t =   case yychar t of {
  ')' -> YYAction 580;
  _ -> YYAction yyErr;
};
private yyaction477 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction478 t = YYAction (-44);
private yyaction479 t =   case yychar t of {
  '{' -> YYAction 582;
  _ -> YYAction yyErr;
};
private yyaction480 t = YYAction (-40);
private yyaction481 t = YYAction (-8);
private yyaction482 t = YYAction (-9);
private yyaction483 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction484 t = YYAction (-289);
private yyaction485 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction486 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction487 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction488 t =   case yychar t of {
  '(' -> YYAction 588;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 587;
    _ -> YYAction yyErr;
  };
};
private yyaction489 t =   case yychar t of {
  ')' -> YYAction 591;
  _ -> YYAction yyErr;
};
private yyaction490 t =   case yychar t of {
  ')' -> YYAction 592;
  _ -> YYAction yyErr;
};
private yyaction491 t =   case yychar t of {
  '?' -> YYAction (-18);
  '!' -> YYAction (-18);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    VARID -> YYAction (-18);
    PRIVATE -> YYAction (-18);
    PUBLIC -> YYAction (-18);
    _ -> YYAction yyErr;
  };
};
private yyaction492 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
};
private yyaction493 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
};
private yyaction494 t = YYAction (-320);
private yyaction495 t = YYAction (-314);
private yyaction496 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  '?' -> YYAction 492;
  '!' -> YYAction 493;
  ';' -> YYAction (-315);
  '}' -> YYAction (-315);
  '|' -> YYAction (-315);
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    DOCUMENTATION -> YYAction (-315);
    WHERE -> YYAction (-315);
    _ -> YYAction yyBrace;
  };
};
private yyaction497 t = YYAction (-317);
private yyaction498 t = YYAction (-304);
private yyaction499 t = YYAction (-307);
private yyaction500 t = YYAction (-308);
private yyaction501 t = YYAction (-306);
private yyaction502 t = YYAction (-310);
private yyaction503 t = YYAction (-309);
private yyaction504 t = YYAction (-303);
private yyaction505 t = YYAction (-294);
private yyaction506 t = YYAction (-285);
private yyaction507 t =   case yychar t of {
  '{' -> YYAction 221;
  ';' -> YYAction (-287);
  '}' -> YYAction (-287);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-287);
    _ -> YYAction yyBrace;
  };
};
private yyaction508 t = YYAction (-296);
private yyaction509 t =   case yychar t of {
  '?' -> YYAction 371;
  '!' -> YYAction 372;
  _ ->   case yytoken t of {
    CONID -> YYAction 366;
    DOCUMENTATION -> YYAction 367;
    PRIVATE -> YYAction 368;
    PROTECTED -> YYAction 369;
    PUBLIC -> YYAction 370;
    _ -> YYAction yyErr;
  };
};
private yyaction510 t =   case yytoken t of {
    VARID -> YYAction 216;
    CONID -> YYAction 217;
    QUALIFIER -> YYAction 218;
    PACKAGE -> YYAction 219;
    STRCONST -> YYAction 220;
    _ -> YYAction yyErr;
  };
private yyaction511 t = YYAction (-291);
private yyaction512 t = YYAction (-268);
private yyaction513 t =   case yychar t of {
  ';' -> YYAction (-340);
  '}' -> YYAction (-340);
  _ ->   case yytoken t of {
    WHERE -> YYAction 186;
    _ -> YYAction yyBrace;
  };
};
private yyaction514 t = YYAction (-276);
private yyaction515 t = YYAction (-260);
private yyaction516 t = YYAction (-247);
private yyaction517 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction518 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction519 t = YYAction (-259);
private yyaction520 t = YYAction (-250);
private yyaction521 t = YYAction (-279);
private yyaction522 t =   case yychar t of {
  '?' -> YYAction 371;
  '!' -> YYAction 372;
  _ ->   case yytoken t of {
    CONID -> YYAction 366;
    DOCUMENTATION -> YYAction 367;
    PRIVATE -> YYAction 368;
    PROTECTED -> YYAction 369;
    PUBLIC -> YYAction 370;
    _ -> YYAction yyErr;
  };
};
private yyaction523 t = YYAction (-339);
private yyaction524 t = YYAction (-394);
private yyaction525 t =   case yytoken t of {
    ELSE -> YYAction 606;
    _ -> YYAction yyErr;
  };
private yyaction526 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction527 t = YYAction (-360);
private yyaction528 t =   case yychar t of {
  '|' -> YYAction 189;
  '=' -> YYAction 451;
  _ ->   case yytoken t of {
    ARROW -> YYAction 450;
    _ -> YYAction yyErr;
  };
};
private yyaction529 t =   case yychar t of {
  ';' -> YYAction 610;
  '}' -> YYAction (-383);
  _ ->   case yytoken t of {
    WHERE -> YYAction 175;
    _ -> YYAction yyBrace;
  };
};
private yyaction530 t =   case yychar t of {
  '}' -> YYAction 612;
  _ -> YYAction yyBrace;
};
private yyaction531 t = YYAction (-139);
private yyaction532 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction533 t =   case yychar t of {
  '}' -> YYAction 614;
  _ -> YYAction yyBrace;
};
private yyaction534 t = YYAction (-373);
private yyaction535 t = YYAction (-364);
private yyaction536 t = YYAction (-371);
private yyaction537 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  ')' -> YYAction (-466);
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction538 t = YYAction (-441);
private yyaction539 t = YYAction (-440);
private yyaction540 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  ']' -> YYAction (-368);
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 267;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction541 t = YYAction (-447);
private yyaction542 t = YYAction (-446);
private yyaction543 t = YYAction (-344);
private yyaction544 t = YYAction (-459);
private yyaction545 t = YYAction (-451);
private yyaction546 t = YYAction (-232);
private yyaction547 t = YYAction (-231);
private yyaction548 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> YYAction yyErr;
  };
};
private yyaction549 t =   case yychar t of {
  '-' -> YYAction (-235);
  ';' -> YYAction (-235);
  '}' -> YYAction (-235);
  ')' -> YYAction (-235);
  ',' -> YYAction (-235);
  '|' -> YYAction (-235);
  ']' -> YYAction (-235);
  '=' -> YYAction (-235);
  _ ->   case yytoken t of {
    ARROW -> YYAction 437;
    DOCUMENTATION -> YYAction (-235);
    WHERE -> YYAction (-235);
    CLASS -> YYAction (-235);
    THEN -> YYAction (-235);
    ELSE -> YYAction (-235);
    OF -> YYAction (-235);
    THROWS -> YYAction (-235);
    DCOLON -> YYAction (-235);
    GETS -> YYAction (-235);
    DOTDOT -> YYAction (-235);
    SOMEOP -> YYAction (-235);
    _ -> YYAction yyBrace;
  };
};
private yyaction550 t = YYAction (-236);
private yyaction551 t = YYAction (-233);
private yyaction552 t = YYAction (-129);
private yyaction553 t = YYAction (-130);
private yyaction554 t = YYAction (-131);
private yyaction555 t = YYAction (-133);
private yyaction556 t = YYAction (-342);
private yyaction557 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  '}' -> YYAction (-123);
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    DOCUMENTATION -> YYAction 26;
    NATIVE -> YYAction 154;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PRIVATE -> YYAction 440;
    PROTECTED -> YYAction 441;
    PUBLIC -> YYAction 442;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyBrace;
  };
};
private yyaction558 t = YYAction (-375);
private yyaction559 t = YYAction (-377);
private yyaction560 t =   case yychar t of {
  '-' -> YYAction 58;
  '}' -> YYAction 619;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyBrace;
  };
};
private yyaction561 t =   case yychar t of {
  '}' -> YYAction 620;
  _ -> YYAction yyBrace;
};
private yyaction562 t =   case yychar t of {
  '-' -> YYAction 58;
  '}' -> YYAction 621;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyBrace;
  };
};
private yyaction563 t = YYAction (-424);
private yyaction564 t = YYAction (-425);
private yyaction565 t = YYAction (-419);
private yyaction566 t = YYAction (-456);
private yyaction567 t = YYAction (-417);
private yyaction568 t = YYAction (-418);
private yyaction569 t = YYAction (-457);
private yyaction570 t =   case yychar t of {
  '=' -> YYAction 623;
  '}' -> YYAction (-458);
  ',' -> YYAction (-458);
  _ ->   case yytoken t of {
    GETS -> YYAction 622;
    _ -> YYAction yyBrace;
  };
};
private yyaction571 t = YYAction (-454);
private yyaction572 t = YYAction (-187);
private yyaction573 t = YYAction (-178);
private yyaction574 t =   case yytoken t of {
    VARID -> YYAction 472;
    CONID -> YYAction 473;
    PUBLIC -> YYAction 574;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
private yyaction575 t = YYAction (-153);
private yyaction576 t =   case yychar t of {
  ')' -> YYAction 625;
  _ -> YYAction yyErr;
};
private yyaction577 t =   case yychar t of {
  ')' -> YYAction (-160);
  ',' -> YYAction (-160);
  _ ->   case yytoken t of {
    VARID -> YYAction 472;
    CONID -> YYAction 473;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction578 t =   case yychar t of {
  ',' -> YYAction 627;
  ')' -> YYAction (-163);
  _ -> YYAction yyErr;
};
private yyaction579 t = YYAction (-150);
private yyaction580 t = YYAction (-144);
private yyaction581 t = YYAction (-239);
private yyaction582 t =   case yychar t of {
  '-' -> YYAction 676;
  ';' -> YYAction 677;
  '{' -> YYAction 678;
  '}' -> YYAction 679;
  '.' -> YYAction 680;
  '(' -> YYAction 681;
  ')' -> YYAction 682;
  ',' -> YYAction 683;
  '|' -> YYAction 684;
  '[' -> YYAction 685;
  ']' -> YYAction 686;
  '?' -> YYAction 687;
  '!' -> YYAction 688;
  '=' -> YYAction 689;
  '\\' -> YYAction 690;
  _ ->   case yytoken t of {
    VARID -> YYAction 628;
    CONID -> YYAction 629;
    QUALIFIER -> YYAction 630;
    DOCUMENTATION -> YYAction 631;
    EXTENDS -> YYAction 632;
    SUPER -> YYAction 633;
    PACKAGE -> YYAction 634;
    IMPORT -> YYAction 635;
    INFIX -> YYAction 636;
    INFIXR -> YYAction 637;
    INFIXL -> YYAction 638;
    NATIVE -> YYAction 639;
    DATA -> YYAction 640;
    WHERE -> YYAction 641;
    CLASS -> YYAction 642;
    INSTANCE -> YYAction 643;
    ABSTRACT -> YYAction 644;
    TYPE -> YYAction 645;
    TRUE -> YYAction 646;
    FALSE -> YYAction 647;
    IF -> YYAction 648;
    THEN -> YYAction 649;
    ELSE -> YYAction 650;
    CASE -> YYAction 651;
    OF -> YYAction 652;
    DERIVE -> YYAction 653;
    LET -> YYAction 654;
    IN -> YYAction 655;
    DO -> YYAction 656;
    FORALL -> YYAction 657;
    PRIVATE -> YYAction 658;
    PROTECTED -> YYAction 659;
    PUBLIC -> YYAction 660;
    PURE -> YYAction 661;
    THROWS -> YYAction 662;
    MUTABLE -> YYAction 663;
    INTCONST -> YYAction 664;
    STRCONST -> YYAction 665;
    LONGCONST -> YYAction 666;
    FLTCONST -> YYAction 667;
    DBLCONST -> YYAction 668;
    CHRCONST -> YYAction 669;
    ARROW -> YYAction 670;
    DCOLON -> YYAction 671;
    GETS -> YYAction 672;
    EARROW -> YYAction 673;
    DOTDOT -> YYAction 674;
    SOMEOP -> YYAction 675;
    _ -> YYAction yyBrace;
  };
};
private yyaction583 t = YYAction (-241);
private yyaction584 t = YYAction (-223);
private yyaction585 t = YYAction (-226);
private yyaction586 t =   case yychar t of {
  ')' -> YYAction 693;
  _ -> YYAction yyErr;
};
private yyaction587 t = YYAction (-263);
private yyaction588 t =   case yychar t of {
  '(' -> YYAction 588;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 587;
    _ -> YYAction yyErr;
  };
};
private yyaction589 t =   case yychar t of {
  ')' -> YYAction 695;
  _ -> YYAction yyErr;
};
private yyaction590 t =   case yychar t of {
  ')' -> YYAction (-262);
  _ ->   case yytoken t of {
    ARROW -> YYAction 696;
    _ -> YYAction yyErr;
  };
};
private yyaction591 t = YYAction (-254);
private yyaction592 t = YYAction (-255);
private yyaction593 t =   case yychar t of {
  '?' -> YYAction 699;
  '!' -> YYAction 700;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    PRIVATE -> YYAction 697;
    PUBLIC -> YYAction 698;
    _ -> YYAction yyErr;
  };
};
private yyaction594 t =   case yychar t of {
  '}' -> YYAction 706;
  _ -> YYAction yyBrace;
};
private yyaction595 t =   case yychar t of {
  ',' -> YYAction 708;
  '}' -> YYAction (-323);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 707;
    _ -> YYAction yyBrace;
  };
};
private yyaction596 t = YYAction (-319);
private yyaction597 t = YYAction (-318);
private yyaction598 t = YYAction (-316);
private yyaction599 t = YYAction (-288);
private yyaction600 t = YYAction (-301);
private yyaction601 t = YYAction (-297);
private yyaction602 t = YYAction (-271);
private yyaction603 t =   case yychar t of {
  ')' -> YYAction 709;
  _ -> YYAction yyErr;
};
private yyaction604 t =   case yychar t of {
  '|' -> YYAction 710;
  ')' -> YYAction (-242);
  _ -> YYAction yyErr;
};
private yyaction605 t =   case yychar t of {
  ')' -> YYAction 711;
  _ -> YYAction yyErr;
};
private yyaction606 t = YYAction (-393);
private yyaction607 t = YYAction (-399);
private yyaction608 t = YYAction (-381);
private yyaction609 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction610 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  '}' -> YYAction (-385);
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyBrace;
  };
};
private yyaction611 t = YYAction (-382);
private yyaction612 t = YYAction (-400);
private yyaction613 t = YYAction (-401);
private yyaction614 t =   case yychar t of {
  ';' -> YYAction (-365);
  '}' -> YYAction (-365);
  ',' -> YYAction (-365);
  ']' -> YYAction (-365);
  _ ->   case yytoken t of {
    IN -> YYAction 532;
    _ -> YYAction yyBrace;
  };
};
private yyaction615 t = YYAction (-465);
private yyaction616 t = YYAction (-367);
private yyaction617 t = YYAction (-230);
private yyaction618 t = YYAction (-124);
private yyaction619 t = YYAction (-423);
private yyaction620 t = YYAction (-421);
private yyaction621 t = YYAction (-422);
private yyaction622 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction623 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 147;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 146;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    DECCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> YYAction yyErr;
  };
};
private yyaction624 t = YYAction (-162);
private yyaction625 t = YYAction (-152);
private yyaction626 t = YYAction (-161);
private yyaction627 t =   case yychar t of {
  ')' -> YYAction (-164);
  _ ->   case yytoken t of {
    VARID -> YYAction 472;
    CONID -> YYAction 473;
    PUBLIC -> YYAction 574;
    SOMEOP -> YYAction 123;
    _ -> YYAction yyErr;
  };
};
private yyaction628 t = YYAction (-47);
private yyaction629 t = YYAction (-48);
private yyaction630 t = YYAction (-49);
private yyaction631 t = YYAction (-52);
private yyaction632 t = YYAction (-50);
private yyaction633 t = YYAction (-51);
private yyaction634 t = YYAction (-53);
private yyaction635 t = YYAction (-54);
private yyaction636 t = YYAction (-55);
private yyaction637 t = YYAction (-56);
private yyaction638 t = YYAction (-57);
private yyaction639 t = YYAction (-58);
private yyaction640 t = YYAction (-59);
private yyaction641 t = YYAction (-60);
private yyaction642 t = YYAction (-61);
private yyaction643 t = YYAction (-62);
private yyaction644 t = YYAction (-63);
private yyaction645 t = YYAction (-64);
private yyaction646 t = YYAction (-65);
private yyaction647 t = YYAction (-66);
private yyaction648 t = YYAction (-67);
private yyaction649 t = YYAction (-68);
private yyaction650 t = YYAction (-69);
private yyaction651 t = YYAction (-70);
private yyaction652 t = YYAction (-71);
private yyaction653 t = YYAction (-72);
private yyaction654 t = YYAction (-73);
private yyaction655 t = YYAction (-74);
private yyaction656 t = YYAction (-75);
private yyaction657 t = YYAction (-76);
private yyaction658 t = YYAction (-77);
private yyaction659 t = YYAction (-78);
private yyaction660 t = YYAction (-79);
private yyaction661 t = YYAction (-80);
private yyaction662 t = YYAction (-81);
private yyaction663 t = YYAction (-82);
private yyaction664 t = YYAction (-83);
private yyaction665 t = YYAction (-84);
private yyaction666 t = YYAction (-85);
private yyaction667 t = YYAction (-86);
private yyaction668 t = YYAction (-87);
private yyaction669 t = YYAction (-88);
private yyaction670 t = YYAction (-89);
private yyaction671 t = YYAction (-90);
private yyaction672 t = YYAction (-91);
private yyaction673 t = YYAction (-92);
private yyaction674 t = YYAction (-93);
private yyaction675 t = YYAction (-94);
private yyaction676 t = YYAction (-103);
private yyaction677 t = YYAction (-104);
private yyaction678 t =   case yychar t of {
  '-' -> YYAction 676;
  ';' -> YYAction 677;
  '{' -> YYAction 678;
  '}' -> YYAction 715;
  '.' -> YYAction 680;
  '(' -> YYAction 681;
  ')' -> YYAction 682;
  ',' -> YYAction 683;
  '|' -> YYAction 684;
  '[' -> YYAction 685;
  ']' -> YYAction 686;
  '?' -> YYAction 687;
  '!' -> YYAction 688;
  '=' -> YYAction 689;
  '\\' -> YYAction 690;
  _ ->   case yytoken t of {
    VARID -> YYAction 628;
    CONID -> YYAction 629;
    QUALIFIER -> YYAction 630;
    DOCUMENTATION -> YYAction 631;
    EXTENDS -> YYAction 632;
    SUPER -> YYAction 633;
    PACKAGE -> YYAction 634;
    IMPORT -> YYAction 635;
    INFIX -> YYAction 636;
    INFIXR -> YYAction 637;
    INFIXL -> YYAction 638;
    NATIVE -> YYAction 639;
    DATA -> YYAction 640;
    WHERE -> YYAction 641;
    CLASS -> YYAction 642;
    INSTANCE -> YYAction 643;
    ABSTRACT -> YYAction 644;
    TYPE -> YYAction 645;
    TRUE -> YYAction 646;
    FALSE -> YYAction 647;
    IF -> YYAction 648;
    THEN -> YYAction 649;
    ELSE -> YYAction 650;
    CASE -> YYAction 651;
    OF -> YYAction 652;
    DERIVE -> YYAction 653;
    LET -> YYAction 654;
    IN -> YYAction 655;
    DO -> YYAction 656;
    FORALL -> YYAction 657;
    PRIVATE -> YYAction 658;
    PROTECTED -> YYAction 659;
    PUBLIC -> YYAction 660;
    PURE -> YYAction 661;
    THROWS -> YYAction 662;
    MUTABLE -> YYAction 663;
    INTCONST -> YYAction 664;
    STRCONST -> YYAction 665;
    LONGCONST -> YYAction 666;
    FLTCONST -> YYAction 667;
    DBLCONST -> YYAction 668;
    CHRCONST -> YYAction 669;
    ARROW -> YYAction 670;
    DCOLON -> YYAction 671;
    GETS -> YYAction 672;
    EARROW -> YYAction 673;
    DOTDOT -> YYAction 674;
    SOMEOP -> YYAction 675;
    _ -> YYAction yyBrace;
  };
};
private yyaction679 t = YYAction (-46);
private yyaction680 t = YYAction (-101);
private yyaction681 t = YYAction (-99);
private yyaction682 t = YYAction (-100);
private yyaction683 t = YYAction (-95);
private yyaction684 t = YYAction (-96);
private yyaction685 t = YYAction (-97);
private yyaction686 t = YYAction (-98);
private yyaction687 t = YYAction (-102);
private yyaction688 t = YYAction (-105);
private yyaction689 t = YYAction (-106);
private yyaction690 t = YYAction (-107);
private yyaction691 t =   case yychar t of {
  '}' -> YYAction 717;
  _ -> YYAction yyBrace;
};
private yyaction692 t =   case yychar t of {
  '-' -> YYAction 676;
  ';' -> YYAction 677;
  '{' -> YYAction 678;
  '.' -> YYAction 680;
  '(' -> YYAction 681;
  ')' -> YYAction 682;
  ',' -> YYAction 683;
  '|' -> YYAction 684;
  '[' -> YYAction 685;
  ']' -> YYAction 686;
  '?' -> YYAction 687;
  '!' -> YYAction 688;
  '=' -> YYAction 689;
  '\\' -> YYAction 690;
  '}' -> YYAction (-108);
  _ ->   case yytoken t of {
    VARID -> YYAction 628;
    CONID -> YYAction 629;
    QUALIFIER -> YYAction 630;
    DOCUMENTATION -> YYAction 631;
    EXTENDS -> YYAction 632;
    SUPER -> YYAction 633;
    PACKAGE -> YYAction 634;
    IMPORT -> YYAction 635;
    INFIX -> YYAction 636;
    INFIXR -> YYAction 637;
    INFIXL -> YYAction 638;
    NATIVE -> YYAction 639;
    DATA -> YYAction 640;
    WHERE -> YYAction 641;
    CLASS -> YYAction 642;
    INSTANCE -> YYAction 643;
    ABSTRACT -> YYAction 644;
    TYPE -> YYAction 645;
    TRUE -> YYAction 646;
    FALSE -> YYAction 647;
    IF -> YYAction 648;
    THEN -> YYAction 649;
    ELSE -> YYAction 650;
    CASE -> YYAction 651;
    OF -> YYAction 652;
    DERIVE -> YYAction 653;
    LET -> YYAction 654;
    IN -> YYAction 655;
    DO -> YYAction 656;
    FORALL -> YYAction 657;
    PRIVATE -> YYAction 658;
    PROTECTED -> YYAction 659;
    PUBLIC -> YYAction 660;
    PURE -> YYAction 661;
    THROWS -> YYAction 662;
    MUTABLE -> YYAction 663;
    INTCONST -> YYAction 664;
    STRCONST -> YYAction 665;
    LONGCONST -> YYAction 666;
    FLTCONST -> YYAction 667;
    DBLCONST -> YYAction 668;
    CHRCONST -> YYAction 669;
    ARROW -> YYAction 670;
    DCOLON -> YYAction 671;
    GETS -> YYAction 672;
    EARROW -> YYAction 673;
    DOTDOT -> YYAction 674;
    SOMEOP -> YYAction 675;
    _ -> YYAction yyBrace;
  };
};
private yyaction693 t = YYAction (-253);
private yyaction694 t =   case yychar t of {
  ')' -> YYAction 719;
  _ -> YYAction yyErr;
};
private yyaction695 t = YYAction (-252);
private yyaction696 t =   case yychar t of {
  '(' -> YYAction 588;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 587;
    _ -> YYAction yyErr;
  };
};
private yyaction697 t =   case yychar t of {
  '?' -> YYAction 699;
  '!' -> YYAction 700;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    _ -> YYAction yyErr;
  };
};
private yyaction698 t =   case yychar t of {
  '?' -> YYAction 699;
  '!' -> YYAction 700;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    _ -> YYAction yyErr;
  };
};
private yyaction699 t =   case yytoken t of {
    VARID -> YYAction 121;
    _ -> YYAction yyErr;
  };
private yyaction700 t =   case yytoken t of {
    VARID -> YYAction 121;
    _ -> YYAction yyErr;
  };
private yyaction701 t = YYAction (-337);
private yyaction702 t =   case yytoken t of {
    DCOLON -> YYAction 725;
    _ -> YYAction yyErr;
  };
private yyaction703 t =   case yychar t of {
  ',' -> YYAction 726;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-329);
    _ -> YYAction yyErr;
  };
};
private yyaction704 t = YYAction (-331);
private yyaction705 t = YYAction (-334);
private yyaction706 t = YYAction (-313);
private yyaction707 t =   case yychar t of {
  '}' -> YYAction (-325);
  '?' -> YYAction (-18);
  '!' -> YYAction (-18);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    VARID -> YYAction (-18);
    PRIVATE -> YYAction (-18);
    PUBLIC -> YYAction (-18);
    _ -> YYAction yyBrace;
  };
};
private yyaction708 t =   case yychar t of {
  '}' -> YYAction (-324);
  '?' -> YYAction (-18);
  '!' -> YYAction (-18);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    VARID -> YYAction (-18);
    PRIVATE -> YYAction (-18);
    PUBLIC -> YYAction (-18);
    _ -> YYAction yyBrace;
  };
};
private yyaction709 t = YYAction (-248);
private yyaction710 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction711 t = YYAction (-249);
private yyaction712 t = YYAction (-380);
private yyaction713 t = YYAction (-384);
private yyaction714 t = YYAction (-165);
private yyaction715 t =   case yychar t of {
  '-' -> YYAction 676;
  ';' -> YYAction 677;
  '{' -> YYAction 678;
  '.' -> YYAction 680;
  '(' -> YYAction 681;
  ')' -> YYAction 682;
  ',' -> YYAction 683;
  '|' -> YYAction 684;
  '[' -> YYAction 685;
  ']' -> YYAction 686;
  '?' -> YYAction 687;
  '!' -> YYAction 688;
  '=' -> YYAction 689;
  '\\' -> YYAction 690;
  '}' -> YYAction (-112);
  _ ->   case yytoken t of {
    VARID -> YYAction 628;
    CONID -> YYAction 629;
    QUALIFIER -> YYAction 630;
    DOCUMENTATION -> YYAction 631;
    EXTENDS -> YYAction 632;
    SUPER -> YYAction 633;
    PACKAGE -> YYAction 634;
    IMPORT -> YYAction 635;
    INFIX -> YYAction 636;
    INFIXR -> YYAction 637;
    INFIXL -> YYAction 638;
    NATIVE -> YYAction 639;
    DATA -> YYAction 640;
    WHERE -> YYAction 641;
    CLASS -> YYAction 642;
    INSTANCE -> YYAction 643;
    ABSTRACT -> YYAction 644;
    TYPE -> YYAction 645;
    TRUE -> YYAction 646;
    FALSE -> YYAction 647;
    IF -> YYAction 648;
    THEN -> YYAction 649;
    ELSE -> YYAction 650;
    CASE -> YYAction 651;
    OF -> YYAction 652;
    DERIVE -> YYAction 653;
    LET -> YYAction 654;
    IN -> YYAction 655;
    DO -> YYAction 656;
    FORALL -> YYAction 657;
    PRIVATE -> YYAction 658;
    PROTECTED -> YYAction 659;
    PUBLIC -> YYAction 660;
    PURE -> YYAction 661;
    THROWS -> YYAction 662;
    MUTABLE -> YYAction 663;
    INTCONST -> YYAction 664;
    STRCONST -> YYAction 665;
    LONGCONST -> YYAction 666;
    FLTCONST -> YYAction 667;
    DBLCONST -> YYAction 668;
    CHRCONST -> YYAction 669;
    ARROW -> YYAction 670;
    DCOLON -> YYAction 671;
    GETS -> YYAction 672;
    EARROW -> YYAction 673;
    DOTDOT -> YYAction 674;
    SOMEOP -> YYAction 675;
    _ -> YYAction yyBrace;
  };
};
private yyaction716 t =   case yychar t of {
  '}' -> YYAction 731;
  _ -> YYAction yyBrace;
};
private yyaction717 t = YYAction (-45);
private yyaction718 t = YYAction (-109);
private yyaction719 t = YYAction (-264);
private yyaction720 t = YYAction (-261);
private yyaction721 t = YYAction (-333);
private yyaction722 t = YYAction (-332);
private yyaction723 t = YYAction (-336);
private yyaction724 t = YYAction (-335);
private yyaction725 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 299;
    _ -> YYAction yyErr;
  };
};
private yyaction726 t =   case yychar t of {
  '?' -> YYAction 699;
  '!' -> YYAction 700;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    PRIVATE -> YYAction 697;
    PUBLIC -> YYAction 698;
    _ -> YYAction yyErr;
  };
};
private yyaction727 t = YYAction (-327);
private yyaction728 t = YYAction (-326);
private yyaction729 t = YYAction (-243);
private yyaction730 t = YYAction (-113);
private yyaction731 t =   case yychar t of {
  '-' -> YYAction 676;
  ';' -> YYAction 677;
  '{' -> YYAction 678;
  '.' -> YYAction 680;
  '(' -> YYAction 681;
  ')' -> YYAction 682;
  ',' -> YYAction 683;
  '|' -> YYAction 684;
  '[' -> YYAction 685;
  ']' -> YYAction 686;
  '?' -> YYAction 687;
  '!' -> YYAction 688;
  '=' -> YYAction 689;
  '\\' -> YYAction 690;
  '}' -> YYAction (-110);
  _ ->   case yytoken t of {
    VARID -> YYAction 628;
    CONID -> YYAction 629;
    QUALIFIER -> YYAction 630;
    DOCUMENTATION -> YYAction 631;
    EXTENDS -> YYAction 632;
    SUPER -> YYAction 633;
    PACKAGE -> YYAction 634;
    IMPORT -> YYAction 635;
    INFIX -> YYAction 636;
    INFIXR -> YYAction 637;
    INFIXL -> YYAction 638;
    NATIVE -> YYAction 639;
    DATA -> YYAction 640;
    WHERE -> YYAction 641;
    CLASS -> YYAction 642;
    INSTANCE -> YYAction 643;
    ABSTRACT -> YYAction 644;
    TYPE -> YYAction 645;
    TRUE -> YYAction 646;
    FALSE -> YYAction 647;
    IF -> YYAction 648;
    THEN -> YYAction 649;
    ELSE -> YYAction 650;
    CASE -> YYAction 651;
    OF -> YYAction 652;
    DERIVE -> YYAction 653;
    LET -> YYAction 654;
    IN -> YYAction 655;
    DO -> YYAction 656;
    FORALL -> YYAction 657;
    PRIVATE -> YYAction 658;
    PROTECTED -> YYAction 659;
    PUBLIC -> YYAction 660;
    PURE -> YYAction 661;
    THROWS -> YYAction 662;
    MUTABLE -> YYAction 663;
    INTCONST -> YYAction 664;
    STRCONST -> YYAction 665;
    LONGCONST -> YYAction 666;
    FLTCONST -> YYAction 667;
    DBLCONST -> YYAction 668;
    CHRCONST -> YYAction 669;
    ARROW -> YYAction 670;
    DCOLON -> YYAction 671;
    GETS -> YYAction 672;
    EARROW -> YYAction 673;
    DOTDOT -> YYAction 674;
    SOMEOP -> YYAction 675;
    _ -> YYAction yyBrace;
  };
};
private yyaction732 t = YYAction (-328);
private yyaction733 t = YYAction (-330);
private yyaction734 t = YYAction (-111);
private reduce1 =  \d\(a,p)\w\b     -> do {
                                                        changeST Global.{sub <- SubSt.{
                                                            thisPos = p}};
                                                        YYM.pure $ Program.Module (a,b,d) }
;
private reduce2 =  \d\(a,p)\w\_\b\_ -> do {
                                                        changeST Global.{sub <- SubSt.{
                                                            thisPos = p}};
                                                        YYM.pure $ Program.Module (a,b,d) }
;
private reduce3 =  \d\p\b\_ -> do {
                                                        changeST Global.{sub <- SubSt.{
                                                            thisPos = yyline p}};
                                                        YYM.pure $ Program.Module ("Main", b, d); }
;
private reduce4 =  \r -> do { g <- getST; pure (substRuntime g r) }
;
private reduce5 =  \t -> Token.value t 
;
private reduce6 =  \t -> Token.value t 
;
private reduce7 =  \t -> Token.value t 
;
private reduce8 =  \a\_\c -> Token.value a ++ "." ++ c 
;
private reduce9 =  \a\_\c -> Token.value a ++ "." ++ c 
;
private reduce10 =  \a\c   -> Token.value a ++ "." ++ c 
;
private reduce11 =  \x -> let s = Token.value x; i = length s - 1 in substr s 1 i 
;
private reduce12 =  \t     -> do {
                                                changeST Global.{sub <- SubSt.{
                                                    idKind <- insert (KeyTk t) (Left())}};
                                                YYM.pure (Token.value t, yyline t) }
;
private reduce13 =  \a\_\(c,p) -> (repljavakws (Token.value a) ++ "." ++ c,
                                                 (yyline a).merge p) 
;
private reduce14 =  \a\(c,p)   -> (Token.value a ++ "." ++ c,
                                                 (yyline a).merge p) 
;
private reduce15 =  \(nm, pos) -> (magicPack nm, pos) 
;
private reduce16 =  Token.value 
;
private reduce17 =  \b\a   -> (Token.value b ++ "\n" ++ a) 
;
private reduce18 =  Nothing 
;
private reduce19 =  Just 
;
private reduce20 =  \p\b        -> (fst b, snd b) 
;
private reduce21 =  \p\_\b   -> do {
                                                    g <- getST;
                                                    changeST Global.{options = g.options.{
                                                        flags = setFlag g.options.flags INPRELUDE}};
                                                    YYM.pure (fst b, snd b) }
;
private reduce22 =  \p\vs\v\qs\_ -> do {
                                                     g <- getST;
                                                     let {clause = unwords vs};
                                                     let {expected = ["inline" , "inline candidates"]};
                                                     when (clause `notElem` expected) do {
                                                        yyerror (yyline v) (show (head expected) ++ " expected instead of " ++ show clause)
                                                     };
                                                     changeST Global.{sub <- SubSt.{
                                                            toExport = qs}};
                                                     YYM.pure p;}
                                                 
;
private reduce23 =  Token.value 
;
private reduce24 =  single 
;
private reduce25 =  (:) 
;
private reduce27 =  const 
;
private reduce28 =  \a\_\b -> a ++ b 
;
private reduce29 =  single . DefinitionS.Doc 
;
private reduce32 =  \_\ds -> map (updVis Private) ds 
;
private reduce33 =  \_\ds -> map (updVis Protected) ds 
;
private reduce34 =  \_\ds -> map (updVis Public) ds 
;
private reduce35 =  \_\(d::DatDcl) -> [DefinitionS.Dat $ d.{ctrs <- map updCtr}] 
;
private reduce36 =  single . DefinitionS.Imp 
;
private reduce37 =  single . DefinitionS.Fix 
;
private reduce38 =  single . DefinitionS.Mod 
;
private reduce40 =  \_\m\t\i\js -> ModDcl {pos = yyline m, extending=t, implementing=i, code=js }
;
private reduce41 =  Nothing 
;
private reduce42 =  \a\b -> Just b 
;
private reduce43 =  [] 
;
private reduce44 =  \_\taus -> taus 
;
private reduce45 =  \_\_\c\_ -> c  
;
private reduce46 =  \_\_\_   -> [] 
;
private reduce108 =  single 
;
private reduce109 =  (:) 
;
private reduce110 =  \a\b\c -> a:(b++[c]) 
;
private reduce111 =  \a\b\c\d -> (a:b)++(c:d) 
;
private reduce112 =  \a\b -> [a,b] 
;
private reduce113 =  \a\b\cs -> a:b:cs 
;
private reduce114 =  \t -> DocDcl {pos = yyline t, text = t.value}
;
private reduce115 =  single . DefinitionS.Typ 
;
private reduce116 =  single . DefinitionS.Dat 
;
private reduce117 =  single . DefinitionS.Jav 
;
private reduce118 =  single . DefinitionS.Cla 
;
private reduce119 =  single . DefinitionS.Ins 
;
private reduce120 =  single . DefinitionS.Drv 
;
private reduce123 =  const 
;
private reduce124 =  \d\_\ds -> d ++ ds 
;
private reduce125 =  map DefinitionS.Ann 
;
private reduce126 =  single . DefinitionS.Nat 
;
private reduce127 =  single . DefinitionS.Fun 
;
private reduce129 =  \_\ds -> map (updVis Private) ds 
;
private reduce130 =  \_\ds -> map (updVis Protected) ds 
;
private reduce131 =  \_\ds -> map (updVis Public) ds 
;
private reduce132 =  single . DefinitionS.Doc 
;
private reduce133 =  \doc\ds -> DefinitionS.Doc doc : ds 
;
private reduce135 =  map LetMemberS.Ann 
;
private reduce136 =  single . LetMemberS.Fun 
;
private reduce138 =  const 
;
private reduce139 =  \ds1\_\ds2 -> ds1 ++ ds2 
;
private reduce140 =  \i\b\c -> ImpDcl {pos=snd b, pack=fst b, imports=c, as=Nothing} 
;
private reduce141 =  \i\p\a\c\l -> do
            when (Token.value a != "as") do
                yyerror (yyline a) (show "as" ++ " expected instead of " ++ show (Token.value a))
            changeST Global.{sub <- SubSt.{idKind <- insert (KeyTk c) (Left()) }}
            YYM.pure ImpDcl {pos = snd p, pack = fst p, imports = l, as = Just (Token.value c)}
        
;
private reduce142 =  \i\p\c\l -> do
            changeST Global.{sub <- SubSt.{idKind <- insert (KeyTk c) (Left()) }}
            YYM.pure ImpDcl {pos = snd p, pack = fst p, imports = l, as = Just (Token.value c)}
        
;
private reduce143 =  linkAll 
;
private reduce144 =  \v\_\is\_ -> do
            when ( v.value `notElem` [ "except", "excluding", "without", "auÃer", "ohne", "hiding" ]) do
                yyerror (yyline v) (show "hiding" ++ " expected instead of " ++ show v.value)
            YYM.pure linkAll.{items=is}
        
;
private reduce145 =  \_\_    -> linkNone 
;
private reduce146 =  \_\is\_ -> linkNone.{items = is}  
;
private reduce147 =  \_\il   -> ImportList.{publik = true} il 
;
private reduce148 =  single 
;
private reduce149 =  \s\_ -> [s] 
;
private reduce150 =  liste  
;
private reduce151 =  \v        -> protoItem.{ name = v } 
;
private reduce152 =  \v\_\ms\_ -> protoItem.{ name = Simple v, members = Just ms} 
;
private reduce153 =  \v\_\_    -> protoItem.{ name = Simple v, members = Just []} 
;
private reduce154 =  \v        -> protoItem.{ name = v } 
;
private reduce155 =  \t        -> protoItem.{ name = opSname t } 
;
private reduce156 =  \v        -> protoItem.{ name = Simple v} 
;
private reduce157 =  \s      -> ImportItem.{alias = (enclosed . Token.value . SName.id . ImportItem.name) s} s
;
private reduce158 =  \s\a    -> ImportItem.{alias = enclosed (Token.value a)} s 
;
private reduce159 =  \_\s    -> ImportItem.export s 
;
private reduce160 =  \v     -> protoItem.{ name  = Simple v,
                                                alias = enclosed (Token.value v)} 
;
private reduce161 =  \v\a   -> protoItem.{ name  = Simple v,
                                                alias = enclosed (Token.value a)} 
;
private reduce162 =  \_\s   -> ImportItem.export s 
;
private reduce163 =  single 
;
private reduce164 =  \s\_ -> [s] 
;
private reduce165 =  liste  
;
private reduce168 =  \v -> do { op <- unqualified v; pure op }
;
private reduce171 =  Token.{tokid = VARID} 
;
private reduce172 =  Token.{tokid = VARID} 
;
private reduce173 =  Token.{tokid = VARID} 
;
private reduce174 =  Token.{tokid = VARID} 
;
private reduce175 =  Token.{tokid = VARID} 
;
private reduce176 =  Token.{tokid = VARID} 
;
private reduce177 =  single 
;
private reduce178 =  liste  
;
private reduce179 =  \n\t\v     -> With2 n t v
;
private reduce180 =  \t\v       -> With1 t v
;
private reduce181 =  \v         -> Simple v 
;
private reduce182 =  \n\t\v     -> With2 n t v
;
private reduce183 =  \t\v       -> With1 t v
;
private reduce184 =  \v         -> Simple v 
;
private reduce187 =  \n\t\v     -> With2 n t v
;
private reduce188 =  \t\v       -> With1 t v
;
private reduce189 =  Simple  
;
private reduce190 =  opSname 
;
private reduce194 =  \f\i -> do
                                    t <- infixop (yyline i) NOP1 (Token.value i)
                                    YYM.pure (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce195 =  \f\i -> do
                                    t <- infixop (yyline i) LOP1 (Token.value i)
                                    YYM.pure (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce196 =  \f\i -> do
                                    t <- infixop (yyline i) ROP1 (Token.value i)
                                    YYM.pure (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce197 =  Token.value 
;
private reduce198 =  Token.value 
;
private reduce199 =  Token.value 
;
private reduce200 =  single  
;
private reduce201 =  (:) 
;
private reduce202 =  \(def::FixDcl)\o -> def.{ops = o}
;
private reduce203 =  \as\_\s -> map (annotation s) as 
;
private reduce205 =  \_\a\_ -> do unqualified a 
;
private reduce206 =  \_\a\_ -> a 
;
private reduce207 =  \_\a\_ -> a 
;
private reduce208 =  single   
;
private reduce209 =  liste    
;
private reduce210 =  \_\(d::NatDcl) -> d.{isPure = true} 
;
private reduce215 =  \o -> do unqualified o 
;
private reduce217 =  \o -> do unqualified o >>= pure . _.value 
;
private reduce218 =  Token.value 
;
private reduce219 =  \f\j\g -> (f,j,Just g) 
;
private reduce220 =  \f\j -> (f,j,Nothing) 
;
private reduce221 =  \f\g -> (f,Token.value f, Just g)  
;
private reduce222 =  \f   -> (f,Token.value f, Nothing) 
;
private reduce223 =  \a\_\c -> (a, c) 
;
private reduce224 =  \a -> (a, [])    
;
private reduce225 =  single 
;
private reduce226 =  liste 
;
private reduce227 =  \_\(fr,jv,ga)\col\t ->
                    NatDcl {pos=yyline fr, vis=Public, name=fr.value,
                                                meth=jv, txs=t, isPure=false,
                                                gargs = ga, 
                                                doc=Nothing}
;
private reduce229 =  ForAll [] 
;
private reduce230 =  \_\vs\_\r      -> ForAll  vs  r 
;
private reduce232 =  \dot -> do
                                        when (Token.value dot != "â¢") do
                                            yyerror (yyline dot)
                                                ("'.' expected instead of " ++ show dot.value)
                                        YYM.pure dot
                                    
;
private reduce233 =  \tau\t\rho -> do
                                        context <- tauToCtx tau
                                        YYM.pure (Rho.{context} rho)
                                     
;
private reduce235 =  RhoTau [] 
;
private reduce236 =  \a\_\b     -> case a of
                                            TSig s -> RhoFun [] s b 
                                            _ -> RhoFun [] (ForAll [] (RhoTau [] a)) b 
;
private reduce238 =  TSig 
;
private reduce239 =  \a\f\b ->  case a of
                            TSig s -> TSig (ForAll [] (RhoFun [] s (RhoTau [] b))) 
                            _      -> TApp (TApp (TCon (yyline f) (fromBase f.{tokid=CONID, value="->"})) a) b 
                         
;
private reduce240 =  single 
;
private reduce241 =  liste  
;
private reduce242 =  single 
;
private reduce243 =  liste  
;
private reduce244 =  \taus -> Tau.mkapp (head taus) (tail taus) 
;
private reduce246 =  \(tn::SName) -> TCon (yyline tn.id) tn
;
private reduce247 =  \_\t\_ -> t 
;
private reduce248 = \_\t\(c::Token)\ts\_ ->
                            let
                                tus = t:ts;
                                i = length tus;
                                tname = fromBase c.{tokid=CONID, value=tuple i}
                            in  (TCon (yyline c) tname).mkapp tus
                        
;
private reduce249 =  \_\t\e\ts\_ -> mkEither (yyline e) t ts 
;
private reduce250 = \a\t\_ -> TApp (TCon (yyline a)
                                             (fromBase a.{tokid=CONID, value="[]"}))
                                        t 
;
private reduce251 =  \n          -> TVar (yyline n) KVar (Token.value n)  
;
private reduce252 =  \_\n\_\k\_  -> TVar (yyline n) k    (Token.value n)  
;
private reduce253 =  \_\v\x\ks\_ -> TVar (yyline v) (KGen ks) (v.value)   
;
private reduce254 =  \_\x\ks\_   -> TVar (yyline x) (KGen ks) ("<")       
;
private reduce255 =  \_\x\k\_    -> TVar (yyline x) (KGen [k]) (">")      
;
private reduce257 =  \(a::Token)\_ -> fromBase a.{tokid=CONID, value="[]"} 
;
private reduce258 =  \(a::Token)\_ -> fromBase a.{tokid=CONID, value="()"} 
;
private reduce259 =  \(z::Token)\n\_ -> fromBase z.{tokid=CONID, value=tuple (n+1)} 
;
private reduce260 =  \_\(a::Token)\_ -> fromBase a.{tokid=CONID, value="->"} 
;
private reduce261 =  \a\_\c -> KApp a c 
;
private reduce263 =  \star -> do
                                let w = Token.value star
                                when  (w != "*") do
                                    yyerror (yyline star) 
                                            ("expected `*`, found `" ++ w ++ "`") 
                                pure KType
                            
;
private reduce264 =  \_\b\_ -> b 
;
private reduce265 =  \c\v -> Ctx {pos=Pos (SName.id c) v.pos.last, cname=c, tau=v} 
;
private reduce266 =  single 
;
private reduce267 =  \c\_ -> [c] 
;
private reduce268 =  liste  
;
private reduce269 =  single 
;
private reduce270 =  \_\x\_ -> x 
;
private reduce271 = 
        \_\ctxs\_\c\v\defs -> do
            sups <- classContext (Token.value c) ctxs (v::TauS).var
            pure ClaDcl{
                    pos = yyline c, 
                    vis = Public,
                    name = Token.value c,
                    clvar = v,
                    supers = sups,
                    defs,
                    doc = Nothing}
    
;
private reduce272 = 
        \kw\ctxs\defs -> case ctxs of
            Ctx{pos,cname,tau}:rest -> do
                unless (null rest) 
                    (yyerror (yyline kw) "classname missing after contexts")
                when (SName.{ty?} cname)
                    (yyerror (yyline cname.id) "classname must not be qualified") 
                pure ClaDcl {pos, vis = Public, name=cname.id.value,
                               clvar = tau, supers = [],
                               defs, doc = Nothing}
            _ -> Prelude.error "fatal: empty ccontext (cannot happen)" 
    
;
private reduce273 =  \c\t -> Ctx {pos=Pos (SName.id c) t.getpos.last, cname=c, tau=t} 
;
private reduce274 =  single 
;
private reduce275 =  \c\_ -> [c] 
;
private reduce276 =  liste  
;
private reduce277 =  single 
;
private reduce278 =  \_\x\_ -> x 
;
private reduce279 = 
        \ctxs\ea\cls\tau -> InsDcl {
            pos = yyline ea,
            vis = Public,
            clas = cls,
            typ = ForAll [] (RhoTau ctxs tau),
            defs = [],
            doc = Nothing}
    
;
private reduce280 = 
        \ctxs -> case ctxs of
            Ctx{pos, cname, tau}:rest -> do
                unless (null rest) 
                        (yyerror pos "classname missing after instance contexts")
                pure InsDcl {
                    pos, vis = Public, clas = cname,
                    typ = ForAll [] (RhoTau [] tau),
                    defs = [],
                    doc = Nothing,
                    }
            _ -> Prelude.error "fatal: empty instance context"
    
;
private reduce281 = 
        \ins\head\defs -> (head::InsDcl).{defs, pos = yyline ins}
    
;
private reduce282 = 
        \d\(i::InsDcl) -> DrvDcl {pos = yyline d, vis = Public, clas=i.clas, typ=i.typ, doc=Nothing}
    
;
private reduce283 =  \def\defs -> (def::DatDcl).{defs = defs} 
;
private reduce284 =  \def\defs -> (def::JavDcl).{defs = defs} 
;
private reduce285 =  \_\_ -> true  
;
private reduce286 =  \_   -> false 
;
private reduce287 =  \x     ->  (x, Nothing) 
;
private reduce288 =  \x\gs  ->  (x, Just gs) 
;
private reduce289 =  \_\ts\_   -> ts 
;
private reduce290 =  \_\_      -> [] 
;
private reduce291 = 
        \dat\d\ds\docu\alts -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = false,
                                        vars=ds, ctrs=alts, defs=[], doc=Nothing}
    
;
private reduce292 = 
        \dat\d\docu\alts -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = false,
                                        vars=[], ctrs=alts, defs=[], doc=Nothing}
    
;
private reduce293 = 
        \dat\d -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = false,
                                        vars=[], ctrs=[], defs=[], doc=Nothing}
    
;
private reduce294 = 
        \dat\d\ds\docu\alt -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = true,
                                        vars=ds, ctrs=[alt], defs=[], doc=Nothing}
    
;
private reduce295 = 
        \dat\d\docu\alt -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = true,
                                        vars=[], ctrs=[alt], defs=[], doc=Nothing}
    
;
private reduce296 = 
        \dat\d\docu\pur\(jt,gargs) -> JavDcl {pos=yyline d, vis=Public, name=Token.value d,
                                    jclas=jt, vars=[], defs=[],
                                    gargs,  
                                    isPure = pur, 
                                    doc=Nothing}
    
;
private reduce297 = 
        \dat\d\ds\docu\pur\(jt,gargs) -> JavDcl {pos=yyline d, vis=Public, name=Token.value d,
                                    jclas=jt, vars=ds, defs=[],
                                    gargs, 
                                    isPure = pur,
                                    doc=Nothing}
    
;
private reduce298 =  single 
;
private reduce299 =  (:) 
;
private reduce300 =  single 
;
private reduce301 =  liste  
;
private reduce303 =  \dc\doc -> (dc::DConS).{doc = Just (Token.value doc)} 
;
private reduce304 =  \doc\dc -> (dc::DConS).{doc = Just (Token.value doc)} 
;
private reduce306 =  \_\dc -> (dc::DConS).{vis = Public}    
;
private reduce307 =  \_\dc -> (dc::DConS).{vis = Private}   
;
private reduce308 =  \_\dc -> (dc::DConS).{vis = Protected} 
;
private reduce309 =  \_\dcon ->  DCon.{ -- strict=true,
                                                    flds <-map ConField.{strict=true}}  dcon 
;
private reduce310 =  \_\dcon ->  DCon.{ -- strict=false,
                                                    flds <-map ConField.{strict=false}} dcon 
;
private reduce312 =  \c        -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=[], doc=Nothing } 
;
private reduce313 =  \c\_\fs\_ -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=fs, doc=Nothing } 
;
private reduce314 =  \c\fs     -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=fs, doc=Nothing } 
;
private reduce315 =  single 
;
private reduce316 =  (:)    
;
private reduce318 =  const ConField.{strict=true}  
;
private reduce319 =  const ConField.{strict=false} 
;
private reduce320 =  \tau -> case tau of 
                                    TSig s -> Field Position.null Nothing Nothing Public false s
                                    _      -> Field Position.null Nothing Nothing Public false 
                                                (ForAll [] (RhoTau [] tau))
                                
;
private reduce321 =  single 
;
private reduce322 =  (:) 
;
private reduce324 =  const 
;
private reduce325 =  \cs\(d::Token) -> map ConField.{doc <- addDoc d.value} cs 
;
private reduce326 =  \as\c\ls -> as ++ ls 
;
private reduce327 =  \as\(d::Token)\ls -> map ConField.{doc <- addDoc d.value} as ++ ls 
;
private reduce328 =  \(d::Maybe String)\vs\_\t ->
                                        map (ConField.{doc=d} . ($t)) vs
                                  
;
private reduce329 =  single 
;
private reduce330 =  liste  
;
private reduce332 =  const (ConField.{vis=Public}  .) 
;
private reduce333 =  const (ConField.{vis=Private} .) 
;
private reduce335 =  const (ConField.{strict=true}  .) 
;
private reduce336 =  const (ConField.{strict=false} .) 
;
private reduce337 =  \v -> Field (yyline v) (Just v.value) Nothing Public false 
;
private reduce338 =  \t\i   \_\r -> TypDcl {pos=yyline i, 
                                                            vis=Public, 
                                                            name=Token.value i, 
                                                            vars=[], 
                                                            typ = r, 
                                                            doc=Nothing}
;
private reduce339 =  \t\i\vs\_\r -> TypDcl {pos=yyline i, 
                                                            vis=Public, 
                                                            name=Token.value i, 
                                                            vars=vs, 
                                                            typ = r, 
                                                            doc=Nothing}
;
private reduce340 =  [] 
;
private reduce341 =  \_\_\_ -> []
;
private reduce342 =  \_\_\defs\_ -> defs
;
private reduce343 =  \_\_\_ -> []
;
private reduce344 =  \_\_\defs\_ -> defs
;
private reduce345 =  \(ex,pats)\eq\expr -> fundef ex pats expr 
;
private reduce346 =  \(ex,pats)\gds -> fungds ex pats gds 
;
private reduce347 =  \(fd::FunDcl)\defs -> YYM.pure $ fd.{expr = Let defs fd.expr} 
;
private reduce348 =  \x -> do
                                            x <- funhead x
                                            YYM.pure x
                                    
;
private reduce349 =  \x ->  Lit (yyline x) LBool "true" false
;
private reduce350 =  \x ->  Lit (yyline x) LBool "false" false
;
private reduce351 =  \x ->  do litchar x 
;
private reduce352 =  \x ->  Lit (yyline x) LString (Token.value x) false
;
private reduce353 =  \x ->  do litint x  
;
private reduce354 =  \x ->  do litbig x  
;
private reduce355 =  \x ->  do litlong x 
;
private reduce356 =  \x ->  Lit (yyline x) LFloat  (Token.value x) false
;
private reduce357 =  \x ->  Lit (yyline x) LDouble (Token.value x) false
;
private reduce358 =  \x ->  do litdec x    
;
private reduce359 =  \x ->  do litregexp x 
;
private reduce364 =  \e\t\x -> do
                                         (ex,pat) <- funhead e
                                         YYM.pure $ Right $ single $ LetMemberS.Fun $ fundef ex pat x 
;
private reduce365 =  \_\_\ds\_ -> Right ds 
;
private reduce366 =  single 
;
private reduce367 =  liste  
;
private reduce368 =  (const . single) 
;
private reduce369 =  single 
;
private reduce370 =  (const . single) 
;
private reduce371 =  liste 
;
private reduce372 =  \e     ->  Left (Nothing, e) 
;
private reduce373 =  \p\g\e ->  Left (Just p,  e) 
;
private reduce374 =  single 
;
private reduce375 =  liste  
;
private reduce376 =  (const . single) 
;
private reduce377 =  \a\qs\_\x  -> (yyline a, qs, x) 
;
private reduce378 =  single 
;
private reduce379 =  (:) 
;
private reduce380 =  \p\a\e ->
                                        CAlt {pat=p, ex=e}
;
private reduce381 =  \p\gs -> guardedalt p gs
;
private reduce382 = \(calt::CAltS)\defs ->
                                        let
                                            nx = Let defs calt.ex;
                                        in calt.{ ex = nx } 
;
private reduce383 =  single 
;
private reduce384 =  liste  
;
private reduce385 =  \a\_    ->  [a] 
;
private reduce386 =  \_\ps\b  -> foldr (\p\x -> Lam p x false) b ps 
;
private reduce388 =  \_\x -> x 
;
private reduce389 =  \x\_\t  -> Ann {ex = x, typ=t} 
;
private reduce391 =  flip const 
;
private reduce393 =  flip const 
;
private reduce395 =  mkapp 
;
private reduce396 =  mkapp 
;
private reduce397 =  \m\x -> nApp (Vbl (contextName m "negate")) x
;
private reduce399 =  \_\c\_\t\_\e  -> Ifte c t e
;
private reduce400 =  \_\e\_\_\as\_ -> Case CNormal e as
;
private reduce401 =  \_\_\ds\_\_\e -> Let ds e
;
private reduce403 =  underscore 
;
private reduce405 =  nApp 
;
private reduce407 =  \u\p -> nApp (Vbl {name=Simple u}) p
;
private reduce408 =  single 
;
private reduce409 =  (:) 
;
private reduce410 =  With1 
;
private reduce411 =  With2 
;
private reduce413 =  \d\_\defs\_   -> do mkMonad (yyline d) defs 
;
private reduce414 =  \p\_\(v::Token) -> umem p v id
;
private reduce415 =  \p\_\v -> do {v <- unqualified v;
                                                    YYM.pure (umem p v id)}
;
private reduce416 =  \p\_\v -> umem p v id
;
private reduce417 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("has$" ++)}) 
;
private reduce418 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("upd$" ++)}) 
;
private reduce419 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("chg$" ++)}) 
;
private reduce420 =  \q\(p::Token)\fs\_ -> let {
                        -- n   = Simple q;
                        flp = Vbl (wellKnown p "flip");
                        bul = Vbl (contextName p "â¢");
                        c []     = undefined;
                        c (f:fs) = fold cex (chup f) fs where {
                            cex x f = bul `nApp` x `nApp` chup f;
                            chup :: (Token, Bool, Exp) -> Exp;
                            chup (r, true, e)  = flp `nApp` Vbl  (q r.{value <- ("chg$"++)}) `nApp` e;
                            chup (r, false, e) = flp `nApp` Vbl  (q r.{value <- ("upd$"++)}) `nApp` e;
                                      }} in c fs 
;
private reduce421 =  \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("has$"++)} id
;
private reduce422 =  \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("upd$"++)} id
;
private reduce423 = \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("chg$"++)} id
;
private reduce424 =  \x\(p::Token)\_\fs\_ ->
                                let {
                        u x [] = x;
                        u x ((r::Token, true , e):xs) = u (umem x r.{value <- ("chg$" ++)} (`nApp` e))  xs;
                        u x ((r::Token, false, e):xs) = u (umem x r.{value <- ("upd$" ++)} (`nApp` e))  xs;
                                } in u x fs
;
private reduce425 =  \p\t\_\v\_  ->
                                        let elem = t.{tokid = VARID, value = "elemAt"}
                                        in Vbl {name=Simple elem}
                                            `nApp` p
                                            `nApp` v
;
private reduce426 =  \x   -> Vbl {name=x} 
;
private reduce428 =  \t   -> Vbl {name = Simple t.{tokid=VARID, value="_"}} 
;
private reduce429 =  \qc  -> Con {name=qc} 
;
private reduce430 =  \qc\_\z    -> ConFS {name=qc, fields=[]}
;
private reduce431 =  \qc\_\fs\z -> ConFS {name=qc, fields=fs}
;
private reduce432 =  \z\_   -> Con (fromBase z.{tokid=CONID, value="()"})
;
private reduce433 =  \z\n\_ -> Con (fromBase z.{tokid=CONID, value=tuple (n+1)})
;
private reduce434 =  \_\x\_ -> Vbl {name=Simple x} 
;
private reduce435 =  \a\o\z -> Enclosed{firstT=a, lastT=z, ex=(varcon o) (opSname o)}
;
private reduce436 =  \_\m\_ -> (Vbl (fromBase m)) 
;
private reduce437 =  \z\o\x\_ ->  let -- (+1) --> flip (+) 1
                                        flp = Vbl (contextName z "flip") 
                                        op  = (varcon o) (opSname o)
                                        ex = nApp (nApp flp op) x
                                    in ex
;
private reduce438 =  \_\x\o\_ ->  -- (1+) --> (+) 1
                                        nApp ((varcon o) (opSname o)) x
;
private reduce439 =  \_\x\o\_ ->  -- (1+) --> (+) 1
                                        nApp ((varcon o) (Simple o)) x
;
private reduce440 =  \a\e\x\es\_ -> fold nApp (Con 
                                                                   (fromBase x.{tokid=CONID, value=tuple (1+length es)})
                                                                   )
                                                              (e:es)
;
private reduce441 =  \a\e\(x::Token)\es\_ -> do
                                            g <- getST
                                            E.warn (yyline x) (PP.text "strict tuples are deprecated, use ',' to separate elements")
                                            pure (
                                                fold nApp 
                                                    (Con 
                                                        (fromBase x.{tokid=CONID, value=tuple (1+length es)})
                                                        )
                                                    (e:es)
                                              )
                                        
;
private reduce442 =  \_\x\_ -> Term x 
;
private reduce443 =  \a\z ->  Con (fromBase z.{tokid=CONID, value="[]"})
;
private reduce444 =  \b\es\z -> 
                                                foldr (\a\as -> nApp (nApp (Con (fromBase b.{tokid=CONID, value=":"})) a) as)
                                                       (Con (fromBase z.{tokid=CONID, value="[]"}))
                                                       es
;
private reduce445 =  \a\b\c\d   -> do mkEnumFrom   a b c d
;
private reduce446 =  \a\b\c\d\e -> do mkEnumFromTo a b c d e
;
private reduce447 =  \(a::Token)\e\b\qs\(z::Token) -> do {
                let {nil = z.{tokid=CONID, value="[]"}};
                listComprehension (yyline b) e qs
                                            (Con {name = fromBase nil})
                                    }
;
private reduce448 =  const 1 
;
private reduce449 =  ((+) . const 1) 
;
private reduce450 =  single 
;
private reduce451 =  \a\c\ls ->
                                        if elemBy (using fst) a ls then do {
                                                E.warn (yyline c) (msgdoc ("field `" ++ fst a
                                                    ++ "` should appear only once."));
                                                YYM.pure ls
                                            } else
                                                YYM.pure (a:ls)
                                    
;
private reduce452 =  (const . single) 
;
private reduce453 =  single 
;
private reduce454 =  liste  
;
private reduce455 =  (const . single) 
;
private reduce456 =  \s\_\x ->  (s, true,  x) 
;
private reduce457 =  \s\_\x ->  (s, false, x) 
;
private reduce458 =  \s     ->  (s, false, Vbl (Simple s)) 
;
private reduce459 =  \s\_\x ->  (Token.value s, x) 
;
private reduce460 =  \s     ->  (s.value, Vbl (Simple s)) 
;
private reduce461 =  single 
;
private reduce462 =  liste  
;
private reduce463 =  (const . single) 
;
private reduce464 =  single 
;
private reduce465 =  liste 
;
private reduce466 =  (const . single) 
;
yyrule 1 = "module: docsO moduleclause ';' definitions";
yyrule 2 = "module: docsO moduleclause WHERE '{' definitions '}'";
yyrule 3 = "module: docsO '{' definitions '}'";
yyrule 4 = "nativename: rawnativename";
yyrule 5 = "rawnativename: VARID";
yyrule 6 = "rawnativename: CONID";
yyrule 7 = "rawnativename: PACKAGE";
yyrule 8 = "rawnativename: VARID '.' rawnativename";
yyrule 9 = "rawnativename: PACKAGE '.' rawnativename";
yyrule 10 = "rawnativename: QUALIFIER rawnativename";
yyrule 11 = "rawnativename: STRCONST";
yyrule 12 = "modulename1: CONID";
yyrule 13 = "modulename1: varidkw '.' modulename1";
yyrule 14 = "modulename1: QUALIFIER modulename1";
yyrule 15 = "modulename: modulename1";
yyrule 16 = "docs: DOCUMENTATION";
yyrule 17 = "docs: DOCUMENTATION docs";
yyrule 18 = "docsO: <empty>";
yyrule 19 = "docsO: docs";
yyrule 20 = "moduleclause: PACKAGE modulename";
yyrule 21 = "moduleclause: PROTECTED PACKAGE modulename";
yyrule 22 = "moduleclause: moduleclause words '(' qvarids ')'";
yyrule 23 = "word: VARID";
yyrule 24 = "words: word";
yyrule 25 = "words: word words";
yyrule 26 = "definitions: definition";
yyrule 27 = "definitions: definition ';'";
yyrule 28 = "definitions: definition ';' definitions";
yyrule 29 = "definition: documentation";
yyrule 30 = "definition: topdefinition";
yyrule 31 = "definition: visibledefinition";
yyrule 32 = "visibledefinition: PRIVATE publicdefinition";
yyrule 33 = "visibledefinition: PROTECTED publicdefinition";
yyrule 34 = "visibledefinition: PUBLIC publicdefinition";
yyrule 35 = "visibledefinition: ABSTRACT datadef";
yyrule 36 = "topdefinition: import";
yyrule 37 = "topdefinition: infix";
yyrule 38 = "topdefinition: moduledefinition";
yyrule 39 = "topdefinition: publicdefinition";
yyrule 40 = "moduledefinition: NATIVE PACKAGE typeclause interfaces wheretokens";
yyrule 41 = "typeclause: <empty>";
yyrule 42 = "typeclause: TYPE tau";
yyrule 43 = "interfaces: <empty>";
yyrule 44 = "interfaces: CLASS tauSC";
yyrule 45 = "wheretokens: WHERE '{' jtokens '}'";
yyrule 46 = "wheretokens: WHERE '{' '}'";
yyrule 47 = "jtoken: VARID";
yyrule 48 = "jtoken: CONID";
yyrule 49 = "jtoken: QUALIFIER";
yyrule 50 = "jtoken: EXTENDS";
yyrule 51 = "jtoken: SUPER";
yyrule 52 = "jtoken: DOCUMENTATION";
yyrule 53 = "jtoken: PACKAGE";
yyrule 54 = "jtoken: IMPORT";
yyrule 55 = "jtoken: INFIX";
yyrule 56 = "jtoken: INFIXR";
yyrule 57 = "jtoken: INFIXL";
yyrule 58 = "jtoken: NATIVE";
yyrule 59 = "jtoken: DATA";
yyrule 60 = "jtoken: WHERE";
yyrule 61 = "jtoken: CLASS";
yyrule 62 = "jtoken: INSTANCE";
yyrule 63 = "jtoken: ABSTRACT";
yyrule 64 = "jtoken: TYPE";
yyrule 65 = "jtoken: TRUE";
yyrule 66 = "jtoken: FALSE";
yyrule 67 = "jtoken: IF";
yyrule 68 = "jtoken: THEN";
yyrule 69 = "jtoken: ELSE";
yyrule 70 = "jtoken: CASE";
yyrule 71 = "jtoken: OF";
yyrule 72 = "jtoken: DERIVE";
yyrule 73 = "jtoken: LET";
yyrule 74 = "jtoken: IN";
yyrule 75 = "jtoken: DO";
yyrule 76 = "jtoken: FORALL";
yyrule 77 = "jtoken: PRIVATE";
yyrule 78 = "jtoken: PROTECTED";
yyrule 79 = "jtoken: PUBLIC";
yyrule 80 = "jtoken: PURE";
yyrule 81 = "jtoken: THROWS";
yyrule 82 = "jtoken: MUTABLE";
yyrule 83 = "jtoken: INTCONST";
yyrule 84 = "jtoken: STRCONST";
yyrule 85 = "jtoken: LONGCONST";
yyrule 86 = "jtoken: FLTCONST";
yyrule 87 = "jtoken: DBLCONST";
yyrule 88 = "jtoken: CHRCONST";
yyrule 89 = "jtoken: ARROW";
yyrule 90 = "jtoken: DCOLON";
yyrule 91 = "jtoken: GETS";
yyrule 92 = "jtoken: EARROW";
yyrule 93 = "jtoken: DOTDOT";
yyrule 94 = "jtoken: SOMEOP";
yyrule 95 = "jtoken: ','";
yyrule 96 = "jtoken: '|'";
yyrule 97 = "jtoken: '['";
yyrule 98 = "jtoken: ']'";
yyrule 99 = "jtoken: '('";
yyrule 100 = "jtoken: ')'";
yyrule 101 = "jtoken: '.'";
yyrule 102 = "jtoken: '?'";
yyrule 103 = "jtoken: '-'";
yyrule 104 = "jtoken: ';'";
yyrule 105 = "jtoken: '!'";
yyrule 106 = "jtoken: '='";
yyrule 107 = "jtoken: '\\'";
yyrule 108 = "jtokens: jtoken";
yyrule 109 = "jtokens: jtoken jtokens";
yyrule 110 = "jtokens: '{' jtokens '}'";
yyrule 111 = "jtokens: '{' jtokens '}' jtokens";
yyrule 112 = "jtokens: '{' '}'";
yyrule 113 = "jtokens: '{' '}' jtokens";
yyrule 114 = "documentation: DOCUMENTATION";
yyrule 115 = "publicdefinition: typedef";
yyrule 116 = "publicdefinition: datadef";
yyrule 117 = "publicdefinition: datajavadef";
yyrule 118 = "publicdefinition: classdef";
yyrule 119 = "publicdefinition: instdef";
yyrule 120 = "publicdefinition: derivedef";
yyrule 121 = "publicdefinition: localdef";
yyrule 122 = "localdefs: dplocaldef";
yyrule 123 = "localdefs: dplocaldef ';'";
yyrule 124 = "localdefs: dplocaldef ';' localdefs";
yyrule 125 = "localdef: annotation";
yyrule 126 = "localdef: nativedef";
yyrule 127 = "localdef: fundef";
yyrule 128 = "plocaldef: localdef";
yyrule 129 = "plocaldef: PRIVATE localdef";
yyrule 130 = "plocaldef: PROTECTED localdef";
yyrule 131 = "plocaldef: PUBLIC localdef";
yyrule 132 = "dplocaldef: documentation";
yyrule 133 = "dplocaldef: documentation dplocaldef";
yyrule 134 = "dplocaldef: plocaldef";
yyrule 135 = "letdef: annotation";
yyrule 136 = "letdef: fundef";
yyrule 137 = "letdefs: letdef";
yyrule 138 = "letdefs: letdef ';'";
yyrule 139 = "letdefs: letdef ';' letdefs";
yyrule 140 = "import: IMPORT modulename importliste";
yyrule 141 = "import: IMPORT modulename VARID CONID importliste";
yyrule 142 = "import: IMPORT modulename CONID importliste";
yyrule 143 = "importliste: <empty>";
yyrule 144 = "importliste: varid '(' importspecs ')'";
yyrule 145 = "importliste: '(' ')'";
yyrule 146 = "importliste: '(' importspecs ')'";
yyrule 147 = "importliste: PUBLIC importliste";
yyrule 148 = "importspecs: importspec";
yyrule 149 = "importspecs: importspec ','";
yyrule 150 = "importspecs: importspec ',' importspecs";
yyrule 151 = "importitem: qvarid";
yyrule 152 = "importitem: CONID '(' memspecs ')'";
yyrule 153 = "importitem: CONID '(' ')'";
yyrule 154 = "importitem: qconid";
yyrule 155 = "importitem: operator";
yyrule 156 = "importitem: unop";
yyrule 157 = "importspec: importitem";
yyrule 158 = "importspec: importitem alias";
yyrule 159 = "importspec: PUBLIC importspec";
yyrule 160 = "memspec: alias";
yyrule 161 = "memspec: alias alias";
yyrule 162 = "memspec: PUBLIC memspec";
yyrule 163 = "memspecs: memspec";
yyrule 164 = "memspecs: memspec ','";
yyrule 165 = "memspecs: memspec ',' memspecs";
yyrule 166 = "alias: VARID";
yyrule 167 = "alias: CONID";
yyrule 168 = "alias: operator";
yyrule 169 = "varid: VARID";
yyrule 170 = "varidkw: VARID";
yyrule 171 = "varidkw: DATA";
yyrule 172 = "varidkw: TYPE";
yyrule 173 = "varidkw: NATIVE";
yyrule 174 = "varidkw: PURE";
yyrule 175 = "varidkw: PACKAGE";
yyrule 176 = "varidkw: IMPORT";
yyrule 177 = "qvarids: qvarop";
yyrule 178 = "qvarids: qvarop ',' qvarids";
yyrule 179 = "qvarid: QUALIFIER QUALIFIER varop";
yyrule 180 = "qvarid: QUALIFIER varop";
yyrule 181 = "qvarid: VARID";
yyrule 182 = "qconid: QUALIFIER QUALIFIER CONID";
yyrule 183 = "qconid: QUALIFIER CONID";
yyrule 184 = "qconid: CONID";
yyrule 185 = "varop: VARID";
yyrule 186 = "varop: unop";
yyrule 187 = "qvarop: QUALIFIER QUALIFIER varop";
yyrule 188 = "qvarop: QUALIFIER varop";
yyrule 189 = "qvarop: varop";
yyrule 190 = "qvarop: operator";
yyrule 191 = "operator: SOMEOP";
yyrule 192 = "unop: '!'";
yyrule 193 = "unop: '?'";
yyrule 194 = "fixity: INFIX INTCONST";
yyrule 195 = "fixity: INFIXL INTCONST";
yyrule 196 = "fixity: INFIXR INTCONST";
yyrule 197 = "opstring: operator";
yyrule 198 = "opstring: VARID";
yyrule 199 = "opstring: '-'";
yyrule 200 = "operators: opstring";
yyrule 201 = "operators: opstring operators";
yyrule 202 = "infix: fixity operators";
yyrule 203 = "annotation: annoitems DCOLON sigma";
yyrule 204 = "annoitem: varid";
yyrule 205 = "annoitem: '(' operator ')'";
yyrule 206 = "annoitem: '(' unop ')'";
yyrule 207 = "annoitem: '(' '-' ')'";
yyrule 208 = "annoitems: annoitem";
yyrule 209 = "annoitems: annoitem ',' annoitems";
yyrule 210 = "nativedef: PURE impurenativedef";
yyrule 211 = "nativedef: impurenativedef";
yyrule 212 = "fitem: annoitem";
yyrule 213 = "fitem: unop";
yyrule 214 = "fitem: '-'";
yyrule 215 = "fitem: operator";
yyrule 216 = "jitem: nativename";
yyrule 217 = "jitem: operator";
yyrule 218 = "jitem: unop";
yyrule 219 = "methodspec: fitem jitem gargs";
yyrule 220 = "methodspec: fitem jitem";
yyrule 221 = "methodspec: fitem gargs";
yyrule 222 = "methodspec: fitem";
yyrule 223 = "sigex: sigma THROWS tauSC";
yyrule 224 = "sigex: sigma";
yyrule 225 = "sigexs: sigex";
yyrule 226 = "sigexs: sigex '|' sigexs";
yyrule 227 = "impurenativedef: NATIVE methodspec DCOLON sigexs";
yyrule 228 = "sigma: forall";
yyrule 229 = "sigma: rho";
yyrule 230 = "forall: FORALL dvars mbdot rho";
yyrule 231 = "mbdot: '.'";
yyrule 232 = "mbdot: SOMEOP";
yyrule 233 = "rho: tapp EARROW rhofun";
yyrule 234 = "rho: rhofun";
yyrule 235 = "rhofun: tapp";
yyrule 236 = "rhofun: tapp ARROW rhofun";
yyrule 237 = "tau: tapp";
yyrule 238 = "tau: forall";
yyrule 239 = "tau: tapp ARROW tau";
yyrule 240 = "tauSC: tau";
yyrule 241 = "tauSC: tau ',' tauSC";
yyrule 242 = "tauSB: tau";
yyrule 243 = "tauSB: tau '|' tauSB";
yyrule 244 = "tapp: simpletypes";
yyrule 245 = "simpletype: tyvar";
yyrule 246 = "simpletype: tyname";
yyrule 247 = "simpletype: '(' tau ')'";
yyrule 248 = "simpletype: '(' tau ',' tauSC ')'";
yyrule 249 = "simpletype: '(' tau '|' tauSB ')'";
yyrule 250 = "simpletype: '[' tau ']'";
yyrule 251 = "tyvar: VARID";
yyrule 252 = "tyvar: '(' VARID DCOLON kind ')'";
yyrule 253 = "tyvar: '(' VARID EXTENDS tauSC ')'";
yyrule 254 = "tyvar: '(' EXTENDS tauSC ')'";
yyrule 255 = "tyvar: '(' SUPER tapp ')'";
yyrule 256 = "tyname: qconid";
yyrule 257 = "tyname: '[' ']'";
yyrule 258 = "tyname: '(' ')'";
yyrule 259 = "tyname: '(' commata ')'";
yyrule 260 = "tyname: '(' ARROW ')'";
yyrule 261 = "kind: simplekind ARROW kind";
yyrule 262 = "kind: simplekind";
yyrule 263 = "simplekind: SOMEOP";
yyrule 264 = "simplekind: '(' kind ')'";
yyrule 265 = "scontext: qconid tyvar";
yyrule 266 = "scontexts: scontext";
yyrule 267 = "scontexts: scontext ','";
yyrule 268 = "scontexts: scontext ',' scontexts";
yyrule 269 = "ccontext: scontext";
yyrule 270 = "ccontext: '(' scontexts ')'";
yyrule 271 = "classdef: CLASS ccontext EARROW CONID tyvar wheredef";
yyrule 272 = "classdef: CLASS ccontext wheredef";
yyrule 273 = "sicontext: qconid simpletype";
yyrule 274 = "sicontexts: sicontext";
yyrule 275 = "sicontexts: sicontext ','";
yyrule 276 = "sicontexts: sicontext ',' sicontexts";
yyrule 277 = "icontext: sicontext";
yyrule 278 = "icontext: '(' sicontexts ')'";
yyrule 279 = "insthead: icontext EARROW tyname simpletype";
yyrule 280 = "insthead: icontext";
yyrule 281 = "instdef: INSTANCE insthead wheredef";
yyrule 282 = "derivedef: DERIVE insthead";
yyrule 283 = "datadef: datainit wheredef";
yyrule 284 = "datajavadef: datajavainit wheredef";
yyrule 285 = "nativepur: PURE NATIVE";
yyrule 286 = "nativepur: NATIVE";
yyrule 287 = "nativespec: nativename";
yyrule 288 = "nativespec: nativename gargs";
yyrule 289 = "gargs: '{' tauSC '}'";
yyrule 290 = "gargs: '{' '}'";
yyrule 291 = "datainit: DATA CONID dvars '=' dalts";
yyrule 292 = "datainit: DATA CONID '=' dalts";
yyrule 293 = "datainit: DATA CONID";
yyrule 294 = "datainit: NEWTYPE CONID dvars '=' dalt";
yyrule 295 = "datainit: NEWTYPE CONID '=' dalt";
yyrule 296 = "datajavainit: DATA CONID '=' nativepur nativespec";
yyrule 297 = "datajavainit: DATA CONID dvars '=' nativepur nativespec";
yyrule 298 = "dvars: tyvar";
yyrule 299 = "dvars: tyvar dvars";
yyrule 300 = "dalts: dalt";
yyrule 301 = "dalts: dalt '|' dalts";
yyrule 302 = "dalt: visdalt";
yyrule 303 = "dalt: visdalt DOCUMENTATION";
yyrule 304 = "dalt: DOCUMENTATION visdalt";
yyrule 305 = "visdalt: strictdalt";
yyrule 306 = "visdalt: PUBLIC strictdalt";
yyrule 307 = "visdalt: PRIVATE strictdalt";
yyrule 308 = "visdalt: PROTECTED strictdalt";
yyrule 309 = "strictdalt: '!' simpledalt";
yyrule 310 = "strictdalt: '?' simpledalt";
yyrule 311 = "strictdalt: simpledalt";
yyrule 312 = "simpledalt: CONID";
yyrule 313 = "simpledalt: CONID '{' conflds '}'";
yyrule 314 = "simpledalt: CONID contypes";
yyrule 315 = "contypes: strictcontype";
yyrule 316 = "contypes: strictcontype contypes";
yyrule 317 = "strictcontype: contype";
yyrule 318 = "strictcontype: '!' contype";
yyrule 319 = "strictcontype: '?' contype";
yyrule 320 = "contype: simpletype";
yyrule 321 = "simpletypes: simpletype";
yyrule 322 = "simpletypes: simpletype simpletypes";
yyrule 323 = "conflds: confld";
yyrule 324 = "conflds: confld ','";
yyrule 325 = "conflds: confld DOCUMENTATION";
yyrule 326 = "conflds: confld ',' conflds";
yyrule 327 = "conflds: confld DOCUMENTATION conflds";
yyrule 328 = "confld: docsO fldids DCOLON sigma";
yyrule 329 = "fldids: fldid";
yyrule 330 = "fldids: fldid ',' fldids";
yyrule 331 = "fldid: strictfldid";
yyrule 332 = "fldid: PUBLIC strictfldid";
yyrule 333 = "fldid: PRIVATE strictfldid";
yyrule 334 = "strictfldid: plainfldid";
yyrule 335 = "strictfldid: '!' plainfldid";
yyrule 336 = "strictfldid: '?' plainfldid";
yyrule 337 = "plainfldid: varid";
yyrule 338 = "typedef: TYPE CONID '=' sigma";
yyrule 339 = "typedef: TYPE CONID dvars '=' sigma";
yyrule 340 = "wheredef: <empty>";
yyrule 341 = "wheredef: WHERE '{' '}'";
yyrule 342 = "wheredef: WHERE '{' localdefs '}'";
yyrule 343 = "wherelet: WHERE '{' '}'";
yyrule 344 = "wherelet: WHERE '{' letdefs '}'";
yyrule 345 = "fundef: funhead '=' expr";
yyrule 346 = "fundef: funhead guards";
yyrule 347 = "fundef: fundef wherelet";
yyrule 348 = "funhead: binex";
yyrule 349 = "literal: TRUE";
yyrule 350 = "literal: FALSE";
yyrule 351 = "literal: CHRCONST";
yyrule 352 = "literal: STRCONST";
yyrule 353 = "literal: INTCONST";
yyrule 354 = "literal: BIGCONST";
yyrule 355 = "literal: LONGCONST";
yyrule 356 = "literal: FLTCONST";
yyrule 357 = "literal: DBLCONST";
yyrule 358 = "literal: DECCONST";
yyrule 359 = "literal: REGEXP";
yyrule 360 = "pattern: expr";
yyrule 361 = "aeq: ARROW";
yyrule 362 = "aeq: '='";
yyrule 363 = "lcqual: gqual";
yyrule 364 = "lcqual: expr '=' expr";
yyrule 365 = "lcqual: LET '{' letdefs '}'";
yyrule 366 = "lcquals: lcqual";
yyrule 367 = "lcquals: lcqual ',' lcquals";
yyrule 368 = "lcquals: lcqual ','";
yyrule 369 = "dodefs: lcqual";
yyrule 370 = "dodefs: lcqual ';'";
yyrule 371 = "dodefs: lcqual ';' dodefs";
yyrule 372 = "gqual: expr";
yyrule 373 = "gqual: expr GETS expr";
yyrule 374 = "gquals: gqual";
yyrule 375 = "gquals: gqual ',' gquals";
yyrule 376 = "gquals: gqual ','";
yyrule 377 = "guard: '|' gquals aeq expr";
yyrule 378 = "guards: guard";
yyrule 379 = "guards: guard guards";
yyrule 380 = "calt: pattern aeq expr";
yyrule 381 = "calt: pattern guards";
yyrule 382 = "calt: calt wherelet";
yyrule 383 = "calts: calt";
yyrule 384 = "calts: calt ';' calts";
yyrule 385 = "calts: calt ';'";
yyrule 386 = "lambda: '\\' apats lambdabody";
yyrule 387 = "lambdabody: lambda";
yyrule 388 = "lambdabody: ARROW expr";
yyrule 389 = "expr: binex DCOLON sigma";
yyrule 390 = "expr: binex";
yyrule 391 = "thenx: ';' THEN";
yyrule 392 = "thenx: THEN";
yyrule 393 = "elsex: ';' ELSE";
yyrule 394 = "elsex: ELSE";
yyrule 395 = "binex: binex SOMEOP binex";
yyrule 396 = "binex: binex '-' binex";
yyrule 397 = "binex: '-' topex";
yyrule 398 = "binex: topex";
yyrule 399 = "topex: IF expr thenx expr elsex expr";
yyrule 400 = "topex: CASE expr OF '{' calts '}'";
yyrule 401 = "topex: LET '{' letdefs '}' IN expr";
yyrule 402 = "topex: lambda";
yyrule 403 = "topex: appex";
yyrule 404 = "appex: unex";
yyrule 405 = "appex: appex unex";
yyrule 406 = "unex: primary";
yyrule 407 = "unex: unop unex";
yyrule 408 = "apats: unex";
yyrule 409 = "apats: unex apats";
yyrule 410 = "qualifiers: QUALIFIER";
yyrule 411 = "qualifiers: QUALIFIER QUALIFIER";
yyrule 412 = "primary: term";
yyrule 413 = "primary: DO '{' dodefs '}'";
yyrule 414 = "primary: primary '.' VARID";
yyrule 415 = "primary: primary '.' operator";
yyrule 416 = "primary: primary '.' unop";
yyrule 417 = "primary: qualifiers '{' VARID '?' '}'";
yyrule 418 = "primary: qualifiers '{' VARID '=' '}'";
yyrule 419 = "primary: qualifiers '{' VARID GETS '}'";
yyrule 420 = "primary: qualifiers '{' getfields '}'";
yyrule 421 = "primary: primary '.' '{' VARID '?' '}'";
yyrule 422 = "primary: primary '.' '{' VARID '=' '}'";
yyrule 423 = "primary: primary '.' '{' VARID GETS '}'";
yyrule 424 = "primary: primary '.' '{' getfields '}'";
yyrule 425 = "primary: primary '.' '[' expr ']'";
yyrule 426 = "term: qvarid";
yyrule 427 = "term: literal";
yyrule 428 = "term: '_'";
yyrule 429 = "term: qconid";
yyrule 430 = "term: qconid '{' '}'";
yyrule 431 = "term: qconid '{' fields '}'";
yyrule 432 = "term: '(' ')'";
yyrule 433 = "term: '(' commata ')'";
yyrule 434 = "term: '(' unop ')'";
yyrule 435 = "term: '(' operator ')'";
yyrule 436 = "term: '(' '-' ')'";
yyrule 437 = "term: '(' operator expr ')'";
yyrule 438 = "term: '(' binex operator ')'";
yyrule 439 = "term: '(' binex '-' ')'";
yyrule 440 = "term: '(' expr ',' exprSC ')'";
yyrule 441 = "term: '(' expr ';' exprSS ')'";
yyrule 442 = "term: '(' expr ')'";
yyrule 443 = "term: '[' ']'";
yyrule 444 = "term: '[' exprSC ']'";
yyrule 445 = "term: '[' exprSC DOTDOT ']'";
yyrule 446 = "term: '[' exprSC DOTDOT expr ']'";
yyrule 447 = "term: '[' expr '|' lcquals ']'";
yyrule 448 = "commata: ','";
yyrule 449 = "commata: ',' commata";
yyrule 450 = "fields: field";
yyrule 451 = "fields: field ',' fields";
yyrule 452 = "fields: field ','";
yyrule 453 = "getfields: getfield";
yyrule 454 = "getfields: getfield ',' getfields";
yyrule 455 = "getfields: getfield ','";
yyrule 456 = "getfield: VARID GETS expr";
yyrule 457 = "getfield: VARID '=' expr";
yyrule 458 = "getfield: VARID";
yyrule 459 = "field: varid '=' expr";
yyrule 460 = "field: varid";
yyrule 461 = "exprSC: expr";
yyrule 462 = "exprSC: expr ',' exprSC";
yyrule 463 = "exprSC: expr ','";
yyrule 464 = "exprSS: expr";
yyrule 465 = "exprSS: expr ';' exprSS";
yyrule 466 = "exprSS: expr ';'";
yyrule _ = "<unknown rule>";

private yyprod1 ((_, (YYNTdefinitions yy4)):(_, (YYTok yy3)):(_, (YYNTmoduleclause yy2)):(_, (YYNTdocsO yy1)):yyvs) =  do { yyr <- reduce1 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTmodule yyr, yyvs)};
private yyprod1 yyvals = yybadprod 1 yyvals;
private yyprod2 ((_, (YYTok yy6)):(_, (YYNTdefinitions yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTmoduleclause yy2)):(_, (YYNTdocsO yy1)):yyvs) =  do { yyr <- reduce2 yy1 yy2 yy3 yy4 yy5 yy6 ;YYM.pure (YYNTmodule yyr, yyvs)};
private yyprod2 yyvals = yybadprod 2 yyvals;
private yyprod3 ((_, (YYTok yy4)):(_, (YYNTdefinitions yy3)):(_, (YYTok yy2)):(_, (YYNTdocsO yy1)):yyvs) =  do { yyr <- reduce3 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTmodule yyr, yyvs)};
private yyprod3 yyvals = yybadprod 3 yyvals;
private yyprod4 ((_, (YYNTrawnativename yy1)):yyvs) =  do { yyr <- reduce4 yy1 ;YYM.pure (YYNTnativename yyr, yyvs)};
private yyprod4 yyvals = yybadprod 4 yyvals;
private yyprod5 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce5 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod5 yyvals = yybadprod 5 yyvals;
private yyprod6 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce6 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod6 yyvals = yybadprod 6 yyvals;
private yyprod7 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce7 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod7 yyvals = yybadprod 7 yyvals;
private yyprod8 ((_, (YYNTrawnativename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce8 yy1 yy2 yy3}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod8 yyvals = yybadprod 8 yyvals;
private yyprod9 ((_, (YYNTrawnativename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce9 yy1 yy2 yy3}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod9 yyvals = yybadprod 9 yyvals;
private yyprod10 ((_, (YYNTrawnativename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce10 yy1 yy2}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod10 yyvals = yybadprod 10 yyvals;
private yyprod11 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce11 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod11 yyvals = yybadprod 11 yyvals;
private yyprod12 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce12 yy1 ;YYM.pure (YYNTmodulename1 yyr, yyvs)};
private yyprod12 yyvals = yybadprod 12 yyvals;
private yyprod13 ((_, (YYNTmodulename1 yy3)):(_, (YYTok yy2)):(_, (YYNTvaridkw yy1)):yyvs) =  do { let {!yyr = reduce13 yy1 yy2 yy3}; YYM.pure (YYNTmodulename1 yyr, yyvs)};
private yyprod13 yyvals = yybadprod 13 yyvals;
private yyprod14 ((_, (YYNTmodulename1 yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce14 yy1 yy2}; YYM.pure (YYNTmodulename1 yyr, yyvs)};
private yyprod14 yyvals = yybadprod 14 yyvals;
private yyprod15 ((_, (YYNTmodulename1 yy1)):yyvs) =  do { let {!yyr = reduce15 yy1}; YYM.pure (YYNTmodulename yyr, yyvs)};
private yyprod15 yyvals = yybadprod 15 yyvals;
private yyprod16 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce16 yy1}; YYM.pure (YYNTdocs yyr, yyvs)};
private yyprod16 yyvals = yybadprod 16 yyvals;
private yyprod17 ((_, (YYNTdocs yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce17 yy1 yy2}; YYM.pure (YYNTdocs yyr, yyvs)};
private yyprod17 yyvals = yybadprod 17 yyvals;
private yyprod18 yyvs =  do { let {!yyr = reduce18 }; YYM.pure (YYNTdocsO yyr, yyvs)};
private yyprod19 ((_, (YYNTdocs yy1)):yyvs) =  do { let {!yyr = reduce19 yy1}; YYM.pure (YYNTdocsO yyr, yyvs)};
private yyprod19 yyvals = yybadprod 19 yyvals;
private yyprod20 ((_, (YYNTmodulename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce20 yy1 yy2}; YYM.pure (YYNTmoduleclause yyr, yyvs)};
private yyprod20 yyvals = yybadprod 20 yyvals;
private yyprod21 ((_, (YYNTmodulename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce21 yy1 yy2 yy3 ;YYM.pure (YYNTmoduleclause yyr, yyvs)};
private yyprod21 yyvals = yybadprod 21 yyvals;
private yyprod22 ((_, (YYTok yy5)):(_, (YYNTqvarids yy4)):(_, (YYTok yy3)):(_, (YYNTwords yy2)):(_, (YYNTmoduleclause yy1)):yyvs) =  do { yyr <- reduce22 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTmoduleclause yyr, yyvs)};
private yyprod22 yyvals = yybadprod 22 yyvals;
private yyprod23 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce23 yy1}; YYM.pure (YYNTword yyr, yyvs)};
private yyprod23 yyvals = yybadprod 23 yyvals;
private yyprod24 ((_, (YYNTword yy1)):yyvs) =  do { let {!yyr = reduce24 yy1}; YYM.pure (YYNTwords yyr, yyvs)};
private yyprod24 yyvals = yybadprod 24 yyvals;
private yyprod25 ((_, (YYNTwords yy2)):(_, (YYNTword yy1)):yyvs) =  do { let {!yyr = reduce25 yy1 yy2}; YYM.pure (YYNTwords yyr, yyvs)};
private yyprod25 yyvals = yybadprod 25 yyvals;
private yyprod26 ((_, (YYNTdefinition yy1)):yyvs) = YYM.pure (YYNTdefinitions (yy1), yyvs);
private yyprod26 yyvals = yybadprod 26 yyvals;
private yyprod27 ((_, (YYTok yy2)):(_, (YYNTdefinition yy1)):yyvs) =  do { let {!yyr = reduce27 yy1 yy2}; YYM.pure (YYNTdefinitions yyr, yyvs)};
private yyprod27 yyvals = yybadprod 27 yyvals;
private yyprod28 ((_, (YYNTdefinitions yy3)):(_, (YYTok yy2)):(_, (YYNTdefinition yy1)):yyvs) =  do { let {!yyr = reduce28 yy1 yy2 yy3}; YYM.pure (YYNTdefinitions yyr, yyvs)};
private yyprod28 yyvals = yybadprod 28 yyvals;
private yyprod29 ((_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce29 yy1}; YYM.pure (YYNTdefinition yyr, yyvs)};
private yyprod29 yyvals = yybadprod 29 yyvals;
private yyprod30 ((_, (YYNTtopdefinition yy1)):yyvs) = YYM.pure (YYNTdefinition (yy1), yyvs);
private yyprod30 yyvals = yybadprod 30 yyvals;
private yyprod31 ((_, (YYNTvisibledefinition yy1)):yyvs) = YYM.pure (YYNTdefinition (yy1), yyvs);
private yyprod31 yyvals = yybadprod 31 yyvals;
private yyprod32 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce32 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod32 yyvals = yybadprod 32 yyvals;
private yyprod33 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce33 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod33 yyvals = yybadprod 33 yyvals;
private yyprod34 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce34 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod34 yyvals = yybadprod 34 yyvals;
private yyprod35 ((_, (YYNTdatadef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce35 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod35 yyvals = yybadprod 35 yyvals;
private yyprod36 ((_, (YYNTimport yy1)):yyvs) =  do { let {!yyr = reduce36 yy1}; YYM.pure (YYNTtopdefinition yyr, yyvs)};
private yyprod36 yyvals = yybadprod 36 yyvals;
private yyprod37 ((_, (YYNTinfix yy1)):yyvs) =  do { let {!yyr = reduce37 yy1}; YYM.pure (YYNTtopdefinition yyr, yyvs)};
private yyprod37 yyvals = yybadprod 37 yyvals;
private yyprod38 ((_, (YYNTmoduledefinition yy1)):yyvs) =  do { let {!yyr = reduce38 yy1}; YYM.pure (YYNTtopdefinition yyr, yyvs)};
private yyprod38 yyvals = yybadprod 38 yyvals;
private yyprod39 ((_, (YYNTpublicdefinition yy1)):yyvs) = YYM.pure (YYNTtopdefinition (yy1), yyvs);
private yyprod39 yyvals = yybadprod 39 yyvals;
private yyprod40 ((_, (YYNTwheretokens yy5)):(_, (YYNTinterfaces yy4)):(_, (YYNTtypeclause yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce40 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTmoduledefinition yyr, yyvs)};
private yyprod40 yyvals = yybadprod 40 yyvals;
private yyprod41 yyvs =  do { let {!yyr = reduce41 }; YYM.pure (YYNTtypeclause yyr, yyvs)};
private yyprod42 ((_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce42 yy1 yy2}; YYM.pure (YYNTtypeclause yyr, yyvs)};
private yyprod42 yyvals = yybadprod 42 yyvals;
private yyprod43 yyvs =  do { let {!yyr = reduce43 }; YYM.pure (YYNTinterfaces yyr, yyvs)};
private yyprod44 ((_, (YYNTtauSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce44 yy1 yy2}; YYM.pure (YYNTinterfaces yyr, yyvs)};
private yyprod44 yyvals = yybadprod 44 yyvals;
private yyprod45 ((_, (YYTok yy4)):(_, (YYNTjtokens yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce45 yy1 yy2 yy3 yy4}; YYM.pure (YYNTwheretokens yyr, yyvs)};
private yyprod45 yyvals = yybadprod 45 yyvals;
private yyprod46 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce46 yy1 yy2 yy3}; YYM.pure (YYNTwheretokens yyr, yyvs)};
private yyprod46 yyvals = yybadprod 46 yyvals;
private yyprod47 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod47 yyvals = yybadprod 47 yyvals;
private yyprod48 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod48 yyvals = yybadprod 48 yyvals;
private yyprod49 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod49 yyvals = yybadprod 49 yyvals;
private yyprod50 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod50 yyvals = yybadprod 50 yyvals;
private yyprod51 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod51 yyvals = yybadprod 51 yyvals;
private yyprod52 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod52 yyvals = yybadprod 52 yyvals;
private yyprod53 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod53 yyvals = yybadprod 53 yyvals;
private yyprod54 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod54 yyvals = yybadprod 54 yyvals;
private yyprod55 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod55 yyvals = yybadprod 55 yyvals;
private yyprod56 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod56 yyvals = yybadprod 56 yyvals;
private yyprod57 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod57 yyvals = yybadprod 57 yyvals;
private yyprod58 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod58 yyvals = yybadprod 58 yyvals;
private yyprod59 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod59 yyvals = yybadprod 59 yyvals;
private yyprod60 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod60 yyvals = yybadprod 60 yyvals;
private yyprod61 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod61 yyvals = yybadprod 61 yyvals;
private yyprod62 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod62 yyvals = yybadprod 62 yyvals;
private yyprod63 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod63 yyvals = yybadprod 63 yyvals;
private yyprod64 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod64 yyvals = yybadprod 64 yyvals;
private yyprod65 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod65 yyvals = yybadprod 65 yyvals;
private yyprod66 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod66 yyvals = yybadprod 66 yyvals;
private yyprod67 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod67 yyvals = yybadprod 67 yyvals;
private yyprod68 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod68 yyvals = yybadprod 68 yyvals;
private yyprod69 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod69 yyvals = yybadprod 69 yyvals;
private yyprod70 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod70 yyvals = yybadprod 70 yyvals;
private yyprod71 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod71 yyvals = yybadprod 71 yyvals;
private yyprod72 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod72 yyvals = yybadprod 72 yyvals;
private yyprod73 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod73 yyvals = yybadprod 73 yyvals;
private yyprod74 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod74 yyvals = yybadprod 74 yyvals;
private yyprod75 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod75 yyvals = yybadprod 75 yyvals;
private yyprod76 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod76 yyvals = yybadprod 76 yyvals;
private yyprod77 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod77 yyvals = yybadprod 77 yyvals;
private yyprod78 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod78 yyvals = yybadprod 78 yyvals;
private yyprod79 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod79 yyvals = yybadprod 79 yyvals;
private yyprod80 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod80 yyvals = yybadprod 80 yyvals;
private yyprod81 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod81 yyvals = yybadprod 81 yyvals;
private yyprod82 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod82 yyvals = yybadprod 82 yyvals;
private yyprod83 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod83 yyvals = yybadprod 83 yyvals;
private yyprod84 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod84 yyvals = yybadprod 84 yyvals;
private yyprod85 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod85 yyvals = yybadprod 85 yyvals;
private yyprod86 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod86 yyvals = yybadprod 86 yyvals;
private yyprod87 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod87 yyvals = yybadprod 87 yyvals;
private yyprod88 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod88 yyvals = yybadprod 88 yyvals;
private yyprod89 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod89 yyvals = yybadprod 89 yyvals;
private yyprod90 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod90 yyvals = yybadprod 90 yyvals;
private yyprod91 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod91 yyvals = yybadprod 91 yyvals;
private yyprod92 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod92 yyvals = yybadprod 92 yyvals;
private yyprod93 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod93 yyvals = yybadprod 93 yyvals;
private yyprod94 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod94 yyvals = yybadprod 94 yyvals;
private yyprod95 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod95 yyvals = yybadprod 95 yyvals;
private yyprod96 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod96 yyvals = yybadprod 96 yyvals;
private yyprod97 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod97 yyvals = yybadprod 97 yyvals;
private yyprod98 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod98 yyvals = yybadprod 98 yyvals;
private yyprod99 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod99 yyvals = yybadprod 99 yyvals;
private yyprod100 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod100 yyvals = yybadprod 100 yyvals;
private yyprod101 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod101 yyvals = yybadprod 101 yyvals;
private yyprod102 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod102 yyvals = yybadprod 102 yyvals;
private yyprod103 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod103 yyvals = yybadprod 103 yyvals;
private yyprod104 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod104 yyvals = yybadprod 104 yyvals;
private yyprod105 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod105 yyvals = yybadprod 105 yyvals;
private yyprod106 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod106 yyvals = yybadprod 106 yyvals;
private yyprod107 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod107 yyvals = yybadprod 107 yyvals;
private yyprod108 ((_, (YYNTjtoken yy1)):yyvs) =  do { let {!yyr = reduce108 yy1}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod108 yyvals = yybadprod 108 yyvals;
private yyprod109 ((_, (YYNTjtokens yy2)):(_, (YYNTjtoken yy1)):yyvs) =  do { let {!yyr = reduce109 yy1 yy2}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod109 yyvals = yybadprod 109 yyvals;
private yyprod110 ((_, (YYTok yy3)):(_, (YYNTjtokens yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce110 yy1 yy2 yy3}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod110 yyvals = yybadprod 110 yyvals;
private yyprod111 ((_, (YYNTjtokens yy4)):(_, (YYTok yy3)):(_, (YYNTjtokens yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce111 yy1 yy2 yy3 yy4}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod111 yyvals = yybadprod 111 yyvals;
private yyprod112 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce112 yy1 yy2}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod112 yyvals = yybadprod 112 yyvals;
private yyprod113 ((_, (YYNTjtokens yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce113 yy1 yy2 yy3}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod113 yyvals = yybadprod 113 yyvals;
private yyprod114 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce114 yy1}; YYM.pure (YYNTdocumentation yyr, yyvs)};
private yyprod114 yyvals = yybadprod 114 yyvals;
private yyprod115 ((_, (YYNTtypedef yy1)):yyvs) =  do { let {!yyr = reduce115 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod115 yyvals = yybadprod 115 yyvals;
private yyprod116 ((_, (YYNTdatadef yy1)):yyvs) =  do { let {!yyr = reduce116 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod116 yyvals = yybadprod 116 yyvals;
private yyprod117 ((_, (YYNTdatajavadef yy1)):yyvs) =  do { let {!yyr = reduce117 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod117 yyvals = yybadprod 117 yyvals;
private yyprod118 ((_, (YYNTclassdef yy1)):yyvs) =  do { let {!yyr = reduce118 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod118 yyvals = yybadprod 118 yyvals;
private yyprod119 ((_, (YYNTinstdef yy1)):yyvs) =  do { let {!yyr = reduce119 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod119 yyvals = yybadprod 119 yyvals;
private yyprod120 ((_, (YYNTderivedef yy1)):yyvs) =  do { let {!yyr = reduce120 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod120 yyvals = yybadprod 120 yyvals;
private yyprod121 ((_, (YYNTlocaldef yy1)):yyvs) = YYM.pure (YYNTpublicdefinition (yy1), yyvs);
private yyprod121 yyvals = yybadprod 121 yyvals;
private yyprod122 ((_, (YYNTdplocaldef yy1)):yyvs) = YYM.pure (YYNTlocaldefs (yy1), yyvs);
private yyprod122 yyvals = yybadprod 122 yyvals;
private yyprod123 ((_, (YYTok yy2)):(_, (YYNTdplocaldef yy1)):yyvs) =  do { let {!yyr = reduce123 yy1 yy2}; YYM.pure (YYNTlocaldefs yyr, yyvs)};
private yyprod123 yyvals = yybadprod 123 yyvals;
private yyprod124 ((_, (YYNTlocaldefs yy3)):(_, (YYTok yy2)):(_, (YYNTdplocaldef yy1)):yyvs) =  do { let {!yyr = reduce124 yy1 yy2 yy3}; YYM.pure (YYNTlocaldefs yyr, yyvs)};
private yyprod124 yyvals = yybadprod 124 yyvals;
private yyprod125 ((_, (YYNTannotation yy1)):yyvs) =  do { let {!yyr = reduce125 yy1}; YYM.pure (YYNTlocaldef yyr, yyvs)};
private yyprod125 yyvals = yybadprod 125 yyvals;
private yyprod126 ((_, (YYNTnativedef yy1)):yyvs) =  do { let {!yyr = reduce126 yy1}; YYM.pure (YYNTlocaldef yyr, yyvs)};
private yyprod126 yyvals = yybadprod 126 yyvals;
private yyprod127 ((_, (YYNTfundef yy1)):yyvs) =  do { let {!yyr = reduce127 yy1}; YYM.pure (YYNTlocaldef yyr, yyvs)};
private yyprod127 yyvals = yybadprod 127 yyvals;
private yyprod128 ((_, (YYNTlocaldef yy1)):yyvs) = YYM.pure (YYNTplocaldef (yy1), yyvs);
private yyprod128 yyvals = yybadprod 128 yyvals;
private yyprod129 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce129 yy1 yy2}; YYM.pure (YYNTplocaldef yyr, yyvs)};
private yyprod129 yyvals = yybadprod 129 yyvals;
private yyprod130 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce130 yy1 yy2}; YYM.pure (YYNTplocaldef yyr, yyvs)};
private yyprod130 yyvals = yybadprod 130 yyvals;
private yyprod131 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce131 yy1 yy2}; YYM.pure (YYNTplocaldef yyr, yyvs)};
private yyprod131 yyvals = yybadprod 131 yyvals;
private yyprod132 ((_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce132 yy1}; YYM.pure (YYNTdplocaldef yyr, yyvs)};
private yyprod132 yyvals = yybadprod 132 yyvals;
private yyprod133 ((_, (YYNTdplocaldef yy2)):(_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce133 yy1 yy2}; YYM.pure (YYNTdplocaldef yyr, yyvs)};
private yyprod133 yyvals = yybadprod 133 yyvals;
private yyprod134 ((_, (YYNTplocaldef yy1)):yyvs) = YYM.pure (YYNTdplocaldef (yy1), yyvs);
private yyprod134 yyvals = yybadprod 134 yyvals;
private yyprod135 ((_, (YYNTannotation yy1)):yyvs) =  do { let {!yyr = reduce135 yy1}; YYM.pure (YYNTletdef yyr, yyvs)};
private yyprod135 yyvals = yybadprod 135 yyvals;
private yyprod136 ((_, (YYNTfundef yy1)):yyvs) =  do { let {!yyr = reduce136 yy1}; YYM.pure (YYNTletdef yyr, yyvs)};
private yyprod136 yyvals = yybadprod 136 yyvals;
private yyprod137 ((_, (YYNTletdef yy1)):yyvs) = YYM.pure (YYNTletdefs (yy1), yyvs);
private yyprod137 yyvals = yybadprod 137 yyvals;
private yyprod138 ((_, (YYTok yy2)):(_, (YYNTletdef yy1)):yyvs) =  do { let {!yyr = reduce138 yy1 yy2}; YYM.pure (YYNTletdefs yyr, yyvs)};
private yyprod138 yyvals = yybadprod 138 yyvals;
private yyprod139 ((_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYNTletdef yy1)):yyvs) =  do { let {!yyr = reduce139 yy1 yy2 yy3}; YYM.pure (YYNTletdefs yyr, yyvs)};
private yyprod139 yyvals = yybadprod 139 yyvals;
private yyprod140 ((_, (YYNTimportliste yy3)):(_, (YYNTmodulename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce140 yy1 yy2 yy3}; YYM.pure (YYNTimport yyr, yyvs)};
private yyprod140 yyvals = yybadprod 140 yyvals;
private yyprod141 ((_, (YYNTimportliste yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTmodulename yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce141 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTimport yyr, yyvs)};
private yyprod141 yyvals = yybadprod 141 yyvals;
private yyprod142 ((_, (YYNTimportliste yy4)):(_, (YYTok yy3)):(_, (YYNTmodulename yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce142 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTimport yyr, yyvs)};
private yyprod142 yyvals = yybadprod 142 yyvals;
private yyprod143 yyvs =  do { let {!yyr = reduce143 }; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod144 ((_, (YYTok yy4)):(_, (YYNTimportspecs yy3)):(_, (YYTok yy2)):(_, (YYNTvarid yy1)):yyvs) =  do { yyr <- reduce144 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod144 yyvals = yybadprod 144 yyvals;
private yyprod145 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce145 yy1 yy2}; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod145 yyvals = yybadprod 145 yyvals;
private yyprod146 ((_, (YYTok yy3)):(_, (YYNTimportspecs yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce146 yy1 yy2 yy3}; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod146 yyvals = yybadprod 146 yyvals;
private yyprod147 ((_, (YYNTimportliste yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce147 yy1 yy2}; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod147 yyvals = yybadprod 147 yyvals;
private yyprod148 ((_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce148 yy1}; YYM.pure (YYNTimportspecs yyr, yyvs)};
private yyprod148 yyvals = yybadprod 148 yyvals;
private yyprod149 ((_, (YYTok yy2)):(_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce149 yy1 yy2}; YYM.pure (YYNTimportspecs yyr, yyvs)};
private yyprod149 yyvals = yybadprod 149 yyvals;
private yyprod150 ((_, (YYNTimportspecs yy3)):(_, (YYTok yy2)):(_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce150 yy1 yy2 yy3}; YYM.pure (YYNTimportspecs yyr, yyvs)};
private yyprod150 yyvals = yybadprod 150 yyvals;
private yyprod151 ((_, (YYNTqvarid yy1)):yyvs) =  do { let {!yyr = reduce151 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod151 yyvals = yybadprod 151 yyvals;
private yyprod152 ((_, (YYTok yy4)):(_, (YYNTmemspecs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce152 yy1 yy2 yy3 yy4}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod152 yyvals = yybadprod 152 yyvals;
private yyprod153 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce153 yy1 yy2 yy3}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod153 yyvals = yybadprod 153 yyvals;
private yyprod154 ((_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce154 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod154 yyvals = yybadprod 154 yyvals;
private yyprod155 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce155 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod155 yyvals = yybadprod 155 yyvals;
private yyprod156 ((_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce156 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod156 yyvals = yybadprod 156 yyvals;
private yyprod157 ((_, (YYNTimportitem yy1)):yyvs) =  do { let {!yyr = reduce157 yy1}; YYM.pure (YYNTimportspec yyr, yyvs)};
private yyprod157 yyvals = yybadprod 157 yyvals;
private yyprod158 ((_, (YYNTalias yy2)):(_, (YYNTimportitem yy1)):yyvs) =  do { let {!yyr = reduce158 yy1 yy2}; YYM.pure (YYNTimportspec yyr, yyvs)};
private yyprod158 yyvals = yybadprod 158 yyvals;
private yyprod159 ((_, (YYNTimportspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce159 yy1 yy2}; YYM.pure (YYNTimportspec yyr, yyvs)};
private yyprod159 yyvals = yybadprod 159 yyvals;
private yyprod160 ((_, (YYNTalias yy1)):yyvs) =  do { let {!yyr = reduce160 yy1}; YYM.pure (YYNTmemspec yyr, yyvs)};
private yyprod160 yyvals = yybadprod 160 yyvals;
private yyprod161 ((_, (YYNTalias yy2)):(_, (YYNTalias yy1)):yyvs) =  do { let {!yyr = reduce161 yy1 yy2}; YYM.pure (YYNTmemspec yyr, yyvs)};
private yyprod161 yyvals = yybadprod 161 yyvals;
private yyprod162 ((_, (YYNTmemspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce162 yy1 yy2}; YYM.pure (YYNTmemspec yyr, yyvs)};
private yyprod162 yyvals = yybadprod 162 yyvals;
private yyprod163 ((_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce163 yy1}; YYM.pure (YYNTmemspecs yyr, yyvs)};
private yyprod163 yyvals = yybadprod 163 yyvals;
private yyprod164 ((_, (YYTok yy2)):(_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce164 yy1 yy2}; YYM.pure (YYNTmemspecs yyr, yyvs)};
private yyprod164 yyvals = yybadprod 164 yyvals;
private yyprod165 ((_, (YYNTmemspecs yy3)):(_, (YYTok yy2)):(_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce165 yy1 yy2 yy3}; YYM.pure (YYNTmemspecs yyr, yyvs)};
private yyprod165 yyvals = yybadprod 165 yyvals;
private yyprod166 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTalias (yy1), yyvs);
private yyprod166 yyvals = yybadprod 166 yyvals;
private yyprod167 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTalias (yy1), yyvs);
private yyprod167 yyvals = yybadprod 167 yyvals;
private yyprod168 ((_, (YYNToperator yy1)):yyvs) =  do { yyr <- reduce168 yy1 ;YYM.pure (YYNTalias yyr, yyvs)};
private yyprod168 yyvals = yybadprod 168 yyvals;
private yyprod169 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTvarid (yy1), yyvs);
private yyprod169 yyvals = yybadprod 169 yyvals;
private yyprod170 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTvaridkw (yy1), yyvs);
private yyprod170 yyvals = yybadprod 170 yyvals;
private yyprod171 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce171 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod171 yyvals = yybadprod 171 yyvals;
private yyprod172 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce172 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod172 yyvals = yybadprod 172 yyvals;
private yyprod173 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce173 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod173 yyvals = yybadprod 173 yyvals;
private yyprod174 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce174 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod174 yyvals = yybadprod 174 yyvals;
private yyprod175 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce175 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod175 yyvals = yybadprod 175 yyvals;
private yyprod176 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce176 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod176 yyvals = yybadprod 176 yyvals;
private yyprod177 ((_, (YYNTqvarop yy1)):yyvs) =  do { let {!yyr = reduce177 yy1}; YYM.pure (YYNTqvarids yyr, yyvs)};
private yyprod177 yyvals = yybadprod 177 yyvals;
private yyprod178 ((_, (YYNTqvarids yy3)):(_, (YYTok yy2)):(_, (YYNTqvarop yy1)):yyvs) =  do { let {!yyr = reduce178 yy1 yy2 yy3}; YYM.pure (YYNTqvarids yyr, yyvs)};
private yyprod178 yyvals = yybadprod 178 yyvals;
private yyprod179 ((_, (YYNTvarop yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce179 yy1 yy2 yy3}; YYM.pure (YYNTqvarid yyr, yyvs)};
private yyprod179 yyvals = yybadprod 179 yyvals;
private yyprod180 ((_, (YYNTvarop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce180 yy1 yy2}; YYM.pure (YYNTqvarid yyr, yyvs)};
private yyprod180 yyvals = yybadprod 180 yyvals;
private yyprod181 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce181 yy1}; YYM.pure (YYNTqvarid yyr, yyvs)};
private yyprod181 yyvals = yybadprod 181 yyvals;
private yyprod182 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce182 yy1 yy2 yy3}; YYM.pure (YYNTqconid yyr, yyvs)};
private yyprod182 yyvals = yybadprod 182 yyvals;
private yyprod183 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce183 yy1 yy2}; YYM.pure (YYNTqconid yyr, yyvs)};
private yyprod183 yyvals = yybadprod 183 yyvals;
private yyprod184 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce184 yy1}; YYM.pure (YYNTqconid yyr, yyvs)};
private yyprod184 yyvals = yybadprod 184 yyvals;
private yyprod185 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTvarop (yy1), yyvs);
private yyprod185 yyvals = yybadprod 185 yyvals;
private yyprod186 ((_, (YYNTunop yy1)):yyvs) = YYM.pure (YYNTvarop (yy1), yyvs);
private yyprod186 yyvals = yybadprod 186 yyvals;
private yyprod187 ((_, (YYNTvarop yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce187 yy1 yy2 yy3}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod187 yyvals = yybadprod 187 yyvals;
private yyprod188 ((_, (YYNTvarop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce188 yy1 yy2}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod188 yyvals = yybadprod 188 yyvals;
private yyprod189 ((_, (YYNTvarop yy1)):yyvs) =  do { let {!yyr = reduce189 yy1}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod189 yyvals = yybadprod 189 yyvals;
private yyprod190 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce190 yy1}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod190 yyvals = yybadprod 190 yyvals;
private yyprod191 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNToperator (yy1), yyvs);
private yyprod191 yyvals = yybadprod 191 yyvals;
private yyprod192 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTunop (yy1), yyvs);
private yyprod192 yyvals = yybadprod 192 yyvals;
private yyprod193 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTunop (yy1), yyvs);
private yyprod193 yyvals = yybadprod 193 yyvals;
private yyprod194 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce194 yy1 yy2 ;YYM.pure (YYNTfixity yyr, yyvs)};
private yyprod194 yyvals = yybadprod 194 yyvals;
private yyprod195 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce195 yy1 yy2 ;YYM.pure (YYNTfixity yyr, yyvs)};
private yyprod195 yyvals = yybadprod 195 yyvals;
private yyprod196 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce196 yy1 yy2 ;YYM.pure (YYNTfixity yyr, yyvs)};
private yyprod196 yyvals = yybadprod 196 yyvals;
private yyprod197 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce197 yy1}; YYM.pure (YYNTopstring yyr, yyvs)};
private yyprod197 yyvals = yybadprod 197 yyvals;
private yyprod198 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce198 yy1}; YYM.pure (YYNTopstring yyr, yyvs)};
private yyprod198 yyvals = yybadprod 198 yyvals;
private yyprod199 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce199 yy1}; YYM.pure (YYNTopstring yyr, yyvs)};
private yyprod199 yyvals = yybadprod 199 yyvals;
private yyprod200 ((_, (YYNTopstring yy1)):yyvs) =  do { let {!yyr = reduce200 yy1}; YYM.pure (YYNToperators yyr, yyvs)};
private yyprod200 yyvals = yybadprod 200 yyvals;
private yyprod201 ((_, (YYNToperators yy2)):(_, (YYNTopstring yy1)):yyvs) =  do { let {!yyr = reduce201 yy1 yy2}; YYM.pure (YYNToperators yyr, yyvs)};
private yyprod201 yyvals = yybadprod 201 yyvals;
private yyprod202 ((_, (YYNToperators yy2)):(_, (YYNTfixity yy1)):yyvs) =  do { let {!yyr = reduce202 yy1 yy2}; YYM.pure (YYNTinfix yyr, yyvs)};
private yyprod202 yyvals = yybadprod 202 yyvals;
private yyprod203 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTannoitems yy1)):yyvs) =  do { let {!yyr = reduce203 yy1 yy2 yy3}; YYM.pure (YYNTannotation yyr, yyvs)};
private yyprod203 yyvals = yybadprod 203 yyvals;
private yyprod204 ((_, (YYNTvarid yy1)):yyvs) = YYM.pure (YYNTannoitem (yy1), yyvs);
private yyprod204 yyvals = yybadprod 204 yyvals;
private yyprod205 ((_, (YYTok yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce205 yy1 yy2 yy3 ;YYM.pure (YYNTannoitem yyr, yyvs)};
private yyprod205 yyvals = yybadprod 205 yyvals;
private yyprod206 ((_, (YYTok yy3)):(_, (YYNTunop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce206 yy1 yy2 yy3}; YYM.pure (YYNTannoitem yyr, yyvs)};
private yyprod206 yyvals = yybadprod 206 yyvals;
private yyprod207 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce207 yy1 yy2 yy3}; YYM.pure (YYNTannoitem yyr, yyvs)};
private yyprod207 yyvals = yybadprod 207 yyvals;
private yyprod208 ((_, (YYNTannoitem yy1)):yyvs) =  do { let {!yyr = reduce208 yy1}; YYM.pure (YYNTannoitems yyr, yyvs)};
private yyprod208 yyvals = yybadprod 208 yyvals;
private yyprod209 ((_, (YYNTannoitems yy3)):(_, (YYTok yy2)):(_, (YYNTannoitem yy1)):yyvs) =  do { let {!yyr = reduce209 yy1 yy2 yy3}; YYM.pure (YYNTannoitems yyr, yyvs)};
private yyprod209 yyvals = yybadprod 209 yyvals;
private yyprod210 ((_, (YYNTimpurenativedef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce210 yy1 yy2}; YYM.pure (YYNTnativedef yyr, yyvs)};
private yyprod210 yyvals = yybadprod 210 yyvals;
private yyprod211 ((_, (YYNTimpurenativedef yy1)):yyvs) = YYM.pure (YYNTnativedef (yy1), yyvs);
private yyprod211 yyvals = yybadprod 211 yyvals;
private yyprod212 ((_, (YYNTannoitem yy1)):yyvs) = YYM.pure (YYNTfitem (yy1), yyvs);
private yyprod212 yyvals = yybadprod 212 yyvals;
private yyprod213 ((_, (YYNTunop yy1)):yyvs) = YYM.pure (YYNTfitem (yy1), yyvs);
private yyprod213 yyvals = yybadprod 213 yyvals;
private yyprod214 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTfitem (yy1), yyvs);
private yyprod214 yyvals = yybadprod 214 yyvals;
private yyprod215 ((_, (YYNToperator yy1)):yyvs) =  do { yyr <- reduce215 yy1 ;YYM.pure (YYNTfitem yyr, yyvs)};
private yyprod215 yyvals = yybadprod 215 yyvals;
private yyprod216 ((_, (YYNTnativename yy1)):yyvs) = YYM.pure (YYNTjitem (yy1), yyvs);
private yyprod216 yyvals = yybadprod 216 yyvals;
private yyprod217 ((_, (YYNToperator yy1)):yyvs) =  do { yyr <- reduce217 yy1 ;YYM.pure (YYNTjitem yyr, yyvs)};
private yyprod217 yyvals = yybadprod 217 yyvals;
private yyprod218 ((_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce218 yy1}; YYM.pure (YYNTjitem yyr, yyvs)};
private yyprod218 yyvals = yybadprod 218 yyvals;
private yyprod219 ((_, (YYNTgargs yy3)):(_, (YYNTjitem yy2)):(_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce219 yy1 yy2 yy3}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod219 yyvals = yybadprod 219 yyvals;
private yyprod220 ((_, (YYNTjitem yy2)):(_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce220 yy1 yy2}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod220 yyvals = yybadprod 220 yyvals;
private yyprod221 ((_, (YYNTgargs yy2)):(_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce221 yy1 yy2}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod221 yyvals = yybadprod 221 yyvals;
private yyprod222 ((_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce222 yy1}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod222 yyvals = yybadprod 222 yyvals;
private yyprod223 ((_, (YYNTtauSC yy3)):(_, (YYTok yy2)):(_, (YYNTsigma yy1)):yyvs) =  do { let {!yyr = reduce223 yy1 yy2 yy3}; YYM.pure (YYNTsigex yyr, yyvs)};
private yyprod223 yyvals = yybadprod 223 yyvals;
private yyprod224 ((_, (YYNTsigma yy1)):yyvs) =  do { let {!yyr = reduce224 yy1}; YYM.pure (YYNTsigex yyr, yyvs)};
private yyprod224 yyvals = yybadprod 224 yyvals;
private yyprod225 ((_, (YYNTsigex yy1)):yyvs) =  do { let {!yyr = reduce225 yy1}; YYM.pure (YYNTsigexs yyr, yyvs)};
private yyprod225 yyvals = yybadprod 225 yyvals;
private yyprod226 ((_, (YYNTsigexs yy3)):(_, (YYTok yy2)):(_, (YYNTsigex yy1)):yyvs) =  do { let {!yyr = reduce226 yy1 yy2 yy3}; YYM.pure (YYNTsigexs yyr, yyvs)};
private yyprod226 yyvals = yybadprod 226 yyvals;
private yyprod227 ((_, (YYNTsigexs yy4)):(_, (YYTok yy3)):(_, (YYNTmethodspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce227 yy1 yy2 yy3 yy4}; YYM.pure (YYNTimpurenativedef yyr, yyvs)};
private yyprod227 yyvals = yybadprod 227 yyvals;
private yyprod228 ((_, (YYNTforall yy1)):yyvs) = YYM.pure (YYNTsigma (yy1), yyvs);
private yyprod228 yyvals = yybadprod 228 yyvals;
private yyprod229 ((_, (YYNTrho yy1)):yyvs) =  do { let {!yyr = reduce229 yy1}; YYM.pure (YYNTsigma yyr, yyvs)};
private yyprod229 yyvals = yybadprod 229 yyvals;
private yyprod230 ((_, (YYNTrho yy4)):(_, (YYNTmbdot yy3)):(_, (YYNTdvars yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce230 yy1 yy2 yy3 yy4}; YYM.pure (YYNTforall yyr, yyvs)};
private yyprod230 yyvals = yybadprod 230 yyvals;
private yyprod231 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTmbdot (yy1), yyvs);
private yyprod231 yyvals = yybadprod 231 yyvals;
private yyprod232 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce232 yy1 ;YYM.pure (YYNTmbdot yyr, yyvs)};
private yyprod232 yyvals = yybadprod 232 yyvals;
private yyprod233 ((_, (YYNTrhofun yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { yyr <- reduce233 yy1 yy2 yy3 ;YYM.pure (YYNTrho yyr, yyvs)};
private yyprod233 yyvals = yybadprod 233 yyvals;
private yyprod234 ((_, (YYNTrhofun yy1)):yyvs) = YYM.pure (YYNTrho (yy1), yyvs);
private yyprod234 yyvals = yybadprod 234 yyvals;
private yyprod235 ((_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce235 yy1}; YYM.pure (YYNTrhofun yyr, yyvs)};
private yyprod235 yyvals = yybadprod 235 yyvals;
private yyprod236 ((_, (YYNTrhofun yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce236 yy1 yy2 yy3}; YYM.pure (YYNTrhofun yyr, yyvs)};
private yyprod236 yyvals = yybadprod 236 yyvals;
private yyprod237 ((_, (YYNTtapp yy1)):yyvs) = YYM.pure (YYNTtau (yy1), yyvs);
private yyprod237 yyvals = yybadprod 237 yyvals;
private yyprod238 ((_, (YYNTforall yy1)):yyvs) =  do { let {!yyr = reduce238 yy1}; YYM.pure (YYNTtau yyr, yyvs)};
private yyprod238 yyvals = yybadprod 238 yyvals;
private yyprod239 ((_, (YYNTtau yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce239 yy1 yy2 yy3}; YYM.pure (YYNTtau yyr, yyvs)};
private yyprod239 yyvals = yybadprod 239 yyvals;
private yyprod240 ((_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce240 yy1}; YYM.pure (YYNTtauSC yyr, yyvs)};
private yyprod240 yyvals = yybadprod 240 yyvals;
private yyprod241 ((_, (YYNTtauSC yy3)):(_, (YYTok yy2)):(_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce241 yy1 yy2 yy3}; YYM.pure (YYNTtauSC yyr, yyvs)};
private yyprod241 yyvals = yybadprod 241 yyvals;
private yyprod242 ((_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce242 yy1}; YYM.pure (YYNTtauSB yyr, yyvs)};
private yyprod242 yyvals = yybadprod 242 yyvals;
private yyprod243 ((_, (YYNTtauSB yy3)):(_, (YYTok yy2)):(_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce243 yy1 yy2 yy3}; YYM.pure (YYNTtauSB yyr, yyvs)};
private yyprod243 yyvals = yybadprod 243 yyvals;
private yyprod244 ((_, (YYNTsimpletypes yy1)):yyvs) =  do { let {!yyr = reduce244 yy1}; YYM.pure (YYNTtapp yyr, yyvs)};
private yyprod244 yyvals = yybadprod 244 yyvals;
private yyprod245 ((_, (YYNTtyvar yy1)):yyvs) = YYM.pure (YYNTsimpletype (yy1), yyvs);
private yyprod245 yyvals = yybadprod 245 yyvals;
private yyprod246 ((_, (YYNTtyname yy1)):yyvs) =  do { let {!yyr = reduce246 yy1}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod246 yyvals = yybadprod 246 yyvals;
private yyprod247 ((_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce247 yy1 yy2 yy3}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod247 yyvals = yybadprod 247 yyvals;
private yyprod248 ((_, (YYTok yy5)):(_, (YYNTtauSC yy4)):(_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce248 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod248 yyvals = yybadprod 248 yyvals;
private yyprod249 ((_, (YYTok yy5)):(_, (YYNTtauSB yy4)):(_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce249 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod249 yyvals = yybadprod 249 yyvals;
private yyprod250 ((_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce250 yy1 yy2 yy3}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod250 yyvals = yybadprod 250 yyvals;
private yyprod251 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce251 yy1}; YYM.pure (YYNTtyvar yyr, yyvs)};
private yyprod251 yyvals = yybadprod 251 yyvals;
private yyprod252 ((_, (YYTok yy5)):(_, (YYNTkind yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce252 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTtyvar yyr, yyvs)};
private yyprod252 yyvals = yybadprod 252 yyvals;
private yyprod253 ((_, (YYTok yy5)):(_, (YYNTtauSC yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce253 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTtyvar yyr, yyvs)};
private yyprod253 yyvals = yybadprod 253 yyvals;
private yyprod254 ((_, (YYTok yy4)):(_, (YYNTtauSC yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce254 yy1 yy2 yy3 yy4}; YYM.pure (YYNTtyvar yyr, yyvs)};
private yyprod254 yyvals = yybadprod 254 yyvals;
private yyprod255 ((_, (YYTok yy4)):(_, (YYNTtapp yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce255 yy1 yy2 yy3 yy4}; YYM.pure (YYNTtyvar yyr, yyvs)};
private yyprod255 yyvals = yybadprod 255 yyvals;
private yyprod256 ((_, (YYNTqconid yy1)):yyvs) = YYM.pure (YYNTtyname (yy1), yyvs);
private yyprod256 yyvals = yybadprod 256 yyvals;
private yyprod257 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce257 yy1 yy2}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod257 yyvals = yybadprod 257 yyvals;
private yyprod258 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce258 yy1 yy2}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod258 yyvals = yybadprod 258 yyvals;
private yyprod259 ((_, (YYTok yy3)):(_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce259 yy1 yy2 yy3}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod259 yyvals = yybadprod 259 yyvals;
private yyprod260 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce260 yy1 yy2 yy3}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod260 yyvals = yybadprod 260 yyvals;
private yyprod261 ((_, (YYNTkind yy3)):(_, (YYTok yy2)):(_, (YYNTsimplekind yy1)):yyvs) =  do { let {!yyr = reduce261 yy1 yy2 yy3}; YYM.pure (YYNTkind yyr, yyvs)};
private yyprod261 yyvals = yybadprod 261 yyvals;
private yyprod262 ((_, (YYNTsimplekind yy1)):yyvs) = YYM.pure (YYNTkind (yy1), yyvs);
private yyprod262 yyvals = yybadprod 262 yyvals;
private yyprod263 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce263 yy1 ;YYM.pure (YYNTsimplekind yyr, yyvs)};
private yyprod263 yyvals = yybadprod 263 yyvals;
private yyprod264 ((_, (YYTok yy3)):(_, (YYNTkind yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce264 yy1 yy2 yy3}; YYM.pure (YYNTsimplekind yyr, yyvs)};
private yyprod264 yyvals = yybadprod 264 yyvals;
private yyprod265 ((_, (YYNTtyvar yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce265 yy1 yy2}; YYM.pure (YYNTscontext yyr, yyvs)};
private yyprod265 yyvals = yybadprod 265 yyvals;
private yyprod266 ((_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce266 yy1}; YYM.pure (YYNTscontexts yyr, yyvs)};
private yyprod266 yyvals = yybadprod 266 yyvals;
private yyprod267 ((_, (YYTok yy2)):(_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce267 yy1 yy2}; YYM.pure (YYNTscontexts yyr, yyvs)};
private yyprod267 yyvals = yybadprod 267 yyvals;
private yyprod268 ((_, (YYNTscontexts yy3)):(_, (YYTok yy2)):(_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce268 yy1 yy2 yy3}; YYM.pure (YYNTscontexts yyr, yyvs)};
private yyprod268 yyvals = yybadprod 268 yyvals;
private yyprod269 ((_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce269 yy1}; YYM.pure (YYNTccontext yyr, yyvs)};
private yyprod269 yyvals = yybadprod 269 yyvals;
private yyprod270 ((_, (YYTok yy3)):(_, (YYNTscontexts yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce270 yy1 yy2 yy3}; YYM.pure (YYNTccontext yyr, yyvs)};
private yyprod270 yyvals = yybadprod 270 yyvals;
private yyprod271 ((_, (YYNTwheredef yy6)):(_, (YYNTtyvar yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTccontext yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce271 yy1 yy2 yy3 yy4 yy5 yy6 ;YYM.pure (YYNTclassdef yyr, yyvs)};
private yyprod271 yyvals = yybadprod 271 yyvals;
private yyprod272 ((_, (YYNTwheredef yy3)):(_, (YYNTccontext yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce272 yy1 yy2 yy3 ;YYM.pure (YYNTclassdef yyr, yyvs)};
private yyprod272 yyvals = yybadprod 272 yyvals;
private yyprod273 ((_, (YYNTsimpletype yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce273 yy1 yy2}; YYM.pure (YYNTsicontext yyr, yyvs)};
private yyprod273 yyvals = yybadprod 273 yyvals;
private yyprod274 ((_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce274 yy1}; YYM.pure (YYNTsicontexts yyr, yyvs)};
private yyprod274 yyvals = yybadprod 274 yyvals;
private yyprod275 ((_, (YYTok yy2)):(_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce275 yy1 yy2}; YYM.pure (YYNTsicontexts yyr, yyvs)};
private yyprod275 yyvals = yybadprod 275 yyvals;
private yyprod276 ((_, (YYNTsicontexts yy3)):(_, (YYTok yy2)):(_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce276 yy1 yy2 yy3}; YYM.pure (YYNTsicontexts yyr, yyvs)};
private yyprod276 yyvals = yybadprod 276 yyvals;
private yyprod277 ((_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce277 yy1}; YYM.pure (YYNTicontext yyr, yyvs)};
private yyprod277 yyvals = yybadprod 277 yyvals;
private yyprod278 ((_, (YYTok yy3)):(_, (YYNTsicontexts yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce278 yy1 yy2 yy3}; YYM.pure (YYNTicontext yyr, yyvs)};
private yyprod278 yyvals = yybadprod 278 yyvals;
private yyprod279 ((_, (YYNTsimpletype yy4)):(_, (YYNTtyname yy3)):(_, (YYTok yy2)):(_, (YYNTicontext yy1)):yyvs) =  do { let {!yyr = reduce279 yy1 yy2 yy3 yy4}; YYM.pure (YYNTinsthead yyr, yyvs)};
private yyprod279 yyvals = yybadprod 279 yyvals;
private yyprod280 ((_, (YYNTicontext yy1)):yyvs) =  do { yyr <- reduce280 yy1 ;YYM.pure (YYNTinsthead yyr, yyvs)};
private yyprod280 yyvals = yybadprod 280 yyvals;
private yyprod281 ((_, (YYNTwheredef yy3)):(_, (YYNTinsthead yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce281 yy1 yy2 yy3}; YYM.pure (YYNTinstdef yyr, yyvs)};
private yyprod281 yyvals = yybadprod 281 yyvals;
private yyprod282 ((_, (YYNTinsthead yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce282 yy1 yy2}; YYM.pure (YYNTderivedef yyr, yyvs)};
private yyprod282 yyvals = yybadprod 282 yyvals;
private yyprod283 ((_, (YYNTwheredef yy2)):(_, (YYNTdatainit yy1)):yyvs) =  do { let {!yyr = reduce283 yy1 yy2}; YYM.pure (YYNTdatadef yyr, yyvs)};
private yyprod283 yyvals = yybadprod 283 yyvals;
private yyprod284 ((_, (YYNTwheredef yy2)):(_, (YYNTdatajavainit yy1)):yyvs) =  do { let {!yyr = reduce284 yy1 yy2}; YYM.pure (YYNTdatajavadef yyr, yyvs)};
private yyprod284 yyvals = yybadprod 284 yyvals;
private yyprod285 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce285 yy1 yy2}; YYM.pure (YYNTnativepur yyr, yyvs)};
private yyprod285 yyvals = yybadprod 285 yyvals;
private yyprod286 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce286 yy1}; YYM.pure (YYNTnativepur yyr, yyvs)};
private yyprod286 yyvals = yybadprod 286 yyvals;
private yyprod287 ((_, (YYNTnativename yy1)):yyvs) =  do { let {!yyr = reduce287 yy1}; YYM.pure (YYNTnativespec yyr, yyvs)};
private yyprod287 yyvals = yybadprod 287 yyvals;
private yyprod288 ((_, (YYNTgargs yy2)):(_, (YYNTnativename yy1)):yyvs) =  do { let {!yyr = reduce288 yy1 yy2}; YYM.pure (YYNTnativespec yyr, yyvs)};
private yyprod288 yyvals = yybadprod 288 yyvals;
private yyprod289 ((_, (YYTok yy3)):(_, (YYNTtauSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce289 yy1 yy2 yy3}; YYM.pure (YYNTgargs yyr, yyvs)};
private yyprod289 yyvals = yybadprod 289 yyvals;
private yyprod290 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce290 yy1 yy2}; YYM.pure (YYNTgargs yyr, yyvs)};
private yyprod290 yyvals = yybadprod 290 yyvals;
private yyprod291 ((_, (YYNTdalts yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce291 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod291 yyvals = yybadprod 291 yyvals;
private yyprod292 ((_, (YYNTdalts yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce292 yy1 yy2 yy3 yy4}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod292 yyvals = yybadprod 292 yyvals;
private yyprod293 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce293 yy1 yy2}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod293 yyvals = yybadprod 293 yyvals;
private yyprod294 ((_, (YYNTdalt yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce294 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod294 yyvals = yybadprod 294 yyvals;
private yyprod295 ((_, (YYNTdalt yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce295 yy1 yy2 yy3 yy4}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod295 yyvals = yybadprod 295 yyvals;
private yyprod296 ((_, (YYNTnativespec yy5)):(_, (YYNTnativepur yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce296 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTdatajavainit yyr, yyvs)};
private yyprod296 yyvals = yybadprod 296 yyvals;
private yyprod297 ((_, (YYNTnativespec yy6)):(_, (YYNTnativepur yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce297 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTdatajavainit yyr, yyvs)};
private yyprod297 yyvals = yybadprod 297 yyvals;
private yyprod298 ((_, (YYNTtyvar yy1)):yyvs) =  do { let {!yyr = reduce298 yy1}; YYM.pure (YYNTdvars yyr, yyvs)};
private yyprod298 yyvals = yybadprod 298 yyvals;
private yyprod299 ((_, (YYNTdvars yy2)):(_, (YYNTtyvar yy1)):yyvs) =  do { let {!yyr = reduce299 yy1 yy2}; YYM.pure (YYNTdvars yyr, yyvs)};
private yyprod299 yyvals = yybadprod 299 yyvals;
private yyprod300 ((_, (YYNTdalt yy1)):yyvs) =  do { let {!yyr = reduce300 yy1}; YYM.pure (YYNTdalts yyr, yyvs)};
private yyprod300 yyvals = yybadprod 300 yyvals;
private yyprod301 ((_, (YYNTdalts yy3)):(_, (YYTok yy2)):(_, (YYNTdalt yy1)):yyvs) =  do { let {!yyr = reduce301 yy1 yy2 yy3}; YYM.pure (YYNTdalts yyr, yyvs)};
private yyprod301 yyvals = yybadprod 301 yyvals;
private yyprod302 ((_, (YYNTvisdalt yy1)):yyvs) = YYM.pure (YYNTdalt (yy1), yyvs);
private yyprod302 yyvals = yybadprod 302 yyvals;
private yyprod303 ((_, (YYTok yy2)):(_, (YYNTvisdalt yy1)):yyvs) =  do { let {!yyr = reduce303 yy1 yy2}; YYM.pure (YYNTdalt yyr, yyvs)};
private yyprod303 yyvals = yybadprod 303 yyvals;
private yyprod304 ((_, (YYNTvisdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce304 yy1 yy2}; YYM.pure (YYNTdalt yyr, yyvs)};
private yyprod304 yyvals = yybadprod 304 yyvals;
private yyprod305 ((_, (YYNTstrictdalt yy1)):yyvs) = YYM.pure (YYNTvisdalt (yy1), yyvs);
private yyprod305 yyvals = yybadprod 305 yyvals;
private yyprod306 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce306 yy1 yy2}; YYM.pure (YYNTvisdalt yyr, yyvs)};
private yyprod306 yyvals = yybadprod 306 yyvals;
private yyprod307 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce307 yy1 yy2}; YYM.pure (YYNTvisdalt yyr, yyvs)};
private yyprod307 yyvals = yybadprod 307 yyvals;
private yyprod308 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce308 yy1 yy2}; YYM.pure (YYNTvisdalt yyr, yyvs)};
private yyprod308 yyvals = yybadprod 308 yyvals;
private yyprod309 ((_, (YYNTsimpledalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce309 yy1 yy2}; YYM.pure (YYNTstrictdalt yyr, yyvs)};
private yyprod309 yyvals = yybadprod 309 yyvals;
private yyprod310 ((_, (YYNTsimpledalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce310 yy1 yy2}; YYM.pure (YYNTstrictdalt yyr, yyvs)};
private yyprod310 yyvals = yybadprod 310 yyvals;
private yyprod311 ((_, (YYNTsimpledalt yy1)):yyvs) = YYM.pure (YYNTstrictdalt (yy1), yyvs);
private yyprod311 yyvals = yybadprod 311 yyvals;
private yyprod312 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce312 yy1}; YYM.pure (YYNTsimpledalt yyr, yyvs)};
private yyprod312 yyvals = yybadprod 312 yyvals;
private yyprod313 ((_, (YYTok yy4)):(_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce313 yy1 yy2 yy3 yy4}; YYM.pure (YYNTsimpledalt yyr, yyvs)};
private yyprod313 yyvals = yybadprod 313 yyvals;
private yyprod314 ((_, (YYNTcontypes yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce314 yy1 yy2}; YYM.pure (YYNTsimpledalt yyr, yyvs)};
private yyprod314 yyvals = yybadprod 314 yyvals;
private yyprod315 ((_, (YYNTstrictcontype yy1)):yyvs) =  do { let {!yyr = reduce315 yy1}; YYM.pure (YYNTcontypes yyr, yyvs)};
private yyprod315 yyvals = yybadprod 315 yyvals;
private yyprod316 ((_, (YYNTcontypes yy2)):(_, (YYNTstrictcontype yy1)):yyvs) =  do { let {!yyr = reduce316 yy1 yy2}; YYM.pure (YYNTcontypes yyr, yyvs)};
private yyprod316 yyvals = yybadprod 316 yyvals;
private yyprod317 ((_, (YYNTcontype yy1)):yyvs) = YYM.pure (YYNTstrictcontype (yy1), yyvs);
private yyprod317 yyvals = yybadprod 317 yyvals;
private yyprod318 ((_, (YYNTcontype yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce318 yy1 yy2}; YYM.pure (YYNTstrictcontype yyr, yyvs)};
private yyprod318 yyvals = yybadprod 318 yyvals;
private yyprod319 ((_, (YYNTcontype yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce319 yy1 yy2}; YYM.pure (YYNTstrictcontype yyr, yyvs)};
private yyprod319 yyvals = yybadprod 319 yyvals;
private yyprod320 ((_, (YYNTsimpletype yy1)):yyvs) =  do { let {!yyr = reduce320 yy1}; YYM.pure (YYNTcontype yyr, yyvs)};
private yyprod320 yyvals = yybadprod 320 yyvals;
private yyprod321 ((_, (YYNTsimpletype yy1)):yyvs) =  do { let {!yyr = reduce321 yy1}; YYM.pure (YYNTsimpletypes yyr, yyvs)};
private yyprod321 yyvals = yybadprod 321 yyvals;
private yyprod322 ((_, (YYNTsimpletypes yy2)):(_, (YYNTsimpletype yy1)):yyvs) =  do { let {!yyr = reduce322 yy1 yy2}; YYM.pure (YYNTsimpletypes yyr, yyvs)};
private yyprod322 yyvals = yybadprod 322 yyvals;
private yyprod323 ((_, (YYNTconfld yy1)):yyvs) = YYM.pure (YYNTconflds (yy1), yyvs);
private yyprod323 yyvals = yybadprod 323 yyvals;
private yyprod324 ((_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce324 yy1 yy2}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod324 yyvals = yybadprod 324 yyvals;
private yyprod325 ((_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce325 yy1 yy2}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod325 yyvals = yybadprod 325 yyvals;
private yyprod326 ((_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce326 yy1 yy2 yy3}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod326 yyvals = yybadprod 326 yyvals;
private yyprod327 ((_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce327 yy1 yy2 yy3}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod327 yyvals = yybadprod 327 yyvals;
private yyprod328 ((_, (YYNTsigma yy4)):(_, (YYTok yy3)):(_, (YYNTfldids yy2)):(_, (YYNTdocsO yy1)):yyvs) =  do { let {!yyr = reduce328 yy1 yy2 yy3 yy4}; YYM.pure (YYNTconfld yyr, yyvs)};
private yyprod328 yyvals = yybadprod 328 yyvals;
private yyprod329 ((_, (YYNTfldid yy1)):yyvs) =  do { let {!yyr = reduce329 yy1}; YYM.pure (YYNTfldids yyr, yyvs)};
private yyprod329 yyvals = yybadprod 329 yyvals;
private yyprod330 ((_, (YYNTfldids yy3)):(_, (YYTok yy2)):(_, (YYNTfldid yy1)):yyvs) =  do { let {!yyr = reduce330 yy1 yy2 yy3}; YYM.pure (YYNTfldids yyr, yyvs)};
private yyprod330 yyvals = yybadprod 330 yyvals;
private yyprod331 ((_, (YYNTstrictfldid yy1)):yyvs) = YYM.pure (YYNTfldid (yy1), yyvs);
private yyprod331 yyvals = yybadprod 331 yyvals;
private yyprod332 ((_, (YYNTstrictfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce332 yy1 yy2}; YYM.pure (YYNTfldid yyr, yyvs)};
private yyprod332 yyvals = yybadprod 332 yyvals;
private yyprod333 ((_, (YYNTstrictfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce333 yy1 yy2}; YYM.pure (YYNTfldid yyr, yyvs)};
private yyprod333 yyvals = yybadprod 333 yyvals;
private yyprod334 ((_, (YYNTplainfldid yy1)):yyvs) = YYM.pure (YYNTstrictfldid (yy1), yyvs);
private yyprod334 yyvals = yybadprod 334 yyvals;
private yyprod335 ((_, (YYNTplainfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce335 yy1 yy2}; YYM.pure (YYNTstrictfldid yyr, yyvs)};
private yyprod335 yyvals = yybadprod 335 yyvals;
private yyprod336 ((_, (YYNTplainfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce336 yy1 yy2}; YYM.pure (YYNTstrictfldid yyr, yyvs)};
private yyprod336 yyvals = yybadprod 336 yyvals;
private yyprod337 ((_, (YYNTvarid yy1)):yyvs) =  do { let {!yyr = reduce337 yy1}; YYM.pure (YYNTplainfldid yyr, yyvs)};
private yyprod337 yyvals = yybadprod 337 yyvals;
private yyprod338 ((_, (YYNTsigma yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce338 yy1 yy2 yy3 yy4}; YYM.pure (YYNTtypedef yyr, yyvs)};
private yyprod338 yyvals = yybadprod 338 yyvals;
private yyprod339 ((_, (YYNTsigma yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce339 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTtypedef yyr, yyvs)};
private yyprod339 yyvals = yybadprod 339 yyvals;
private yyprod340 yyvs =  do { let {!yyr = reduce340 }; YYM.pure (YYNTwheredef yyr, yyvs)};
private yyprod341 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce341 yy1 yy2 yy3}; YYM.pure (YYNTwheredef yyr, yyvs)};
private yyprod341 yyvals = yybadprod 341 yyvals;
private yyprod342 ((_, (YYTok yy4)):(_, (YYNTlocaldefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce342 yy1 yy2 yy3 yy4}; YYM.pure (YYNTwheredef yyr, yyvs)};
private yyprod342 yyvals = yybadprod 342 yyvals;
private yyprod343 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce343 yy1 yy2 yy3}; YYM.pure (YYNTwherelet yyr, yyvs)};
private yyprod343 yyvals = yybadprod 343 yyvals;
private yyprod344 ((_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce344 yy1 yy2 yy3 yy4}; YYM.pure (YYNTwherelet yyr, yyvs)};
private yyprod344 yyvals = yybadprod 344 yyvals;
private yyprod345 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTfunhead yy1)):yyvs) =  do { let {!yyr = reduce345 yy1 yy2 yy3}; YYM.pure (YYNTfundef yyr, yyvs)};
private yyprod345 yyvals = yybadprod 345 yyvals;
private yyprod346 ((_, (YYNTguards yy2)):(_, (YYNTfunhead yy1)):yyvs) =  do { let {!yyr = reduce346 yy1 yy2}; YYM.pure (YYNTfundef yyr, yyvs)};
private yyprod346 yyvals = yybadprod 346 yyvals;
private yyprod347 ((_, (YYNTwherelet yy2)):(_, (YYNTfundef yy1)):yyvs) =  do { yyr <- reduce347 yy1 yy2 ;YYM.pure (YYNTfundef yyr, yyvs)};
private yyprod347 yyvals = yybadprod 347 yyvals;
private yyprod348 ((_, (YYNTbinex yy1)):yyvs) =  do { yyr <- reduce348 yy1 ;YYM.pure (YYNTfunhead yyr, yyvs)};
private yyprod348 yyvals = yybadprod 348 yyvals;
private yyprod349 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce349 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod349 yyvals = yybadprod 349 yyvals;
private yyprod350 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce350 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod350 yyvals = yybadprod 350 yyvals;
private yyprod351 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce351 yy1 ;YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod351 yyvals = yybadprod 351 yyvals;
private yyprod352 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce352 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod352 yyvals = yybadprod 352 yyvals;
private yyprod353 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce353 yy1 ;YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod353 yyvals = yybadprod 353 yyvals;
private yyprod354 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce354 yy1 ;YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod354 yyvals = yybadprod 354 yyvals;
private yyprod355 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce355 yy1 ;YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod355 yyvals = yybadprod 355 yyvals;
private yyprod356 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce356 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod356 yyvals = yybadprod 356 yyvals;
private yyprod357 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce357 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod357 yyvals = yybadprod 357 yyvals;
private yyprod358 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce358 yy1 ;YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod358 yyvals = yybadprod 358 yyvals;
private yyprod359 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce359 yy1 ;YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod359 yyvals = yybadprod 359 yyvals;
private yyprod360 ((_, (YYNTexpr yy1)):yyvs) = YYM.pure (YYNTpattern (yy1), yyvs);
private yyprod360 yyvals = yybadprod 360 yyvals;
private yyprod361 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTaeq (yy1), yyvs);
private yyprod361 yyvals = yybadprod 361 yyvals;
private yyprod362 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTaeq (yy1), yyvs);
private yyprod362 yyvals = yybadprod 362 yyvals;
private yyprod363 ((_, (YYNTgqual yy1)):yyvs) = YYM.pure (YYNTlcqual (yy1), yyvs);
private yyprod363 yyvals = yybadprod 363 yyvals;
private yyprod364 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { yyr <- reduce364 yy1 yy2 yy3 ;YYM.pure (YYNTlcqual yyr, yyvs)};
private yyprod364 yyvals = yybadprod 364 yyvals;
private yyprod365 ((_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce365 yy1 yy2 yy3 yy4}; YYM.pure (YYNTlcqual yyr, yyvs)};
private yyprod365 yyvals = yybadprod 365 yyvals;
private yyprod366 ((_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce366 yy1}; YYM.pure (YYNTlcquals yyr, yyvs)};
private yyprod366 yyvals = yybadprod 366 yyvals;
private yyprod367 ((_, (YYNTlcquals yy3)):(_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce367 yy1 yy2 yy3}; YYM.pure (YYNTlcquals yyr, yyvs)};
private yyprod367 yyvals = yybadprod 367 yyvals;
private yyprod368 ((_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce368 yy1 yy2}; YYM.pure (YYNTlcquals yyr, yyvs)};
private yyprod368 yyvals = yybadprod 368 yyvals;
private yyprod369 ((_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce369 yy1}; YYM.pure (YYNTdodefs yyr, yyvs)};
private yyprod369 yyvals = yybadprod 369 yyvals;
private yyprod370 ((_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce370 yy1 yy2}; YYM.pure (YYNTdodefs yyr, yyvs)};
private yyprod370 yyvals = yybadprod 370 yyvals;
private yyprod371 ((_, (YYNTdodefs yy3)):(_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce371 yy1 yy2 yy3}; YYM.pure (YYNTdodefs yyr, yyvs)};
private yyprod371 yyvals = yybadprod 371 yyvals;
private yyprod372 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce372 yy1}; YYM.pure (YYNTgqual yyr, yyvs)};
private yyprod372 yyvals = yybadprod 372 yyvals;
private yyprod373 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce373 yy1 yy2 yy3}; YYM.pure (YYNTgqual yyr, yyvs)};
private yyprod373 yyvals = yybadprod 373 yyvals;
private yyprod374 ((_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce374 yy1}; YYM.pure (YYNTgquals yyr, yyvs)};
private yyprod374 yyvals = yybadprod 374 yyvals;
private yyprod375 ((_, (YYNTgquals yy3)):(_, (YYTok yy2)):(_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce375 yy1 yy2 yy3}; YYM.pure (YYNTgquals yyr, yyvs)};
private yyprod375 yyvals = yybadprod 375 yyvals;
private yyprod376 ((_, (YYTok yy2)):(_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce376 yy1 yy2}; YYM.pure (YYNTgquals yyr, yyvs)};
private yyprod376 yyvals = yybadprod 376 yyvals;
private yyprod377 ((_, (YYNTexpr yy4)):(_, (YYNTaeq yy3)):(_, (YYNTgquals yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce377 yy1 yy2 yy3 yy4}; YYM.pure (YYNTguard yyr, yyvs)};
private yyprod377 yyvals = yybadprod 377 yyvals;
private yyprod378 ((_, (YYNTguard yy1)):yyvs) =  do { let {!yyr = reduce378 yy1}; YYM.pure (YYNTguards yyr, yyvs)};
private yyprod378 yyvals = yybadprod 378 yyvals;
private yyprod379 ((_, (YYNTguards yy2)):(_, (YYNTguard yy1)):yyvs) =  do { let {!yyr = reduce379 yy1 yy2}; YYM.pure (YYNTguards yyr, yyvs)};
private yyprod379 yyvals = yybadprod 379 yyvals;
private yyprod380 ((_, (YYNTexpr yy3)):(_, (YYNTaeq yy2)):(_, (YYNTpattern yy1)):yyvs) =  do { let {!yyr = reduce380 yy1 yy2 yy3}; YYM.pure (YYNTcalt yyr, yyvs)};
private yyprod380 yyvals = yybadprod 380 yyvals;
private yyprod381 ((_, (YYNTguards yy2)):(_, (YYNTpattern yy1)):yyvs) =  do { let {!yyr = reduce381 yy1 yy2}; YYM.pure (YYNTcalt yyr, yyvs)};
private yyprod381 yyvals = yybadprod 381 yyvals;
private yyprod382 ((_, (YYNTwherelet yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce382 yy1 yy2}; YYM.pure (YYNTcalt yyr, yyvs)};
private yyprod382 yyvals = yybadprod 382 yyvals;
private yyprod383 ((_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce383 yy1}; YYM.pure (YYNTcalts yyr, yyvs)};
private yyprod383 yyvals = yybadprod 383 yyvals;
private yyprod384 ((_, (YYNTcalts yy3)):(_, (YYTok yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce384 yy1 yy2 yy3}; YYM.pure (YYNTcalts yyr, yyvs)};
private yyprod384 yyvals = yybadprod 384 yyvals;
private yyprod385 ((_, (YYTok yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce385 yy1 yy2}; YYM.pure (YYNTcalts yyr, yyvs)};
private yyprod385 yyvals = yybadprod 385 yyvals;
private yyprod386 ((_, (YYNTlambdabody yy3)):(_, (YYNTapats yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce386 yy1 yy2 yy3}; YYM.pure (YYNTlambda yyr, yyvs)};
private yyprod386 yyvals = yybadprod 386 yyvals;
private yyprod387 ((_, (YYNTlambda yy1)):yyvs) = YYM.pure (YYNTlambdabody (yy1), yyvs);
private yyprod387 yyvals = yybadprod 387 yyvals;
private yyprod388 ((_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce388 yy1 yy2}; YYM.pure (YYNTlambdabody yyr, yyvs)};
private yyprod388 yyvals = yybadprod 388 yyvals;
private yyprod389 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce389 yy1 yy2 yy3}; YYM.pure (YYNTexpr yyr, yyvs)};
private yyprod389 yyvals = yybadprod 389 yyvals;
private yyprod390 ((_, (YYNTbinex yy1)):yyvs) = YYM.pure (YYNTexpr (yy1), yyvs);
private yyprod390 yyvals = yybadprod 390 yyvals;
private yyprod391 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce391 yy1 yy2}; YYM.pure (YYNTthenx yyr, yyvs)};
private yyprod391 yyvals = yybadprod 391 yyvals;
private yyprod392 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTthenx (yy1), yyvs);
private yyprod392 yyvals = yybadprod 392 yyvals;
private yyprod393 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce393 yy1 yy2}; YYM.pure (YYNTelsex yyr, yyvs)};
private yyprod393 yyvals = yybadprod 393 yyvals;
private yyprod394 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTelsex (yy1), yyvs);
private yyprod394 yyvals = yybadprod 394 yyvals;
private yyprod395 ((_, (YYNTbinex yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce395 yy1 yy2 yy3}; YYM.pure (YYNTbinex yyr, yyvs)};
private yyprod395 ((_, (YYNTbinex yy1)):yyvs) = YYM.pure (YYNTbinex (yy1), yyvs);
private yyprod395 yyvals = yybadprod 395 yyvals;
private yyprod396 ((_, (YYNTbinex yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce396 yy1 yy2 yy3}; YYM.pure (YYNTbinex yyr, yyvs)};
private yyprod396 ((_, (YYNTbinex yy1)):yyvs) = YYM.pure (YYNTbinex (yy1), yyvs);
private yyprod396 yyvals = yybadprod 396 yyvals;
private yyprod397 ((_, (YYNTtopex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce397 yy1 yy2}; YYM.pure (YYNTbinex yyr, yyvs)};
private yyprod397 yyvals = yybadprod 397 yyvals;
private yyprod398 ((_, (YYNTtopex yy1)):yyvs) = YYM.pure (YYNTbinex (yy1), yyvs);
private yyprod398 yyvals = yybadprod 398 yyvals;
private yyprod399 ((_, (YYNTexpr yy6)):(_, (YYNTelsex yy5)):(_, (YYNTexpr yy4)):(_, (YYNTthenx yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce399 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod399 yyvals = yybadprod 399 yyvals;
private yyprod400 ((_, (YYTok yy6)):(_, (YYNTcalts yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce400 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod400 yyvals = yybadprod 400 yyvals;
private yyprod401 ((_, (YYNTexpr yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce401 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod401 yyvals = yybadprod 401 yyvals;
private yyprod402 ((_, (YYNTlambda yy1)):yyvs) = YYM.pure (YYNTtopex (yy1), yyvs);
private yyprod402 yyvals = yybadprod 402 yyvals;
private yyprod403 ((_, (YYNTappex yy1)):yyvs) =  do { let {!yyr = reduce403 yy1}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod403 yyvals = yybadprod 403 yyvals;
private yyprod404 ((_, (YYNTunex yy1)):yyvs) = YYM.pure (YYNTappex (yy1), yyvs);
private yyprod404 yyvals = yybadprod 404 yyvals;
private yyprod405 ((_, (YYNTunex yy2)):(_, (YYNTappex yy1)):yyvs) =  do { let {!yyr = reduce405 yy1 yy2}; YYM.pure (YYNTappex yyr, yyvs)};
private yyprod405 yyvals = yybadprod 405 yyvals;
private yyprod406 ((_, (YYNTprimary yy1)):yyvs) = YYM.pure (YYNTunex (yy1), yyvs);
private yyprod406 yyvals = yybadprod 406 yyvals;
private yyprod407 ((_, (YYNTunex yy2)):(_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce407 yy1 yy2}; YYM.pure (YYNTunex yyr, yyvs)};
private yyprod407 yyvals = yybadprod 407 yyvals;
private yyprod408 ((_, (YYNTunex yy1)):yyvs) =  do { let {!yyr = reduce408 yy1}; YYM.pure (YYNTapats yyr, yyvs)};
private yyprod408 yyvals = yybadprod 408 yyvals;
private yyprod409 ((_, (YYNTapats yy2)):(_, (YYNTunex yy1)):yyvs) =  do { let {!yyr = reduce409 yy1 yy2}; YYM.pure (YYNTapats yyr, yyvs)};
private yyprod409 yyvals = yybadprod 409 yyvals;
private yyprod410 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce410 yy1}; YYM.pure (YYNTqualifiers yyr, yyvs)};
private yyprod410 yyvals = yybadprod 410 yyvals;
private yyprod411 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce411 yy1 yy2}; YYM.pure (YYNTqualifiers yyr, yyvs)};
private yyprod411 yyvals = yybadprod 411 yyvals;
private yyprod412 ((_, (YYNTterm yy1)):yyvs) = YYM.pure (YYNTprimary (yy1), yyvs);
private yyprod412 yyvals = yybadprod 412 yyvals;
private yyprod413 ((_, (YYTok yy4)):(_, (YYNTdodefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce413 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod413 yyvals = yybadprod 413 yyvals;
private yyprod414 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce414 yy1 yy2 yy3}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod414 yyvals = yybadprod 414 yyvals;
private yyprod415 ((_, (YYNToperator yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { yyr <- reduce415 yy1 yy2 yy3 ;YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod415 yyvals = yybadprod 415 yyvals;
private yyprod416 ((_, (YYNTunop yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce416 yy1 yy2 yy3}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod416 yyvals = yybadprod 416 yyvals;
private yyprod417 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce417 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod417 yyvals = yybadprod 417 yyvals;
private yyprod418 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce418 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod418 yyvals = yybadprod 418 yyvals;
private yyprod419 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce419 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod419 yyvals = yybadprod 419 yyvals;
private yyprod420 ((_, (YYTok yy4)):(_, (YYNTgetfields yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce420 yy1 yy2 yy3 yy4}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod420 yyvals = yybadprod 420 yyvals;
private yyprod421 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce421 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod421 yyvals = yybadprod 421 yyvals;
private yyprod422 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce422 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod422 yyvals = yybadprod 422 yyvals;
private yyprod423 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce423 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod423 yyvals = yybadprod 423 yyvals;
private yyprod424 ((_, (YYTok yy5)):(_, (YYNTgetfields yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce424 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod424 yyvals = yybadprod 424 yyvals;
private yyprod425 ((_, (YYTok yy5)):(_, (YYNTexpr yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce425 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod425 yyvals = yybadprod 425 yyvals;
private yyprod426 ((_, (YYNTqvarid yy1)):yyvs) =  do { let {!yyr = reduce426 yy1}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod426 yyvals = yybadprod 426 yyvals;
private yyprod427 ((_, (YYNTliteral yy1)):yyvs) = YYM.pure (YYNTterm (yy1), yyvs);
private yyprod427 yyvals = yybadprod 427 yyvals;
private yyprod428 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce428 yy1}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod428 yyvals = yybadprod 428 yyvals;
private yyprod429 ((_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce429 yy1}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod429 yyvals = yybadprod 429 yyvals;
private yyprod430 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce430 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod430 yyvals = yybadprod 430 yyvals;
private yyprod431 ((_, (YYTok yy4)):(_, (YYNTfields yy3)):(_, (YYTok yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce431 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod431 yyvals = yybadprod 431 yyvals;
private yyprod432 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce432 yy1 yy2}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod432 yyvals = yybadprod 432 yyvals;
private yyprod433 ((_, (YYTok yy3)):(_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce433 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod433 yyvals = yybadprod 433 yyvals;
private yyprod434 ((_, (YYTok yy3)):(_, (YYNTunop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce434 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod434 yyvals = yybadprod 434 yyvals;
private yyprod435 ((_, (YYTok yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce435 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod435 yyvals = yybadprod 435 yyvals;
private yyprod436 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce436 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod436 yyvals = yybadprod 436 yyvals;
private yyprod437 ((_, (YYTok yy4)):(_, (YYNTexpr yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce437 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod437 yyvals = yybadprod 437 yyvals;
private yyprod438 ((_, (YYTok yy4)):(_, (YYNToperator yy3)):(_, (YYNTbinex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce438 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod438 yyvals = yybadprod 438 yyvals;
private yyprod439 ((_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTbinex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce439 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod439 yyvals = yybadprod 439 yyvals;
private yyprod440 ((_, (YYTok yy5)):(_, (YYNTexprSC yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce440 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod440 yyvals = yybadprod 440 yyvals;
private yyprod441 ((_, (YYTok yy5)):(_, (YYNTexprSS yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce441 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod441 yyvals = yybadprod 441 yyvals;
private yyprod442 ((_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce442 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod442 yyvals = yybadprod 442 yyvals;
private yyprod443 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce443 yy1 yy2}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod443 yyvals = yybadprod 443 yyvals;
private yyprod444 ((_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce444 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod444 yyvals = yybadprod 444 yyvals;
private yyprod445 ((_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce445 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod445 yyvals = yybadprod 445 yyvals;
private yyprod446 ((_, (YYTok yy5)):(_, (YYNTexpr yy4)):(_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce446 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod446 yyvals = yybadprod 446 yyvals;
private yyprod447 ((_, (YYTok yy5)):(_, (YYNTlcquals yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce447 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod447 yyvals = yybadprod 447 yyvals;
private yyprod448 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce448 yy1}; YYM.pure (YYNTcommata yyr, yyvs)};
private yyprod448 yyvals = yybadprod 448 yyvals;
private yyprod449 ((_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce449 yy1 yy2}; YYM.pure (YYNTcommata yyr, yyvs)};
private yyprod449 yyvals = yybadprod 449 yyvals;
private yyprod450 ((_, (YYNTfield yy1)):yyvs) =  do { let {!yyr = reduce450 yy1}; YYM.pure (YYNTfields yyr, yyvs)};
private yyprod450 yyvals = yybadprod 450 yyvals;
private yyprod451 ((_, (YYNTfields yy3)):(_, (YYTok yy2)):(_, (YYNTfield yy1)):yyvs) =  do { yyr <- reduce451 yy1 yy2 yy3 ;YYM.pure (YYNTfields yyr, yyvs)};
private yyprod451 yyvals = yybadprod 451 yyvals;
private yyprod452 ((_, (YYTok yy2)):(_, (YYNTfield yy1)):yyvs) =  do { let {!yyr = reduce452 yy1 yy2}; YYM.pure (YYNTfields yyr, yyvs)};
private yyprod452 yyvals = yybadprod 452 yyvals;
private yyprod453 ((_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce453 yy1}; YYM.pure (YYNTgetfields yyr, yyvs)};
private yyprod453 yyvals = yybadprod 453 yyvals;
private yyprod454 ((_, (YYNTgetfields yy3)):(_, (YYTok yy2)):(_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce454 yy1 yy2 yy3}; YYM.pure (YYNTgetfields yyr, yyvs)};
private yyprod454 yyvals = yybadprod 454 yyvals;
private yyprod455 ((_, (YYTok yy2)):(_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce455 yy1 yy2}; YYM.pure (YYNTgetfields yyr, yyvs)};
private yyprod455 yyvals = yybadprod 455 yyvals;
private yyprod456 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce456 yy1 yy2 yy3}; YYM.pure (YYNTgetfield yyr, yyvs)};
private yyprod456 yyvals = yybadprod 456 yyvals;
private yyprod457 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce457 yy1 yy2 yy3}; YYM.pure (YYNTgetfield yyr, yyvs)};
private yyprod457 yyvals = yybadprod 457 yyvals;
private yyprod458 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce458 yy1}; YYM.pure (YYNTgetfield yyr, yyvs)};
private yyprod458 yyvals = yybadprod 458 yyvals;
private yyprod459 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTvarid yy1)):yyvs) =  do { let {!yyr = reduce459 yy1 yy2 yy3}; YYM.pure (YYNTfield yyr, yyvs)};
private yyprod459 yyvals = yybadprod 459 yyvals;
private yyprod460 ((_, (YYNTvarid yy1)):yyvs) =  do { let {!yyr = reduce460 yy1}; YYM.pure (YYNTfield yyr, yyvs)};
private yyprod460 yyvals = yybadprod 460 yyvals;
private yyprod461 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce461 yy1}; YYM.pure (YYNTexprSC yyr, yyvs)};
private yyprod461 yyvals = yybadprod 461 yyvals;
private yyprod462 ((_, (YYNTexprSC yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce462 yy1 yy2 yy3}; YYM.pure (YYNTexprSC yyr, yyvs)};
private yyprod462 yyvals = yybadprod 462 yyvals;
private yyprod463 ((_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce463 yy1 yy2}; YYM.pure (YYNTexprSC yyr, yyvs)};
private yyprod463 yyvals = yybadprod 463 yyvals;
private yyprod464 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce464 yy1}; YYM.pure (YYNTexprSS yyr, yyvs)};
private yyprod464 yyvals = yybadprod 464 yyvals;
private yyprod465 ((_, (YYNTexprSS yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce465 yy1 yy2 yy3}; YYM.pure (YYNTexprSS yyr, yyvs)};
private yyprod465 yyvals = yybadprod 465 yyvals;
private yyprod466 ((_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce466 yy1 yy2}; YYM.pure (YYNTexprSS yyr, yyvs)};
private yyprod466 yyvals = yybadprod 466 yyvals;


private yyprods = let 
    sub1 = [      (1, yyprod1),
      (2, yyprod2),
      (3, yyprod3),
      (4, yyprod4),
      (5, yyprod5),
      (6, yyprod6),
      (7, yyprod7),
      (8, yyprod8),
      (9, yyprod9),
      (10, yyprod10),
      (11, yyprod11),
      (12, yyprod12),
      (13, yyprod13),
      (14, yyprod14),
      (15, yyprod15),
      (16, yyprod16),
      (17, yyprod17),
      (18, yyprod18),
      (19, yyprod19),
      (20, yyprod20),
      (21, yyprod21),
      (22, yyprod22),
      (23, yyprod23),
      (24, yyprod24),
      (25, yyprod25),
      (26, yyprod26),
      (27, yyprod27),
      (28, yyprod28),
      (29, yyprod29),
      (30, yyprod30),
      (31, yyprod31),
      (32, yyprod32),
      (33, yyprod33),
      (34, yyprod34),
      (35, yyprod35),
      (36, yyprod36),
      (37, yyprod37),
      (38, yyprod38),
      (39, yyprod39),
      (40, yyprod40),
      (41, yyprod41),
      (42, yyprod42),
      (43, yyprod43),
      (44, yyprod44),
      (45, yyprod45),
      (46, yyprod46),
      (47, yyprod47),
      (48, yyprod48),
      (49, yyprod49),
      (50, yyprod50),
      (51, yyprod51),
      (52, yyprod52),
      (53, yyprod53),
      (54, yyprod54),
      (55, yyprod55),
      (56, yyprod56),
      (57, yyprod57),
      (58, yyprod58),
      (59, yyprod59),
      (60, yyprod60),
      (61, yyprod61),
      (62, yyprod62),
      (63, yyprod63),
      (64, yyprod64)];
    sub2 = [      (65, yyprod65),
      (66, yyprod66),
      (67, yyprod67),
      (68, yyprod68),
      (69, yyprod69),
      (70, yyprod70),
      (71, yyprod71),
      (72, yyprod72),
      (73, yyprod73),
      (74, yyprod74),
      (75, yyprod75),
      (76, yyprod76),
      (77, yyprod77),
      (78, yyprod78),
      (79, yyprod79),
      (80, yyprod80),
      (81, yyprod81),
      (82, yyprod82),
      (83, yyprod83),
      (84, yyprod84),
      (85, yyprod85),
      (86, yyprod86),
      (87, yyprod87),
      (88, yyprod88),
      (89, yyprod89),
      (90, yyprod90),
      (91, yyprod91),
      (92, yyprod92),
      (93, yyprod93),
      (94, yyprod94),
      (95, yyprod95),
      (96, yyprod96),
      (97, yyprod97),
      (98, yyprod98),
      (99, yyprod99),
      (100, yyprod100),
      (101, yyprod101),
      (102, yyprod102),
      (103, yyprod103),
      (104, yyprod104),
      (105, yyprod105),
      (106, yyprod106),
      (107, yyprod107),
      (108, yyprod108),
      (109, yyprod109),
      (110, yyprod110),
      (111, yyprod111),
      (112, yyprod112),
      (113, yyprod113),
      (114, yyprod114),
      (115, yyprod115),
      (116, yyprod116),
      (117, yyprod117),
      (118, yyprod118),
      (119, yyprod119),
      (120, yyprod120),
      (121, yyprod121),
      (122, yyprod122),
      (123, yyprod123),
      (124, yyprod124),
      (125, yyprod125),
      (126, yyprod126),
      (127, yyprod127),
      (128, yyprod128)];
    sub3 = [      (129, yyprod129),
      (130, yyprod130),
      (131, yyprod131),
      (132, yyprod132),
      (133, yyprod133),
      (134, yyprod134),
      (135, yyprod135),
      (136, yyprod136),
      (137, yyprod137),
      (138, yyprod138),
      (139, yyprod139),
      (140, yyprod140),
      (141, yyprod141),
      (142, yyprod142),
      (143, yyprod143),
      (144, yyprod144),
      (145, yyprod145),
      (146, yyprod146),
      (147, yyprod147),
      (148, yyprod148),
      (149, yyprod149),
      (150, yyprod150),
      (151, yyprod151),
      (152, yyprod152),
      (153, yyprod153),
      (154, yyprod154),
      (155, yyprod155),
      (156, yyprod156),
      (157, yyprod157),
      (158, yyprod158),
      (159, yyprod159),
      (160, yyprod160),
      (161, yyprod161),
      (162, yyprod162),
      (163, yyprod163),
      (164, yyprod164),
      (165, yyprod165),
      (166, yyprod166),
      (167, yyprod167),
      (168, yyprod168),
      (169, yyprod169),
      (170, yyprod170),
      (171, yyprod171),
      (172, yyprod172),
      (173, yyprod173),
      (174, yyprod174),
      (175, yyprod175),
      (176, yyprod176),
      (177, yyprod177),
      (178, yyprod178),
      (179, yyprod179),
      (180, yyprod180),
      (181, yyprod181),
      (182, yyprod182),
      (183, yyprod183),
      (184, yyprod184),
      (185, yyprod185),
      (186, yyprod186),
      (187, yyprod187),
      (188, yyprod188),
      (189, yyprod189),
      (190, yyprod190),
      (191, yyprod191),
      (192, yyprod192)];
    sub4 = [      (193, yyprod193),
      (194, yyprod194),
      (195, yyprod195),
      (196, yyprod196),
      (197, yyprod197),
      (198, yyprod198),
      (199, yyprod199),
      (200, yyprod200),
      (201, yyprod201),
      (202, yyprod202),
      (203, yyprod203),
      (204, yyprod204),
      (205, yyprod205),
      (206, yyprod206),
      (207, yyprod207),
      (208, yyprod208),
      (209, yyprod209),
      (210, yyprod210),
      (211, yyprod211),
      (212, yyprod212),
      (213, yyprod213),
      (214, yyprod214),
      (215, yyprod215),
      (216, yyprod216),
      (217, yyprod217),
      (218, yyprod218),
      (219, yyprod219),
      (220, yyprod220),
      (221, yyprod221),
      (222, yyprod222),
      (223, yyprod223),
      (224, yyprod224),
      (225, yyprod225),
      (226, yyprod226),
      (227, yyprod227),
      (228, yyprod228),
      (229, yyprod229),
      (230, yyprod230),
      (231, yyprod231),
      (232, yyprod232),
      (233, yyprod233),
      (234, yyprod234),
      (235, yyprod235),
      (236, yyprod236),
      (237, yyprod237),
      (238, yyprod238),
      (239, yyprod239),
      (240, yyprod240),
      (241, yyprod241),
      (242, yyprod242),
      (243, yyprod243),
      (244, yyprod244),
      (245, yyprod245),
      (246, yyprod246),
      (247, yyprod247),
      (248, yyprod248),
      (249, yyprod249),
      (250, yyprod250),
      (251, yyprod251),
      (252, yyprod252),
      (253, yyprod253),
      (254, yyprod254),
      (255, yyprod255),
      (256, yyprod256)];
    sub5 = [      (257, yyprod257),
      (258, yyprod258),
      (259, yyprod259),
      (260, yyprod260),
      (261, yyprod261),
      (262, yyprod262),
      (263, yyprod263),
      (264, yyprod264),
      (265, yyprod265),
      (266, yyprod266),
      (267, yyprod267),
      (268, yyprod268),
      (269, yyprod269),
      (270, yyprod270),
      (271, yyprod271),
      (272, yyprod272),
      (273, yyprod273),
      (274, yyprod274),
      (275, yyprod275),
      (276, yyprod276),
      (277, yyprod277),
      (278, yyprod278),
      (279, yyprod279),
      (280, yyprod280),
      (281, yyprod281),
      (282, yyprod282),
      (283, yyprod283),
      (284, yyprod284),
      (285, yyprod285),
      (286, yyprod286),
      (287, yyprod287),
      (288, yyprod288),
      (289, yyprod289),
      (290, yyprod290),
      (291, yyprod291),
      (292, yyprod292),
      (293, yyprod293),
      (294, yyprod294),
      (295, yyprod295),
      (296, yyprod296),
      (297, yyprod297),
      (298, yyprod298),
      (299, yyprod299),
      (300, yyprod300),
      (301, yyprod301),
      (302, yyprod302),
      (303, yyprod303),
      (304, yyprod304),
      (305, yyprod305),
      (306, yyprod306),
      (307, yyprod307),
      (308, yyprod308),
      (309, yyprod309),
      (310, yyprod310),
      (311, yyprod311),
      (312, yyprod312),
      (313, yyprod313),
      (314, yyprod314),
      (315, yyprod315),
      (316, yyprod316),
      (317, yyprod317),
      (318, yyprod318),
      (319, yyprod319),
      (320, yyprod320)];
    sub6 = [      (321, yyprod321),
      (322, yyprod322),
      (323, yyprod323),
      (324, yyprod324),
      (325, yyprod325),
      (326, yyprod326),
      (327, yyprod327),
      (328, yyprod328),
      (329, yyprod329),
      (330, yyprod330),
      (331, yyprod331),
      (332, yyprod332),
      (333, yyprod333),
      (334, yyprod334),
      (335, yyprod335),
      (336, yyprod336),
      (337, yyprod337),
      (338, yyprod338),
      (339, yyprod339),
      (340, yyprod340),
      (341, yyprod341),
      (342, yyprod342),
      (343, yyprod343),
      (344, yyprod344),
      (345, yyprod345),
      (346, yyprod346),
      (347, yyprod347),
      (348, yyprod348),
      (349, yyprod349),
      (350, yyprod350),
      (351, yyprod351),
      (352, yyprod352),
      (353, yyprod353),
      (354, yyprod354),
      (355, yyprod355),
      (356, yyprod356),
      (357, yyprod357),
      (358, yyprod358),
      (359, yyprod359),
      (360, yyprod360),
      (361, yyprod361),
      (362, yyprod362),
      (363, yyprod363),
      (364, yyprod364),
      (365, yyprod365),
      (366, yyprod366),
      (367, yyprod367),
      (368, yyprod368),
      (369, yyprod369),
      (370, yyprod370),
      (371, yyprod371),
      (372, yyprod372),
      (373, yyprod373),
      (374, yyprod374),
      (375, yyprod375),
      (376, yyprod376),
      (377, yyprod377),
      (378, yyprod378),
      (379, yyprod379),
      (380, yyprod380),
      (381, yyprod381),
      (382, yyprod382),
      (383, yyprod383),
      (384, yyprod384)];
    sub7 = [      (385, yyprod385),
      (386, yyprod386),
      (387, yyprod387),
      (388, yyprod388),
      (389, yyprod389),
      (390, yyprod390),
      (391, yyprod391),
      (392, yyprod392),
      (393, yyprod393),
      (394, yyprod394),
      (395, yyprod395),
      (396, yyprod396),
      (397, yyprod397),
      (398, yyprod398),
      (399, yyprod399),
      (400, yyprod400),
      (401, yyprod401),
      (402, yyprod402),
      (403, yyprod403),
      (404, yyprod404),
      (405, yyprod405),
      (406, yyprod406),
      (407, yyprod407),
      (408, yyprod408),
      (409, yyprod409),
      (410, yyprod410),
      (411, yyprod411),
      (412, yyprod412),
      (413, yyprod413),
      (414, yyprod414),
      (415, yyprod415),
      (416, yyprod416),
      (417, yyprod417),
      (418, yyprod418),
      (419, yyprod419),
      (420, yyprod420),
      (421, yyprod421),
      (422, yyprod422),
      (423, yyprod423),
      (424, yyprod424),
      (425, yyprod425),
      (426, yyprod426),
      (427, yyprod427),
      (428, yyprod428),
      (429, yyprod429),
      (430, yyprod430),
      (431, yyprod431),
      (432, yyprod432),
      (433, yyprod433),
      (434, yyprod434),
      (435, yyprod435),
      (436, yyprod436),
      (437, yyprod437),
      (438, yyprod438),
      (439, yyprod439),
      (440, yyprod440),
      (441, yyprod441),
      (442, yyprod442),
      (443, yyprod443),
      (444, yyprod444),
      (445, yyprod445),
      (446, yyprod446),
      (447, yyprod447),
      (448, yyprod448)];
    sub8 = [      (449, yyprod449),
      (450, yyprod450),
      (451, yyprod451),
      (452, yyprod452),
      (453, yyprod453),
      (454, yyprod454),
      (455, yyprod455),
      (456, yyprod456),
      (457, yyprod457),
      (458, yyprod458),
      (459, yyprod459),
      (460, yyprod460),
      (461, yyprod461),
      (462, yyprod462),
      (463, yyprod463),
      (464, yyprod464),
      (465, yyprod465),
      (466, yyprod466)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8);
private yyacts  = let 
    sub1 = [      (0, yyaction0),
      (1, yyaction1),
      (2, yyaction2),
      (3, yyaction3),
      (4, yyaction4),
      (5, yyaction5),
      (6, yyaction6),
      (7, yyaction7),
      (8, yyaction8),
      (9, yyaction9),
      (10, yyaction10),
      (11, yyaction11),
      (12, yyaction12),
      (13, yyaction13),
      (14, yyaction14),
      (15, yyaction15),
      (16, yyaction16),
      (17, yyaction17),
      (18, yyaction18),
      (19, yyaction19),
      (20, yyaction20),
      (21, yyaction21),
      (22, yyaction22),
      (23, yyaction23),
      (24, yyaction24),
      (25, yyaction25),
      (26, yyaction26),
      (27, yyaction27),
      (28, yyaction28),
      (29, yyaction29),
      (30, yyaction30),
      (31, yyaction31),
      (32, yyaction32),
      (33, yyaction33),
      (34, yyaction34),
      (35, yyaction35),
      (36, yyaction36),
      (37, yyaction37),
      (38, yyaction38),
      (39, yyaction39),
      (40, yyaction40),
      (41, yyaction41),
      (42, yyaction42),
      (43, yyaction43),
      (44, yyaction44),
      (45, yyaction45),
      (46, yyaction46),
      (47, yyaction47),
      (48, yyaction48),
      (49, yyaction49),
      (50, yyaction50),
      (51, yyaction51),
      (52, yyaction52),
      (53, yyaction53),
      (54, yyaction54),
      (55, yyaction55),
      (56, yyaction56),
      (57, yyaction57),
      (58, yyaction58),
      (59, yyaction59),
      (60, yyaction60),
      (61, yyaction61),
      (62, yyaction62),
      (63, yyaction63)];
    sub2 = [      (64, yyaction64),
      (65, yyaction65),
      (66, yyaction66),
      (67, yyaction67),
      (68, yyaction68),
      (69, yyaction69),
      (70, yyaction70),
      (71, yyaction71),
      (72, yyaction72),
      (73, yyaction73),
      (74, yyaction74),
      (75, yyaction75),
      (76, yyaction76),
      (77, yyaction77),
      (78, yyaction78),
      (79, yyaction79),
      (80, yyaction80),
      (81, yyaction81),
      (82, yyaction82),
      (83, yyaction83),
      (84, yyaction84),
      (85, yyaction85),
      (86, yyaction86),
      (87, yyaction87),
      (88, yyaction88),
      (89, yyaction89),
      (90, yyaction90),
      (91, yyaction91),
      (92, yyaction92),
      (93, yyaction93),
      (94, yyaction94),
      (95, yyaction95),
      (96, yyaction96),
      (97, yyaction97),
      (98, yyaction98),
      (99, yyaction99),
      (100, yyaction100),
      (101, yyaction101),
      (102, yyaction102),
      (103, yyaction103),
      (104, yyaction104),
      (105, yyaction105),
      (106, yyaction106),
      (107, yyaction107),
      (108, yyaction108),
      (109, yyaction109),
      (110, yyaction110),
      (111, yyaction111),
      (112, yyaction112),
      (113, yyaction113),
      (114, yyaction114),
      (115, yyaction115),
      (116, yyaction116),
      (117, yyaction117),
      (118, yyaction118),
      (119, yyaction119),
      (120, yyaction120),
      (121, yyaction121),
      (122, yyaction122),
      (123, yyaction123),
      (124, yyaction124),
      (125, yyaction125),
      (126, yyaction126),
      (127, yyaction127)];
    sub3 = [      (128, yyaction128),
      (129, yyaction129),
      (130, yyaction130),
      (131, yyaction131),
      (132, yyaction132),
      (133, yyaction133),
      (134, yyaction134),
      (135, yyaction135),
      (136, yyaction136),
      (137, yyaction137),
      (138, yyaction138),
      (139, yyaction139),
      (140, yyaction140),
      (141, yyaction141),
      (142, yyaction142),
      (143, yyaction143),
      (144, yyaction144),
      (145, yyaction145),
      (146, yyaction146),
      (147, yyaction147),
      (148, yyaction148),
      (149, yyaction149),
      (150, yyaction150),
      (151, yyaction151),
      (152, yyaction152),
      (153, yyaction153),
      (154, yyaction154),
      (155, yyaction155),
      (156, yyaction156),
      (157, yyaction157),
      (158, yyaction158),
      (159, yyaction159),
      (160, yyaction160),
      (161, yyaction161),
      (162, yyaction162),
      (163, yyaction163),
      (164, yyaction164),
      (165, yyaction165),
      (166, yyaction166),
      (167, yyaction167),
      (168, yyaction168),
      (169, yyaction169),
      (170, yyaction170),
      (171, yyaction171),
      (172, yyaction172),
      (173, yyaction173),
      (174, yyaction174),
      (175, yyaction175),
      (176, yyaction176),
      (177, yyaction177),
      (178, yyaction178),
      (179, yyaction179),
      (180, yyaction180),
      (181, yyaction181),
      (182, yyaction182),
      (183, yyaction183),
      (184, yyaction184),
      (185, yyaction185),
      (186, yyaction186),
      (187, yyaction187),
      (188, yyaction188),
      (189, yyaction189),
      (190, yyaction190),
      (191, yyaction191)];
    sub4 = [      (192, yyaction192),
      (193, yyaction193),
      (194, yyaction194),
      (195, yyaction195),
      (196, yyaction196),
      (197, yyaction197),
      (198, yyaction198),
      (199, yyaction199),
      (200, yyaction200),
      (201, yyaction201),
      (202, yyaction202),
      (203, yyaction203),
      (204, yyaction204),
      (205, yyaction205),
      (206, yyaction206),
      (207, yyaction207),
      (208, yyaction208),
      (209, yyaction209),
      (210, yyaction210),
      (211, yyaction211),
      (212, yyaction212),
      (213, yyaction213),
      (214, yyaction214),
      (215, yyaction215),
      (216, yyaction216),
      (217, yyaction217),
      (218, yyaction218),
      (219, yyaction219),
      (220, yyaction220),
      (221, yyaction221),
      (222, yyaction222),
      (223, yyaction223),
      (224, yyaction224),
      (225, yyaction225),
      (226, yyaction226),
      (227, yyaction227),
      (228, yyaction228),
      (229, yyaction229),
      (230, yyaction230),
      (231, yyaction231),
      (232, yyaction232),
      (233, yyaction233),
      (234, yyaction234),
      (235, yyaction235),
      (236, yyaction236),
      (237, yyaction237),
      (238, yyaction238),
      (239, yyaction239),
      (240, yyaction240),
      (241, yyaction241),
      (242, yyaction242),
      (243, yyaction243),
      (244, yyaction244),
      (245, yyaction245),
      (246, yyaction246),
      (247, yyaction247),
      (248, yyaction248),
      (249, yyaction249),
      (250, yyaction250),
      (251, yyaction251),
      (252, yyaction252),
      (253, yyaction253),
      (254, yyaction254),
      (255, yyaction255)];
    sub5 = [      (256, yyaction256),
      (257, yyaction257),
      (258, yyaction258),
      (259, yyaction259),
      (260, yyaction260),
      (261, yyaction261),
      (262, yyaction262),
      (263, yyaction263),
      (264, yyaction264),
      (265, yyaction265),
      (266, yyaction266),
      (267, yyaction267),
      (268, yyaction268),
      (269, yyaction269),
      (270, yyaction270),
      (271, yyaction271),
      (272, yyaction272),
      (273, yyaction273),
      (274, yyaction274),
      (275, yyaction275),
      (276, yyaction276),
      (277, yyaction277),
      (278, yyaction278),
      (279, yyaction279),
      (280, yyaction280),
      (281, yyaction281),
      (282, yyaction282),
      (283, yyaction283),
      (284, yyaction284),
      (285, yyaction285),
      (286, yyaction286),
      (287, yyaction287),
      (288, yyaction288),
      (289, yyaction289),
      (290, yyaction290),
      (291, yyaction291),
      (292, yyaction292),
      (293, yyaction293),
      (294, yyaction294),
      (295, yyaction295),
      (296, yyaction296),
      (297, yyaction297),
      (298, yyaction298),
      (299, yyaction299),
      (300, yyaction300),
      (301, yyaction301),
      (302, yyaction302),
      (303, yyaction303),
      (304, yyaction304),
      (305, yyaction305),
      (306, yyaction306),
      (307, yyaction307),
      (308, yyaction308),
      (309, yyaction309),
      (310, yyaction310),
      (311, yyaction311),
      (312, yyaction312),
      (313, yyaction313),
      (314, yyaction314),
      (315, yyaction315),
      (316, yyaction316),
      (317, yyaction317),
      (318, yyaction318),
      (319, yyaction319)];
    sub6 = [      (320, yyaction320),
      (321, yyaction321),
      (322, yyaction322),
      (323, yyaction323),
      (324, yyaction324),
      (325, yyaction325),
      (326, yyaction326),
      (327, yyaction327),
      (328, yyaction328),
      (329, yyaction329),
      (330, yyaction330),
      (331, yyaction331),
      (332, yyaction332),
      (333, yyaction333),
      (334, yyaction334),
      (335, yyaction335),
      (336, yyaction336),
      (337, yyaction337),
      (338, yyaction338),
      (339, yyaction339),
      (340, yyaction340),
      (341, yyaction341),
      (342, yyaction342),
      (343, yyaction343),
      (344, yyaction344),
      (345, yyaction345),
      (346, yyaction346),
      (347, yyaction347),
      (348, yyaction348),
      (349, yyaction349),
      (350, yyaction350),
      (351, yyaction351),
      (352, yyaction352),
      (353, yyaction353),
      (354, yyaction354),
      (355, yyaction355),
      (356, yyaction356),
      (357, yyaction357),
      (358, yyaction358),
      (359, yyaction359),
      (360, yyaction360),
      (361, yyaction361),
      (362, yyaction362),
      (363, yyaction363),
      (364, yyaction364),
      (365, yyaction365),
      (366, yyaction366),
      (367, yyaction367),
      (368, yyaction368),
      (369, yyaction369),
      (370, yyaction370),
      (371, yyaction371),
      (372, yyaction372),
      (373, yyaction373),
      (374, yyaction374),
      (375, yyaction375),
      (376, yyaction376),
      (377, yyaction377),
      (378, yyaction378),
      (379, yyaction379),
      (380, yyaction380),
      (381, yyaction381),
      (382, yyaction382),
      (383, yyaction383)];
    sub7 = [      (384, yyaction384),
      (385, yyaction385),
      (386, yyaction386),
      (387, yyaction387),
      (388, yyaction388),
      (389, yyaction389),
      (390, yyaction390),
      (391, yyaction391),
      (392, yyaction392),
      (393, yyaction393),
      (394, yyaction394),
      (395, yyaction395),
      (396, yyaction396),
      (397, yyaction397),
      (398, yyaction398),
      (399, yyaction399),
      (400, yyaction400),
      (401, yyaction401),
      (402, yyaction402),
      (403, yyaction403),
      (404, yyaction404),
      (405, yyaction405),
      (406, yyaction406),
      (407, yyaction407),
      (408, yyaction408),
      (409, yyaction409),
      (410, yyaction410),
      (411, yyaction411),
      (412, yyaction412),
      (413, yyaction413),
      (414, yyaction414),
      (415, yyaction415),
      (416, yyaction416),
      (417, yyaction417),
      (418, yyaction418),
      (419, yyaction419),
      (420, yyaction420),
      (421, yyaction421),
      (422, yyaction422),
      (423, yyaction423),
      (424, yyaction424),
      (425, yyaction425),
      (426, yyaction426),
      (427, yyaction427),
      (428, yyaction428),
      (429, yyaction429),
      (430, yyaction430),
      (431, yyaction431),
      (432, yyaction432),
      (433, yyaction433),
      (434, yyaction434),
      (435, yyaction435),
      (436, yyaction436),
      (437, yyaction437),
      (438, yyaction438),
      (439, yyaction439),
      (440, yyaction440),
      (441, yyaction441),
      (442, yyaction442),
      (443, yyaction443),
      (444, yyaction444),
      (445, yyaction445),
      (446, yyaction446),
      (447, yyaction447)];
    sub8 = [      (448, yyaction448),
      (449, yyaction449),
      (450, yyaction450),
      (451, yyaction451),
      (452, yyaction452),
      (453, yyaction453),
      (454, yyaction454),
      (455, yyaction455),
      (456, yyaction456),
      (457, yyaction457),
      (458, yyaction458),
      (459, yyaction459),
      (460, yyaction460),
      (461, yyaction461),
      (462, yyaction462),
      (463, yyaction463),
      (464, yyaction464),
      (465, yyaction465),
      (466, yyaction466),
      (467, yyaction467),
      (468, yyaction468),
      (469, yyaction469),
      (470, yyaction470),
      (471, yyaction471),
      (472, yyaction472),
      (473, yyaction473),
      (474, yyaction474),
      (475, yyaction475),
      (476, yyaction476),
      (477, yyaction477),
      (478, yyaction478),
      (479, yyaction479),
      (480, yyaction480),
      (481, yyaction481),
      (482, yyaction482),
      (483, yyaction483),
      (484, yyaction484),
      (485, yyaction485),
      (486, yyaction486),
      (487, yyaction487),
      (488, yyaction488),
      (489, yyaction489),
      (490, yyaction490),
      (491, yyaction491),
      (492, yyaction492),
      (493, yyaction493),
      (494, yyaction494),
      (495, yyaction495),
      (496, yyaction496),
      (497, yyaction497),
      (498, yyaction498),
      (499, yyaction499),
      (500, yyaction500),
      (501, yyaction501),
      (502, yyaction502),
      (503, yyaction503),
      (504, yyaction504),
      (505, yyaction505),
      (506, yyaction506),
      (507, yyaction507),
      (508, yyaction508),
      (509, yyaction509),
      (510, yyaction510),
      (511, yyaction511)];
    sub9 = [      (512, yyaction512),
      (513, yyaction513),
      (514, yyaction514),
      (515, yyaction515),
      (516, yyaction516),
      (517, yyaction517),
      (518, yyaction518),
      (519, yyaction519),
      (520, yyaction520),
      (521, yyaction521),
      (522, yyaction522),
      (523, yyaction523),
      (524, yyaction524),
      (525, yyaction525),
      (526, yyaction526),
      (527, yyaction527),
      (528, yyaction528),
      (529, yyaction529),
      (530, yyaction530),
      (531, yyaction531),
      (532, yyaction532),
      (533, yyaction533),
      (534, yyaction534),
      (535, yyaction535),
      (536, yyaction536),
      (537, yyaction537),
      (538, yyaction538),
      (539, yyaction539),
      (540, yyaction540),
      (541, yyaction541),
      (542, yyaction542),
      (543, yyaction543),
      (544, yyaction544),
      (545, yyaction545),
      (546, yyaction546),
      (547, yyaction547),
      (548, yyaction548),
      (549, yyaction549),
      (550, yyaction550),
      (551, yyaction551),
      (552, yyaction552),
      (553, yyaction553),
      (554, yyaction554),
      (555, yyaction555),
      (556, yyaction556),
      (557, yyaction557),
      (558, yyaction558),
      (559, yyaction559),
      (560, yyaction560),
      (561, yyaction561),
      (562, yyaction562),
      (563, yyaction563),
      (564, yyaction564),
      (565, yyaction565),
      (566, yyaction566),
      (567, yyaction567),
      (568, yyaction568),
      (569, yyaction569),
      (570, yyaction570),
      (571, yyaction571),
      (572, yyaction572),
      (573, yyaction573),
      (574, yyaction574),
      (575, yyaction575)];
    sub10 = [      (576, yyaction576),
      (577, yyaction577),
      (578, yyaction578),
      (579, yyaction579),
      (580, yyaction580),
      (581, yyaction581),
      (582, yyaction582),
      (583, yyaction583),
      (584, yyaction584),
      (585, yyaction585),
      (586, yyaction586),
      (587, yyaction587),
      (588, yyaction588),
      (589, yyaction589),
      (590, yyaction590),
      (591, yyaction591),
      (592, yyaction592),
      (593, yyaction593),
      (594, yyaction594),
      (595, yyaction595),
      (596, yyaction596),
      (597, yyaction597),
      (598, yyaction598),
      (599, yyaction599),
      (600, yyaction600),
      (601, yyaction601),
      (602, yyaction602),
      (603, yyaction603),
      (604, yyaction604),
      (605, yyaction605),
      (606, yyaction606),
      (607, yyaction607),
      (608, yyaction608),
      (609, yyaction609),
      (610, yyaction610),
      (611, yyaction611),
      (612, yyaction612),
      (613, yyaction613),
      (614, yyaction614),
      (615, yyaction615),
      (616, yyaction616),
      (617, yyaction617),
      (618, yyaction618),
      (619, yyaction619),
      (620, yyaction620),
      (621, yyaction621),
      (622, yyaction622),
      (623, yyaction623),
      (624, yyaction624),
      (625, yyaction625),
      (626, yyaction626),
      (627, yyaction627),
      (628, yyaction628),
      (629, yyaction629),
      (630, yyaction630),
      (631, yyaction631),
      (632, yyaction632),
      (633, yyaction633),
      (634, yyaction634),
      (635, yyaction635),
      (636, yyaction636),
      (637, yyaction637),
      (638, yyaction638),
      (639, yyaction639)];
    sub11 = [      (640, yyaction640),
      (641, yyaction641),
      (642, yyaction642),
      (643, yyaction643),
      (644, yyaction644),
      (645, yyaction645),
      (646, yyaction646),
      (647, yyaction647),
      (648, yyaction648),
      (649, yyaction649),
      (650, yyaction650),
      (651, yyaction651),
      (652, yyaction652),
      (653, yyaction653),
      (654, yyaction654),
      (655, yyaction655),
      (656, yyaction656),
      (657, yyaction657),
      (658, yyaction658),
      (659, yyaction659),
      (660, yyaction660),
      (661, yyaction661),
      (662, yyaction662),
      (663, yyaction663),
      (664, yyaction664),
      (665, yyaction665),
      (666, yyaction666),
      (667, yyaction667),
      (668, yyaction668),
      (669, yyaction669),
      (670, yyaction670),
      (671, yyaction671),
      (672, yyaction672),
      (673, yyaction673),
      (674, yyaction674),
      (675, yyaction675),
      (676, yyaction676),
      (677, yyaction677),
      (678, yyaction678),
      (679, yyaction679),
      (680, yyaction680),
      (681, yyaction681),
      (682, yyaction682),
      (683, yyaction683),
      (684, yyaction684),
      (685, yyaction685),
      (686, yyaction686),
      (687, yyaction687),
      (688, yyaction688),
      (689, yyaction689),
      (690, yyaction690),
      (691, yyaction691),
      (692, yyaction692),
      (693, yyaction693),
      (694, yyaction694),
      (695, yyaction695),
      (696, yyaction696),
      (697, yyaction697),
      (698, yyaction698),
      (699, yyaction699),
      (700, yyaction700),
      (701, yyaction701),
      (702, yyaction702),
      (703, yyaction703)];
    sub12 = [      (704, yyaction704),
      (705, yyaction705),
      (706, yyaction706),
      (707, yyaction707),
      (708, yyaction708),
      (709, yyaction709),
      (710, yyaction710),
      (711, yyaction711),
      (712, yyaction712),
      (713, yyaction713),
      (714, yyaction714),
      (715, yyaction715),
      (716, yyaction716),
      (717, yyaction717),
      (718, yyaction718),
      (719, yyaction719),
      (720, yyaction720),
      (721, yyaction721),
      (722, yyaction722),
      (723, yyaction723),
      (724, yyaction724),
      (725, yyaction725),
      (726, yyaction726),
      (727, yyaction727),
      (728, yyaction728),
      (729, yyaction729),
      (730, yyaction730),
      (731, yyaction731),
      (732, yyaction732),
      (733, yyaction733),
      (734, yyaction734)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` sub9 `seq` sub10 `seq` sub11 `seq` sub12 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8 ++ sub9 ++ sub10 ++ sub11 ++ sub12);
private yyrecs  = let 
    sub1 = [      (0, yybadstart 0 "a module"),
      (1, yybadstart 1 "a sequence of doc comments"),
      (2, yyrecover 2),
      (3, yybadstart 3 "a module clause"),
      (4, yyparsing  4 "a possibly empty sequence of doc comments"),
      (5, yyparsing  5 "a sequence of doc comments"),
      (6, yyparsing  6 "a module clause"),
      (7, yyexpect 7(yyfromId PACKAGE)),
      (8, yyparsing  8 "a module"),
      (9, yyparsing  9 "a module"),
      (10, yyparsing  10 "a variable name"),
      (11, yyparsing  11 "a module name"),
      (12, yyparsing  12 "a module name"),
      (13, yyparsing  13 "a variable name"),
      (14, yyparsing  14 "a variable name"),
      (15, yyparsing  15 "a variable name"),
      (16, yyparsing  16 "a variable name"),
      (17, yyparsing  17 "a variable name"),
      (18, yyparsing  18 "a variable name"),
      (19, yyparsing  19 "a module name"),
      (20, yyexpect 20(yyfromCh '.')),
      (21, yyparsing  21 "a module clause"),
      (22, yyparsing  22 "a module clause"),
      (23, yyparsing  23 "a variable name"),
      (24, yyparsing  24 "a qualified constructor or type name"),
      (25, yyparsing  25 "a qualified variable name"),
      (26, yyparsing  26 "documentation"),
      (27, yyparsing  27 "a module import"),
      (28, yyexpect 28(yyfromId INTCONST)),
      (29, yyexpect 29(yyfromId INTCONST)),
      (30, yyexpect 30(yyfromId INTCONST)),
      (31, yyparsing  31 "specification for module class "),
      (32, yyexpect 32(yyfromId CONID)),
      (33, yyexpect 33(yyfromId CONID)),
      (34, yyparsing  34 "a type class declaration"),
      (35, yyparsing  35 "an instance declaration"),
      (36, yyparsing  36 "a protected or private declaration"),
      (37, yyexpect 37(yyfromId CONID)),
      (38, yyparsing  38 "a literal"),
      (39, yyparsing  39 "a literal"),
      (40, yyparsing  40 "a top level expression"),
      (41, yyparsing  41 "a top level expression"),
      (42, yyparsing  42 "an instance derivation"),
      (43, yyexpect 43(yyfromCh '{')),
      (44, yyexpect 44(yyfromCh '{')),
      (45, yyparsing  45 "a protected or private declaration"),
      (46, yyparsing  46 "a protected or private declaration"),
      (47, yyparsing  47 "a protected or private declaration"),
      (48, yyexpect 48(yyfromId NATIVE)),
      (49, yyparsing  49 "a literal"),
      (50, yyparsing  50 "a literal"),
      (51, yyparsing  51 "a literal"),
      (52, yyparsing  52 "a literal"),
      (53, yyparsing  53 "a literal"),
      (54, yyparsing  54 "a literal"),
      (55, yyparsing  55 "a literal"),
      (56, yyparsing  56 "a literal"),
      (57, yyparsing  57 "a literal"),
      (58, yyparsing  58 "binary expression"),
      (59, yyparsing  59 "an annotated item"),
      (60, yyparsing  60 "a term"),
      (61, yyparsing  61 "an unary operator"),
      (62, yyparsing  62 "an unary operator"),
      (63, yyparsing  63 "a lambda abstraction")];
    sub2 = [      (64, yyparsing  64 "a term"),
      (65, yyexpect 65(yyfromCh '}')),
      (66, yyparsing  66 "declarations"),
      (67, yyparsing  67 "a declaration"),
      (68, yyparsing  68 "a declaration"),
      (69, yyparsing  69 "a declaration"),
      (70, yyparsing  70 "a top level declaration"),
      (71, yyparsing  71 "a declaration"),
      (72, yyparsing  72 "a top level declaration"),
      (73, yyparsing  73 "a top level declaration"),
      (74, yyparsing  74 "a top level declaration"),
      (75, yyparsing  75 "a declaration"),
      (76, yyparsing  76 "a declaration"),
      (77, yyparsing  77 "a declaration"),
      (78, yyparsing  78 "a declaration"),
      (79, yyparsing  79 "a declaration"),
      (80, yyparsing  80 "a declaration"),
      (81, yyparsing  81 "a local declaration"),
      (82, yyparsing  82 "a local declaration"),
      (83, yybadstart 83 "a where clause"),
      (84, yyparsing  84 "an annotated item"),
      (85, yyparsing  85 "a term"),
      (86, yyparsing  86 "a term"),
      (87, yyparsing  87 "unary expression"),
      (88, yyparsing  88 "a fixity declaration"),
      (89, yyexpect 89(yyfromId DCOLON)),
      (90, yyparsing  90 "a list of items to annotate"),
      (91, yyparsing  91 "a declaration of a native item"),
      (92, yybadstart 92 "declarations local to a class, instance or type"),
      (93, yybadstart 93 "declarations local to a class, instance or type"),
      (94, yyparsing  94 "a function or pattern binding"),
      (95, yyparsing  95 "left hand side of a function or pattern binding"),
      (96, yyparsing  96 "a term"),
      (97, yyparsing  97 "a top level expression"),
      (98, yyparsing  98 "binary expression"),
      (99, yyparsing  99 "a top level expression"),
      (100, yyparsing  100 "function application"),
      (101, yyparsing  101 "unary expression"),
      (102, yyexpect 102(yyfromCh '{')),
      (103, yyparsing  103 "a primary expression"),
      (104, yyparsing  104 "a word"),
      (105, yyexpect 105(yyfromCh '{')),
      (106, yyparsing  106 "a module"),
      (107, yyexpect 107(yyfromCh '(')),
      (108, yyparsing  108 "words"),
      (109, yyparsing  109 "a module name"),
      (110, yyparsing  110 "a module name"),
      (111, yyparsing  111 "a module clause"),
      (112, yyparsing  112 "a variable or an operator"),
      (113, yyparsing  113 "a qualified constructor or type name"),
      (114, yyparsing  114 "a qualified variable name"),
      (115, yyparsing  115 "a variable or an operator"),
      (116, yyparsing  116 "a qualified variable name"),
      (117, yyparsing  117 "a module import"),
      (118, yyparsing  118 "the start of a fixity declaration"),
      (119, yyparsing  119 "the start of a fixity declaration"),
      (120, yyparsing  120 "the start of a fixity declaration"),
      (121, yyparsing  121 "a variable name"),
      (122, yybadstart 122 "the type this module derives from"),
      (123, yyparsing  123 "an operator"),
      (124, yyparsing  124 "the frege name of the native method"),
      (125, yyparsing  125 "an annotated item"),
      (126, yyparsing  126 "the frege name of the native method"),
      (127, yyparsing  127 "the frege name of the native method")];
    sub3 = [      (128, yyparsing  128 "the frege name of the native method"),
      (129, yyparsing  129 "a specification of a native item"),
      (130, yyexpect 130(yyfromId DCOLON)),
      (131, yyparsing  131 "a data definition"),
      (132, yyparsing  132 "a data definition"),
      (133, yyparsing  133 "a qualified constructor or type name"),
      (134, yyparsing  134 "type class context"),
      (135, yybadstart 135 "a type variable"),
      (136, yyparsing  136 "type class context"),
      (137, yybadstart 137 "declarations local to a class, instance or type"),
      (138, yyparsing  138 "instance context"),
      (139, yyparsing  139 "instance constraint"),
      (140, yyparsing  140 "instance context"),
      (141, yyparsing  141 "instance head"),
      (142, yybadstart 142 "declarations local to a class, instance or type"),
      (143, yyexpect 143(yyfromId CONID)),
      (144, yyparsing  144 "a protected or private declaration"),
      (145, yyparsing  145 "a type declaration"),
      (146, yyparsing  146 "a qualified variable name"),
      (147, yyparsing  147 "a term"),
      (148, yybadstart 148 "then branch"),
      (149, yyparsing  149 "an expression"),
      (150, yyexpect 150(yyfromId OF)),
      (151, yyparsing  151 "an instance derivation"),
      (152, yyparsing  152 "a top level expression"),
      (153, yyparsing  153 "a primary expression"),
      (154, yyparsing  154 "a declaration of a native item"),
      (155, yyparsing  155 "a protected or private declaration"),
      (156, yyparsing  156 "a protected or private declaration"),
      (157, yyparsing  157 "a protected or private declaration"),
      (158, yyparsing  158 "a declaration of a native item"),
      (159, yyparsing  159 "binary expression"),
      (160, yyparsing  160 "an annotated item"),
      (161, yyparsing  161 "a term"),
      (162, yybadstart 162 "a sequence of one or more ','"),
      (163, yyparsing  163 "an annotated item"),
      (164, yyparsing  164 "an annotated item"),
      (165, yyexpect 165(yyfromCh ')')),
      (166, yyparsing  166 "a term"),
      (167, yybadstart 167 "an operator"),
      (168, yyparsing  168 "a term"),
      (169, yyparsing  169 "a term"),
      (170, yyparsing  170 "a term"),
      (171, yyparsing  171 "a lambda abstraction"),
      (172, yyparsing  172 "lambda patterns"),
      (173, yyparsing  173 "a module"),
      (174, yyparsing  174 "declarations"),
      (175, yyexpect 175(yyfromCh '{')),
      (176, yyparsing  176 "a function or pattern binding"),
      (177, yyparsing  177 "a term"),
      (178, yyparsing  178 "unary expression"),
      (179, yyparsing  179 "an operator"),
      (180, yyparsing  180 "an operator"),
      (181, yyparsing  181 "an operator"),
      (182, yyparsing  182 "some operators"),
      (183, yyparsing  183 "a fixity declaration"),
      (184, yyparsing  184 "an annotation"),
      (185, yyparsing  185 "a list of items to annotate"),
      (186, yyexpect 186(yyfromCh '{')),
      (187, yyparsing  187 "a data definition"),
      (188, yyparsing  188 "a data definition for a native type"),
      (189, yyparsing  189 "a guarded expression"),
      (190, yyparsing  190 "a function or pattern binding"),
      (191, yyparsing  191 "a function or pattern binding")];
    sub4 = [      (192, yyparsing  192 "guarded expressions"),
      (193, yyparsing  193 "binary expression"),
      (194, yyparsing  194 "binary expression"),
      (195, yyparsing  195 "function application"),
      (196, yyparsing  196 "a primary expression"),
      (197, yyexpect 197(yyfromId VARID)),
      (198, yyparsing  198 "a module"),
      (199, yyparsing  199 "a module"),
      (200, yyparsing  200 "a module clause"),
      (201, yyparsing  201 "words"),
      (202, yyparsing  202 "a module name"),
      (203, yyparsing  203 "a qualified constructor or type name"),
      (204, yyparsing  204 "a qualified variable name"),
      (205, yyparsing  205 "a module import"),
      (206, yyparsing  206 "a module import"),
      (207, yyparsing  207 "an import list"),
      (208, yyparsing  208 "an import list"),
      (209, yyparsing  209 "a module import"),
      (210, yyexpect 210(yyfromCh '(')),
      (211, yyparsing  211 "the type this module derives from"),
      (212, yybadstart 212 "the interfaces this module implements"),
      (213, yyexpect 213(yyfromCh ')')),
      (214, yyexpect 214(yyfromCh ')')),
      (215, yyexpect 215(yyfromCh ')')),
      (216, yyparsing  216 "a valid java identifier"),
      (217, yyparsing  217 "a valid java identifier"),
      (218, yybadstart 218 "a valid java identifier"),
      (219, yyparsing  219 "a valid java identifier"),
      (220, yyparsing  220 "a valid java identifier"),
      (221, yyparsing  221 "native generic type arguments"),
      (222, yyparsing  222 "a native item"),
      (223, yyparsing  223 "a valid java identifier"),
      (224, yyparsing  224 "a native item"),
      (225, yyparsing  225 "a native item"),
      (226, yybadstart 226 "native generic type arguments"),
      (227, yyparsing  227 "a specification of a native item"),
      (228, yyparsing  228 "a declaration of a native item"),
      (229, yyparsing  229 "a type variable"),
      (230, yyparsing  230 "a type variable"),
      (231, yyparsing  231 "a data definition"),
      (232, yyexpect 232(yyfromCh '=')),
      (233, yyparsing  233 "type variables bound in forall or data/type/newtype"),
      (234, yyparsing  234 "a data definition"),
      (235, yyexpect 235(yyfromCh '=')),
      (236, yyexpect 236(yyfromId CONID)),
      (237, yyparsing  237 "simple constraints"),
      (238, yyexpect 238(yyfromCh ')')),
      (239, yyparsing  239 "simple constraint"),
      (240, yyexpect 240(yyfromId CONID)),
      (241, yyparsing  241 "a type class declaration"),
      (242, yyparsing  242 "instance constraints"),
      (243, yyexpect 243(yyfromCh ')')),
      (244, yyparsing  244 "a non function type"),
      (245, yyparsing  245 "a non function type"),
      (246, yyparsing  246 "a type constructor"),
      (247, yyparsing  247 "instance constraint"),
      (248, yyparsing  248 "a non function type"),
      (249, yyparsing  249 "a non function type"),
      (250, yyparsing  250 "instance head"),
      (251, yyparsing  251 "an instance declaration"),
      (252, yyparsing  252 "a data definition"),
      (253, yyparsing  253 "a type declaration"),
      (254, yyexpect 254(yyfromCh '=')),
      (255, yyparsing  255 "binary expression")];
    sub5 = [      (256, yyparsing  256 "a term"),
      (257, yyparsing  257 "unary expression"),
      (258, yyparsing  258 "then branch"),
      (259, yyexpect 259(yyfromId THEN)),
      (260, yyparsing  260 "a top level expression"),
      (261, yyparsing  261 "an expression"),
      (262, yyexpect 262(yyfromCh '{')),
      (263, yyparsing  263 "a function or pattern binding"),
      (264, yybadstart 264 "a where clause"),
      (265, yyparsing  265 "declarations in a let expression or where clause"),
      (266, yyexpect 266(yyfromCh '}')),
      (267, yyexpect 267(yyfromCh '{')),
      (268, yyparsing  268 "a list comprehension qualifier"),
      (269, yyparsing  269 "do expression qualifiers"),
      (270, yyparsing  270 "a list comprehension qualifier"),
      (271, yyexpect 271(yyfromCh '}')),
      (272, yyparsing  272 "an annotated item"),
      (273, yyparsing  273 "a sequence of one or more ','"),
      (274, yyparsing  274 "an annotated item"),
      (275, yyexpect 275(yyfromCh ')')),
      (276, yyparsing  276 "an annotated item"),
      (277, yyparsing  277 "a term"),
      (278, yyparsing  278 "a term"),
      (279, yyparsing  279 "a term"),
      (280, yyparsing  280 "a term"),
      (281, yyparsing  281 "an operator"),
      (282, yyparsing  282 "binary expression"),
      (283, yyexpect 283(yyfromCh ')')),
      (284, yyparsing  284 "list of expressions separated by ','"),
      (285, yyparsing  285 "a term"),
      (286, yyparsing  286 "a term"),
      (287, yyparsing  287 "a term"),
      (288, yyparsing  288 "a lambda body"),
      (289, yyparsing  289 "a lambda body"),
      (290, yyparsing  290 "a lambda abstraction"),
      (291, yyparsing  291 "lambda patterns"),
      (292, yyparsing  292 "declarations"),
      (293, yyparsing  293 "a where clause"),
      (294, yyparsing  294 "a term"),
      (295, yyparsing  295 "field"),
      (296, yyexpect 296(yyfromCh '}')),
      (297, yyparsing  297 "field list"),
      (298, yyparsing  298 "some operators"),
      (299, yyparsing  299 "a qualified type"),
      (300, yyparsing  300 "an annotation"),
      (301, yyparsing  301 "a qualified type"),
      (302, yyparsing  302 "a qualified type"),
      (303, yyparsing  303 "a constrained type"),
      (304, yyparsing  304 "a constrained type"),
      (305, yyparsing  305 "a type application"),
      (306, yyparsing  306 "non function types"),
      (307, yyparsing  307 "a list of items to annotate"),
      (308, yyparsing  308 "declarations local to a class, instance or type"),
      (309, yyparsing  309 "a guard qualifier"),
      (310, yyparsing  310 "guard qualifiers"),
      (311, yybadstart 311 "'='"),
      (312, yyparsing  312 "a function or pattern binding"),
      (313, yyparsing  313 "guarded expressions"),
      (314, yyparsing  314 "binary expression"),
      (315, yyparsing  315 "binary expression"),
      (316, yyparsing  316 "a primary expression"),
      (317, yyexpect 317(yyfromId VARID)),
      (318, yyparsing  318 "a primary expression"),
      (319, yyparsing  319 "a primary expression")];
    sub6 = [      (320, yyparsing  320 "a primary expression"),
      (321, yyparsing  321 "a primary expression"),
      (322, yyexpect 322(yyfromCh '}')),
      (323, yyparsing  323 "field list"),
      (324, yyexpect 324(yyfromCh '}')),
      (325, yyparsing  325 "a qualified variable name"),
      (326, yyexpect 326(yyfromCh ')')),
      (327, yyparsing  327 "a qualified variable name"),
      (328, yyparsing  328 "a list of qualified variable names"),
      (329, yyparsing  329 "a qualified variable name"),
      (330, yyparsing  330 "a module import"),
      (331, yyparsing  331 "a module import"),
      (332, yyparsing  332 "an import list"),
      (333, yyparsing  333 "an import item"),
      (334, yyparsing  334 "a qualified variable name"),
      (335, yyparsing  335 "an import specification"),
      (336, yyparsing  336 "an import list"),
      (337, yyexpect 337(yyfromCh ')')),
      (338, yyparsing  338 "a list of import items"),
      (339, yyparsing  339 "an import specification"),
      (340, yyparsing  340 "an import item"),
      (341, yyparsing  341 "an import item"),
      (342, yyparsing  342 "an import item"),
      (343, yyparsing  343 "an import item"),
      (344, yyparsing  344 "an import list"),
      (345, yyparsing  345 "the type this module derives from"),
      (346, yyparsing  346 "a non function type"),
      (347, yyparsing  347 "a non function type"),
      (348, yyparsing  348 "the interfaces this module implements"),
      (349, yyexpect 349(yyfromId WHERE)),
      (350, yyparsing  350 "an annotated item"),
      (351, yyparsing  351 "an annotated item"),
      (352, yyparsing  352 "an annotated item"),
      (353, yybadstart 353 "a valid java identifier"),
      (354, yyparsing  354 "a valid java identifier"),
      (355, yybadstart 355 "a valid java identifier"),
      (356, yyparsing  356 "native generic type arguments"),
      (357, yyparsing  357 "a list of types"),
      (358, yyexpect 358(yyfromCh '}')),
      (359, yyparsing  359 "a specification of a native item"),
      (360, yyparsing  360 "a method type with optional throws clause"),
      (361, yyparsing  361 "method types with optional throws clauses"),
      (362, yyparsing  362 "a declaration of a native item"),
      (363, yyparsing  363 "a type variable"),
      (364, yyparsing  364 "a type variable"),
      (365, yyparsing  365 "a type variable"),
      (366, yyparsing  366 "a variant of an algebraic datatype"),
      (367, yyparsing  367 "a variant of an algebraic datatype"),
      (368, yyparsing  368 "a variant of an algebraic datatype"),
      (369, yyparsing  369 "a variant of an algebraic datatype"),
      (370, yyparsing  370 "a variant of an algebraic datatype"),
      (371, yyexpect 371(yyfromId CONID)),
      (372, yyexpect 372(yyfromId CONID)),
      (373, yyparsing  373 "a data definition"),
      (374, yyparsing  374 "a variant of an algebraic datatype"),
      (375, yyparsing  375 "a variant of an algebraic datatype"),
      (376, yyparsing  376 "a variant of an algebraic datatype"),
      (377, yyparsing  377 "a data definition"),
      (378, yyparsing  378 "type variables bound in forall or data/type/newtype"),
      (379, yyparsing  379 "a native data type"),
      (380, yyexpect 380(yyfromId NATIVE)),
      (381, yyparsing  381 "a data definition for a native type"),
      (382, yyparsing  382 "a data definition"),
      (383, yyparsing  383 "an algebraic datatype")];
    sub7 = [      (384, yyparsing  384 "a data definition"),
      (385, yyparsing  385 "simple constraints"),
      (386, yyparsing  386 "type class context"),
      (387, yybadstart 387 "a type variable"),
      (388, yyparsing  388 "instance constraints"),
      (389, yyparsing  389 "instance context"),
      (390, yyparsing  390 "a type variable"),
      (391, yyexpect 391(yyfromCh ')')),
      (392, yyparsing  392 "a type constructor"),
      (393, yyparsing  393 "a non function type"),
      (394, yyexpect 394(yyfromCh ')')),
      (395, yyparsing  395 "a type constructor"),
      (396, yyexpect 396(yyfromCh ']')),
      (397, yybadstart 397 "a sequence of one or more ','"),
      (398, yyexpect 398(yyfromCh ']')),
      (399, yyparsing  399 "instance head"),
      (400, yyparsing  400 "a data definition"),
      (401, yyexpect 401(yyfromCh '=')),
      (402, yyparsing  402 "a type declaration"),
      (403, yyparsing  403 "a type declaration"),
      (404, yyparsing  404 "a term"),
      (405, yyparsing  405 "a term"),
      (406, yyparsing  406 "a term"),
      (407, yyparsing  407 "then branch"),
      (408, yybadstart 408 "else branch"),
      (409, yyparsing  409 "an expression"),
      (410, yyparsing  410 "a top level expression"),
      (411, yyparsing  411 "declarations in a let expression or where clause"),
      (412, yyexpect 412(yyfromId IN)),
      (413, yyparsing  413 "a list comprehension qualifier"),
      (414, yyparsing  414 "a guard qualifier"),
      (415, yyparsing  415 "a list comprehension qualifier"),
      (416, yyparsing  416 "do expression qualifiers"),
      (417, yyparsing  417 "a primary expression"),
      (418, yyparsing  418 "a term"),
      (419, yyparsing  419 "list of expressions separated by ';'"),
      (420, yyexpect 420(yyfromCh ')')),
      (421, yyparsing  421 "list of expressions separated by ','"),
      (422, yyexpect 422(yyfromCh ')')),
      (423, yyparsing  423 "a term"),
      (424, yyparsing  424 "a term"),
      (425, yyparsing  425 "list of expressions separated by ','"),
      (426, yyparsing  426 "list comprehension qualifiers"),
      (427, yyexpect 427(yyfromCh ']')),
      (428, yyparsing  428 "a term"),
      (429, yyexpect 429(yyfromCh ']')),
      (430, yyparsing  430 "a lambda body"),
      (431, yyparsing  431 "a where clause"),
      (432, yyexpect 432(yyfromCh '}')),
      (433, yyparsing  433 "field"),
      (434, yyparsing  434 "a term"),
      (435, yyparsing  435 "field list"),
      (436, yybadstart 436 "'.' or 'â¢'"),
      (437, yyparsing  437 "a type"),
      (438, yyparsing  438 "a constrained type"),
      (439, yyparsing  439 "non function types"),
      (440, yyparsing  440 "a protected or private local declaration"),
      (441, yyparsing  441 "a protected or private local declaration"),
      (442, yyparsing  442 "a protected or private local declaration"),
      (443, yyparsing  443 "declarations local to a class, instance or type"),
      (444, yyparsing  444 "a commented local declaration"),
      (445, yyparsing  445 "a protected or private local declaration"),
      (446, yyexpect 446(yyfromCh '}')),
      (447, yyparsing  447 "local declarations")];
    sub8 = [      (448, yyparsing  448 "a commented local declaration"),
      (449, yyparsing  449 "guard qualifiers"),
      (450, yyparsing  450 "'='"),
      (451, yyparsing  451 "'='"),
      (452, yyparsing  452 "a guarded expression"),
      (453, yyparsing  453 "a primary expression"),
      (454, yyexpect 454(yyfromCh '}')),
      (455, yyexpect 455(yyfromCh ']')),
      (456, yyparsing  456 "a primary expression"),
      (457, yyexpect 457(yyfromCh '}')),
      (458, yyparsing  458 "a primary expression"),
      (459, yyparsing  459 "a primary expression"),
      (460, yyparsing  460 "field list"),
      (461, yyparsing  461 "a module"),
      (462, yyparsing  462 "a qualified variable name"),
      (463, yyparsing  463 "a qualified variable name"),
      (464, yyparsing  464 "a module clause"),
      (465, yyparsing  465 "a list of qualified variable names"),
      (466, yyparsing  466 "a module import"),
      (467, yyparsing  467 "an import item"),
      (468, yyparsing  468 "a qualified variable name"),
      (469, yyparsing  469 "an import specification"),
      (470, yyparsing  470 "an import list"),
      (471, yyparsing  471 "a list of import items"),
      (472, yyparsing  472 "a simple name for a member or import item"),
      (473, yyparsing  473 "a simple name for a member or import item"),
      (474, yyparsing  474 "a simple name for a member or import item"),
      (475, yyparsing  475 "an import specification"),
      (476, yyexpect 476(yyfromCh ')')),
      (477, yyparsing  477 "a non function type"),
      (478, yyparsing  478 "the interfaces this module implements"),
      (479, yyexpect 479(yyfromCh '{')),
      (480, yyparsing  480 "specification for module class "),
      (481, yyparsing  481 "a valid java identifier"),
      (482, yyparsing  482 "a valid java identifier"),
      (483, yyparsing  483 "a list of types"),
      (484, yyparsing  484 "native generic type arguments"),
      (485, yyparsing  485 "a method type with optional throws clause"),
      (486, yyparsing  486 "method types with optional throws clauses"),
      (487, yyparsing  487 "a type variable"),
      (488, yyparsing  488 "a type variable"),
      (489, yyexpect 489(yyfromCh ')')),
      (490, yyexpect 490(yyfromCh ')')),
      (491, yyparsing  491 "a variant of an algebraic datatype"),
      (492, yyparsing  492 "constructor field represented by a type"),
      (493, yyparsing  493 "constructor field represented by a type"),
      (494, yyparsing  494 "constructor field represented by a type"),
      (495, yyparsing  495 "a variant of an algebraic datatype"),
      (496, yyparsing  496 "constructor fields represented by types"),
      (497, yyparsing  497 "constructor field represented by a type"),
      (498, yyparsing  498 "a variant of an algebraic datatype"),
      (499, yyparsing  499 "a variant of an algebraic datatype"),
      (500, yyparsing  500 "a variant of an algebraic datatype"),
      (501, yyparsing  501 "a variant of an algebraic datatype"),
      (502, yyparsing  502 "a variant of an algebraic datatype"),
      (503, yyparsing  503 "a variant of an algebraic datatype"),
      (504, yyparsing  504 "a variant of an algebraic datatype"),
      (505, yyparsing  505 "a data definition"),
      (506, yyparsing  506 "a native data type"),
      (507, yybadstart 507 "native generic type arguments"),
      (508, yyparsing  508 "a data definition for a native type"),
      (509, yyparsing  509 "an algebraic datatype"),
      (510, yyparsing  510 "a data definition for a native type"),
      (511, yyparsing  511 "a data definition")];
    sub9 = [      (512, yyparsing  512 "simple constraints"),
      (513, yybadstart 513 "declarations local to a class, instance or type"),
      (514, yyparsing  514 "instance constraints"),
      (515, yyparsing  515 "a type constructor"),
      (516, yyparsing  516 "a non function type"),
      (517, yyparsing  517 "a non function type"),
      (518, yyparsing  518 "a non function type"),
      (519, yyparsing  519 "a type constructor"),
      (520, yyparsing  520 "a non function type"),
      (521, yyparsing  521 "instance head"),
      (522, yyparsing  522 "a data definition"),
      (523, yyparsing  523 "a type declaration"),
      (524, yyparsing  524 "else branch"),
      (525, yyexpect 525(yyfromId ELSE)),
      (526, yyparsing  526 "a top level expression"),
      (527, yyparsing  527 "a pattern"),
      (528, yyparsing  528 "case alternative"),
      (529, yybadstart 529 "a where clause"),
      (530, yyexpect 530(yyfromCh '}')),
      (531, yyparsing  531 "declarations in a let expression or where clause"),
      (532, yyparsing  532 "a top level expression"),
      (533, yyexpect 533(yyfromCh '}')),
      (534, yyparsing  534 "a guard qualifier"),
      (535, yyparsing  535 "a list comprehension qualifier"),
      (536, yyparsing  536 "do expression qualifiers"),
      (537, yyparsing  537 "list of expressions separated by ';'"),
      (538, yyparsing  538 "a term"),
      (539, yyparsing  539 "a term"),
      (540, yyparsing  540 "list comprehension qualifiers"),
      (541, yyparsing  541 "a term"),
      (542, yyparsing  542 "a term"),
      (543, yyparsing  543 "a where clause"),
      (544, yyparsing  544 "field"),
      (545, yyparsing  545 "field list"),
      (546, yyparsing  546 "'.' or 'â¢'"),
      (547, yyparsing  547 "'.' or 'â¢'"),
      (548, yyparsing  548 "a qualified type"),
      (549, yyparsing  549 "a type"),
      (550, yyparsing  550 "a type"),
      (551, yyparsing  551 "a constrained type"),
      (552, yyparsing  552 "a protected or private local declaration"),
      (553, yyparsing  553 "a protected or private local declaration"),
      (554, yyparsing  554 "a protected or private local declaration"),
      (555, yyparsing  555 "a commented local declaration"),
      (556, yyparsing  556 "declarations local to a class, instance or type"),
      (557, yyparsing  557 "local declarations"),
      (558, yyparsing  558 "guard qualifiers"),
      (559, yyparsing  559 "a guarded expression"),
      (560, yyparsing  560 "a primary expression"),
      (561, yyexpect 561(yyfromCh '}')),
      (562, yyparsing  562 "a primary expression"),
      (563, yyparsing  563 "a primary expression"),
      (564, yyparsing  564 "a primary expression"),
      (565, yyparsing  565 "a primary expression"),
      (566, yyparsing  566 "field"),
      (567, yyparsing  567 "a primary expression"),
      (568, yyparsing  568 "a primary expression"),
      (569, yyparsing  569 "field"),
      (570, yyparsing  570 "field"),
      (571, yyparsing  571 "field list"),
      (572, yyparsing  572 "a qualified variable name"),
      (573, yyparsing  573 "a list of qualified variable names"),
      (574, yyparsing  574 "a member import specification"),
      (575, yyparsing  575 "an import item")];
    sub10 = [      (576, yyexpect 576(yyfromCh ')')),
      (577, yyparsing  577 "a member import specification"),
      (578, yyparsing  578 "a list of member imports"),
      (579, yyparsing  579 "a list of import items"),
      (580, yyparsing  580 "an import list"),
      (581, yyparsing  581 "a non function type"),
      (582, yyparsing  582 "java code"),
      (583, yyparsing  583 "a list of types"),
      (584, yyparsing  584 "a method type with optional throws clause"),
      (585, yyparsing  585 "method types with optional throws clauses"),
      (586, yyexpect 586(yyfromCh ')')),
      (587, yyparsing  587 "a type kind"),
      (588, yyparsing  588 "a type kind"),
      (589, yyexpect 589(yyfromCh ')')),
      (590, yyparsing  590 "a type kind"),
      (591, yyparsing  591 "a type variable"),
      (592, yyparsing  592 "a type variable"),
      (593, yyparsing  593 "a constructor field"),
      (594, yyexpect 594(yyfromCh '}')),
      (595, yyparsing  595 "constructor fields"),
      (596, yyparsing  596 "constructor field represented by a type"),
      (597, yyparsing  597 "constructor field represented by a type"),
      (598, yyparsing  598 "constructor fields represented by types"),
      (599, yyparsing  599 "a native generic type"),
      (600, yyparsing  600 "an algebraic datatype"),
      (601, yyparsing  601 "a data definition for a native type"),
      (602, yyparsing  602 "a type class declaration"),
      (603, yyexpect 603(yyfromCh ')')),
      (604, yyparsing  604 "a list of types separated by '|'"),
      (605, yyexpect 605(yyfromCh ')')),
      (606, yyparsing  606 "else branch"),
      (607, yyparsing  607 "a top level expression"),
      (608, yyparsing  608 "case alternative"),
      (609, yyparsing  609 "case alternative"),
      (610, yyparsing  610 "list of case alternatives"),
      (611, yyparsing  611 "case alternative"),
      (612, yyparsing  612 "a top level expression"),
      (613, yyparsing  613 "a top level expression"),
      (614, yyparsing  614 "a list comprehension qualifier"),
      (615, yyparsing  615 "list of expressions separated by ';'"),
      (616, yyparsing  616 "list comprehension qualifiers"),
      (617, yyparsing  617 "a qualified type"),
      (618, yyparsing  618 "local declarations"),
      (619, yyparsing  619 "a primary expression"),
      (620, yyparsing  620 "a primary expression"),
      (621, yyparsing  621 "a primary expression"),
      (622, yyparsing  622 "field"),
      (623, yyparsing  623 "field"),
      (624, yyparsing  624 "a member import specification"),
      (625, yyparsing  625 "an import item"),
      (626, yyparsing  626 "a member import specification"),
      (627, yyparsing  627 "a list of member imports"),
      (628, yyparsing  628 "java token"),
      (629, yyparsing  629 "java token"),
      (630, yyparsing  630 "java token"),
      (631, yyparsing  631 "java token"),
      (632, yyparsing  632 "java token"),
      (633, yyparsing  633 "java token"),
      (634, yyparsing  634 "java token"),
      (635, yyparsing  635 "java token"),
      (636, yyparsing  636 "java token"),
      (637, yyparsing  637 "java token"),
      (638, yyparsing  638 "java token"),
      (639, yyparsing  639 "java token")];
    sub11 = [      (640, yyparsing  640 "java token"),
      (641, yyparsing  641 "java token"),
      (642, yyparsing  642 "java token"),
      (643, yyparsing  643 "java token"),
      (644, yyparsing  644 "java token"),
      (645, yyparsing  645 "java token"),
      (646, yyparsing  646 "java token"),
      (647, yyparsing  647 "java token"),
      (648, yyparsing  648 "java token"),
      (649, yyparsing  649 "java token"),
      (650, yyparsing  650 "java token"),
      (651, yyparsing  651 "java token"),
      (652, yyparsing  652 "java token"),
      (653, yyparsing  653 "java token"),
      (654, yyparsing  654 "java token"),
      (655, yyparsing  655 "java token"),
      (656, yyparsing  656 "java token"),
      (657, yyparsing  657 "java token"),
      (658, yyparsing  658 "java token"),
      (659, yyparsing  659 "java token"),
      (660, yyparsing  660 "java token"),
      (661, yyparsing  661 "java token"),
      (662, yyparsing  662 "java token"),
      (663, yyparsing  663 "java token"),
      (664, yyparsing  664 "java token"),
      (665, yyparsing  665 "java token"),
      (666, yyparsing  666 "java token"),
      (667, yyparsing  667 "java token"),
      (668, yyparsing  668 "java token"),
      (669, yyparsing  669 "java token"),
      (670, yyparsing  670 "java token"),
      (671, yyparsing  671 "java token"),
      (672, yyparsing  672 "java token"),
      (673, yyparsing  673 "java token"),
      (674, yyparsing  674 "java token"),
      (675, yyparsing  675 "java token"),
      (676, yyparsing  676 "java token"),
      (677, yyparsing  677 "java token"),
      (678, yyparsing  678 "java tokens"),
      (679, yyparsing  679 "java code"),
      (680, yyparsing  680 "java token"),
      (681, yyparsing  681 "java token"),
      (682, yyparsing  682 "java token"),
      (683, yyparsing  683 "java token"),
      (684, yyparsing  684 "java token"),
      (685, yyparsing  685 "java token"),
      (686, yyparsing  686 "java token"),
      (687, yyparsing  687 "java token"),
      (688, yyparsing  688 "java token"),
      (689, yyparsing  689 "java token"),
      (690, yyparsing  690 "java token"),
      (691, yyexpect 691(yyfromCh '}')),
      (692, yyparsing  692 "java tokens"),
      (693, yyparsing  693 "a type variable"),
      (694, yyexpect 694(yyfromCh ')')),
      (695, yyparsing  695 "a type variable"),
      (696, yyparsing  696 "a type kind"),
      (697, yyparsing  697 "a field specification"),
      (698, yyparsing  698 "a field specification"),
      (699, yyexpect 699(yyfromId VARID)),
      (700, yyexpect 700(yyfromId VARID)),
      (701, yyparsing  701 "a field specification"),
      (702, yyexpect 702(yyfromId DCOLON)),
      (703, yyparsing  703 "field specifications")];
    sub12 = [      (704, yyparsing  704 "a field specification"),
      (705, yyparsing  705 "a field specification"),
      (706, yyparsing  706 "a variant of an algebraic datatype"),
      (707, yyparsing  707 "constructor fields"),
      (708, yyparsing  708 "constructor fields"),
      (709, yyparsing  709 "a non function type"),
      (710, yyparsing  710 "a list of types separated by '|'"),
      (711, yyparsing  711 "a non function type"),
      (712, yyparsing  712 "case alternative"),
      (713, yyparsing  713 "list of case alternatives"),
      (714, yyparsing  714 "a list of member imports"),
      (715, yyparsing  715 "java tokens"),
      (716, yyexpect 716(yyfromCh '}')),
      (717, yyparsing  717 "java code"),
      (718, yyparsing  718 "java tokens"),
      (719, yyparsing  719 "a type kind"),
      (720, yyparsing  720 "a type kind"),
      (721, yyparsing  721 "a field specification"),
      (722, yyparsing  722 "a field specification"),
      (723, yyparsing  723 "a field specification"),
      (724, yyparsing  724 "a field specification"),
      (725, yyparsing  725 "a constructor field"),
      (726, yyparsing  726 "field specifications"),
      (727, yyparsing  727 "constructor fields"),
      (728, yyparsing  728 "constructor fields"),
      (729, yyparsing  729 "a list of types separated by '|'"),
      (730, yyparsing  730 "java tokens"),
      (731, yyparsing  731 "java tokens"),
      (732, yyparsing  732 "a constructor field"),
      (733, yyparsing  733 "field specifications"),
      (734, yyparsing  734 "java tokens")];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` sub9 `seq` sub10 `seq` sub11 `seq` sub12 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8 ++ sub9 ++ sub10 ++ sub11 ++ sub12);
private yyeacts = let 
    sub1 = [      (2, yyAccept),
      (4, (-19)),
      (5, (-17)),
      (10, (-170)),
      (11, (-12)),
      (13, (-175)),
      (14, (-176)),
      (15, (-173)),
      (16, (-171)),
      (17, (-172)),
      (18, (-174)),
      (19, (-15)),
      (21, (-20)),
      (24, (-184)),
      (26, (-114)),
      (38, (-349)),
      (39, (-350)),
      (49, (-353)),
      (50, (-352)),
      (51, (-355)),
      (52, (-356)),
      (53, (-357)),
      (54, (-358)),
      (55, (-351)),
      (56, (-359)),
      (57, (-354)),
      (61, (-193)),
      (62, (-192)),
      (64, (-428)),
      (66, (-26)),
      (67, (-29)),
      (68, (-30)),
      (69, (-31)),
      (70, (-39)),
      (71, (-116)),
      (72, (-36)),
      (73, (-37)),
      (74, (-38)),
      (75, (-115)),
      (76, (-117)),
      (77, (-118)),
      (78, (-119)),
      (79, (-120)),
      (80, (-121)),
      (81, (-125)),
      (82, (-126)),
      (83, (-127)),
      (84, (-204)),
      (85, (-426)),
      (86, (-429)),
      (91, (-211)),
      (92, (-340)),
      (93, (-340)),
      (96, (-427)),
      (97, (-402)),
      (98, (-398)),
      (99, (-403)),
      (100, (-404)),
      (101, (-406)),
      (103, (-412)),
      (104, (-23)),
      (109, (-14)),
      (111, (-21)),
      (112, (-185))];
    sub2 = [      (113, (-183)),
      (115, (-186)),
      (116, (-180)),
      (117, (-143)),
      (118, (-194)),
      (119, (-196)),
      (120, (-195)),
      (121, (-169)),
      (123, (-191)),
      (124, (-214)),
      (126, (-215)),
      (127, (-213)),
      (128, (-212)),
      (132, (-293)),
      (136, (-269)),
      (137, (-340)),
      (140, (-277)),
      (141, (-280)),
      (142, (-340)),
      (144, (-35)),
      (146, (-181)),
      (149, (-390)),
      (151, (-282)),
      (155, (-32)),
      (156, (-33)),
      (157, (-34)),
      (158, (-210)),
      (159, (-397)),
      (161, (-432)),
      (168, (-443)),
      (173, (-3)),
      (174, (-27)),
      (176, (-347)),
      (178, (-407)),
      (179, (-198)),
      (180, (-199)),
      (181, (-197)),
      (182, (-200)),
      (183, (-202)),
      (187, (-283)),
      (188, (-284)),
      (191, (-346)),
      (192, (-378)),
      (195, (-405)),
      (199, (-1)),
      (201, (-25)),
      (202, (-13)),
      (203, (-182)),
      (204, (-179)),
      (206, (-143)),
      (207, (-143)),
      (209, (-140)),
      (216, (-5)),
      (217, (-6)),
      (219, (-7)),
      (220, (-11)),
      (222, (-216)),
      (223, (-4)),
      (224, (-217)),
      (225, (-218)),
      (227, (-221)),
      (229, (-251)),
      (239, (-265)),
      (241, (-272))];
    sub3 = [      (246, (-256)),
      (247, (-273)),
      (248, (-245)),
      (249, (-246)),
      (251, (-281)),
      (252, (-293)),
      (258, (-392)),
      (263, (-135)),
      (270, (-363)),
      (273, (-449)),
      (277, (-433)),
      (279, (-442)),
      (287, (-444)),
      (289, (-387)),
      (290, (-386)),
      (291, (-409)),
      (292, (-28)),
      (294, (-430)),
      (298, (-201)),
      (300, (-203)),
      (301, (-228)),
      (302, (-229)),
      (303, (-235)),
      (304, (-234)),
      (305, (-244)),
      (306, (-321)),
      (307, (-209)),
      (312, (-345)),
      (313, (-379)),
      (314, (-395)),
      (315, (-396)),
      (316, (-414)),
      (319, (-415)),
      (320, (-416)),
      (327, (-190)),
      (329, (-189)),
      (330, (-143)),
      (331, (-142)),
      (332, (-147)),
      (336, (-145)),
      (340, (-151)),
      (341, (-154)),
      (342, (-155)),
      (343, (-156)),
      (345, (-42)),
      (346, (-238)),
      (347, (-237)),
      (350, (-207)),
      (351, (-205)),
      (352, (-206)),
      (354, (-10)),
      (356, (-290)),
      (357, (-240)),
      (359, (-219)),
      (360, (-224)),
      (361, (-225)),
      (362, (-227)),
      (366, (-312)),
      (373, (-295)),
      (374, (-302)),
      (375, (-305)),
      (376, (-311)),
      (378, (-299)),
      (379, (-286))];
    sub4 = [      (382, (-292)),
      (383, (-300)),
      (386, (-270)),
      (389, (-278)),
      (392, (-258)),
      (395, (-257)),
      (402, (-338)),
      (404, (-436)),
      (405, (-435)),
      (406, (-434)),
      (407, (-391)),
      (409, (-389)),
      (417, (-413)),
      (418, (-437)),
      (423, (-439)),
      (424, (-438)),
      (425, (-462)),
      (428, (-445)),
      (430, (-388)),
      (431, (-343)),
      (434, (-431)),
      (439, (-322)),
      (443, (-341)),
      (445, (-128)),
      (448, (-134)),
      (450, (-361)),
      (451, (-362)),
      (459, (-420)),
      (461, (-2)),
      (463, (-188)),
      (464, (-22)),
      (466, (-141)),
      (469, (-159)),
      (470, (-146)),
      (472, (-166)),
      (473, (-167)),
      (474, (-168)),
      (475, (-158)),
      (478, (-44)),
      (480, (-40)),
      (481, (-8)),
      (482, (-9)),
      (484, (-289)),
      (494, (-320)),
      (495, (-314)),
      (496, (-315)),
      (497, (-317)),
      (498, (-304)),
      (499, (-307)),
      (500, (-308)),
      (501, (-306)),
      (502, (-310)),
      (503, (-309)),
      (504, (-303)),
      (505, (-294)),
      (506, (-285)),
      (507, (-287)),
      (508, (-296)),
      (511, (-291)),
      (512, (-268)),
      (513, (-340)),
      (514, (-276)),
      (515, (-260)),
      (516, (-247))];
    sub5 = [      (519, (-259)),
      (520, (-250)),
      (521, (-279)),
      (523, (-339)),
      (524, (-394)),
      (527, (-360)),
      (531, (-139)),
      (534, (-373)),
      (535, (-364)),
      (536, (-371)),
      (538, (-441)),
      (539, (-440)),
      (541, (-447)),
      (542, (-446)),
      (543, (-344)),
      (544, (-459)),
      (545, (-451)),
      (546, (-232)),
      (547, (-231)),
      (549, (-235)),
      (550, (-236)),
      (551, (-233)),
      (552, (-129)),
      (553, (-130)),
      (554, (-131)),
      (555, (-133)),
      (556, (-342)),
      (558, (-375)),
      (559, (-377)),
      (563, (-424)),
      (564, (-425)),
      (565, (-419)),
      (566, (-456)),
      (567, (-417)),
      (568, (-418)),
      (569, (-457)),
      (571, (-454)),
      (572, (-187)),
      (573, (-178)),
      (575, (-153)),
      (579, (-150)),
      (580, (-144)),
      (581, (-239)),
      (583, (-241)),
      (584, (-223)),
      (585, (-226)),
      (587, (-263)),
      (591, (-254)),
      (592, (-255)),
      (596, (-319)),
      (597, (-318)),
      (598, (-316)),
      (599, (-288)),
      (600, (-301)),
      (601, (-297)),
      (602, (-271)),
      (606, (-393)),
      (607, (-399)),
      (608, (-381)),
      (611, (-382)),
      (612, (-400)),
      (613, (-401)),
      (615, (-465)),
      (616, (-367))];
    sub6 = [      (617, (-230)),
      (618, (-124)),
      (619, (-423)),
      (620, (-421)),
      (621, (-422)),
      (624, (-162)),
      (625, (-152)),
      (626, (-161)),
      (628, (-47)),
      (629, (-48)),
      (630, (-49)),
      (631, (-52)),
      (632, (-50)),
      (633, (-51)),
      (634, (-53)),
      (635, (-54)),
      (636, (-55)),
      (637, (-56)),
      (638, (-57)),
      (639, (-58)),
      (640, (-59)),
      (641, (-60)),
      (642, (-61)),
      (643, (-62)),
      (644, (-63)),
      (645, (-64)),
      (646, (-65)),
      (647, (-66)),
      (648, (-67)),
      (649, (-68)),
      (650, (-69)),
      (651, (-70)),
      (652, (-71)),
      (653, (-72)),
      (654, (-73)),
      (655, (-74)),
      (656, (-75)),
      (657, (-76)),
      (658, (-77)),
      (659, (-78)),
      (660, (-79)),
      (661, (-80)),
      (662, (-81)),
      (663, (-82)),
      (664, (-83)),
      (665, (-84)),
      (666, (-85)),
      (667, (-86)),
      (668, (-87)),
      (669, (-88)),
      (670, (-89)),
      (671, (-90)),
      (672, (-91)),
      (673, (-92)),
      (674, (-93)),
      (675, (-94)),
      (676, (-103)),
      (677, (-104)),
      (679, (-46)),
      (680, (-101)),
      (681, (-99)),
      (682, (-100)),
      (683, (-95)),
      (684, (-96))];
    sub7 = [      (685, (-97)),
      (686, (-98)),
      (687, (-102)),
      (688, (-105)),
      (689, (-106)),
      (690, (-107)),
      (693, (-253)),
      (695, (-252)),
      (701, (-337)),
      (704, (-331)),
      (705, (-334)),
      (706, (-313)),
      (709, (-248)),
      (711, (-249)),
      (712, (-380)),
      (713, (-384)),
      (714, (-165)),
      (717, (-45)),
      (718, (-109)),
      (719, (-264)),
      (720, (-261)),
      (721, (-333)),
      (722, (-332)),
      (723, (-336)),
      (724, (-335)),
      (727, (-327)),
      (728, (-326)),
      (729, (-243)),
      (730, (-113)),
      (732, (-328)),
      (733, (-330)),
      (734, (-111))];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7);


decodeArr s1 s2 = arrayFromIndexList (zip (un s1) (un s2))
    where {
        un :: String -> [Int];
        un s = (map ord . unpacked) s }
;
private yygo0 = decodeArr "\u0001\u0002\u0003\u0010\u0011\u0012\u0013" "\u0002\u0002\u0002\u0004\u0004\u0003\u0003";
private yygo1 = decodeArr "\u0010\u0011" "\u0005\u0005";
private yygo3 = decodeArr "\u0014\u0015\u0016" "\t\t\t";
private yygo6 = decodeArr "\f\r\u000e\u000fÂªÂ«Â¬Â­Â®Â¯Â°" "\u0013\u0013\u0013\u0015\u0014\u0014\u0014\u0014\u0014\u0014\u0014";
private yygo8 = decodeArr "\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'(rstuvwxy}~\u007f\u008c\u008d\u008eÂ©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ£ÄÄÄÄÄÄÄ£Ä¤Ä¥Ä¦Ä§Ä¨Ä©ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "AAABBBEEEEDDDDJCFFFFFFFPPPHHHTUUUVVVWWXXXIQZZZZYYRR[MMNOGL\\\\\\\\\\]]KKSSS^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo9 = decodeArr "\u0017\u0018\u0019" "lkk";
private yygo12 = decodeArr "\f\r\u000eÂªÂ«Â¬Â­Â®Â¯Â°" "mmm\u0014\u0014\u0014\u0014\u0014\u0014\u0014";
private yygo22 = decodeArr "\f\r\u000e\u000fÂªÂ«Â¬Â­Â®Â¯Â°" "\u0013\u0013\u0013o\u0014\u0014\u0014\u0014\u0014\u0014\u0014";
private yygo25 = decodeArr "Â¹ÂºÃÃ" "ttss";
private yygo27 = decodeArr "\f\r\u000e\u000fÂªÂ«Â¬Â­Â®Â¯Â°" "\u0013\u0013\u0013u\u0014\u0014\u0014\u0014\u0014\u0014\u0014";
private yygo31 = decodeArr "Â©Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃ" "T~\u007f\u007f\u0080\u0080\u0080\u0080\u0081\u0081\u0081\u0081\u0082\u0082\u0082\u0082";
private yygo34 = decodeArr "Â¶Â·Â¸ÄÄÄ" "\u0087\u0087\u0087\u0088\u0089\u0089";
private yygo35 = decodeArr "Â¶Â·Â¸ÄÄÄÄÄ" "\u008b\u008b\u008b\u008c\u008d\u008d\u008e\u008e";
private yygo36 = decodeArr "ÄÄ£Ä¤Ä¥Ä¦Ä§" "\u0090\\\\\\\\\\";
private yygo40 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````a\u0094\u0094\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo41 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````a\u0096\u0096\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo42 = decodeArr "Â¶Â·Â¸ÄÄÄÄÄ" "\u008b\u008b\u008b\u008c\u008d\u008d\u0097\u0097";
private yygo45 = decodeArr "stuvwxy}~\u007fÂ©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÃÃÃ£ÄÄÄÄÄÄÄ£Ä¤Ä¥Ä¦Ä§Ä¨Ä©ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "\u009b\u009b\u009b\u009b\u009b\u009b\u009bPPPTUUUVVVWWQZZZZYYRR[MMNOGL\\\\\\\\\\]]KKSSS^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo46 = decodeArr "stuvwxy}~\u007fÂ©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÃÃÃ£ÄÄÄÄÄÄÄ£Ä¤Ä¥Ä¦Ä§Ä¨Ä©ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "\u009c\u009c\u009c\u009c\u009c\u009c\u009cPPPTUUUVVVWWQZZZZYYRR[MMNOGL\\\\\\\\\\]]KKSSS^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo47 = decodeArr "stuvwxy}~\u007fÂ©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÃÃÃ£ÄÄÄÄÄÄÄ£Ä¤Ä¥Ä¦Ä§Ä¨Ä©ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "\u009d\u009d\u009d\u009d\u009d\u009d\u009dPPPTUUUVVVWWQZZZZYYRR[MMNOGL\\\\\\\\\\]]KKSSS^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo48 = decodeArr "Ã£" "\u009e";
private yygo58 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````a\u009f\u009f\u009f\u009f\u009fccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo59 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸Â¿ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿ÇÇ" "UUUVVVÂ£Â¤Â¤```````````aÂ¦Â¦Â§Â§Â§Â§bbbbbccddffeeeeeeeeeeeeeeggggggggggggggggggggggÂ¥Â¥";
private yygo60 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿ÇÇÇ" "UUUVVVWW```````````aÂ©Â©\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeeggggggggggggggggggggggÂªÂªÂª";
private yygo63 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````Â¬Â¬Â«Â«ffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo83 = decodeArr "ÅÅ" "Â°Â°";
private yygo87 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````Â²Â²ffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo88 = decodeArr "Â¿ÃÃÃÃÃ" "ÂµÂ¶Â¶Â¶Â·Â·";
private yygo92 = decodeArr "ÅÅÅ" "Â»Â»Â»";
private yygo93 = decodeArr "ÅÅÅ" "Â¼Â¼Â¼";
private yygo94 = decodeArr "Å¹ÅºÅ»" "ÃÂ¿Â¿";
private yygo99 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````ÃÃffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo106 = decodeArr "\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'(rstuvwxy}~\u007f\u008c\u008d\u008eÂ©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ£ÄÄÄÄÄÄÄ£Ä¤Ä¥Ä¦Ä§Ä¨Ä©ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "ÃÃÃBBBEEEEDDDDJCFFFFFFFPPPHHHTUUUVVVWWXXXIQZZZZYYRR[MMNOGL\\\\\\\\\\]]KKSSS^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo108 = decodeArr "\u0017\u0018\u0019" "lÃÃ";
private yygo110 = decodeArr "\f\r\u000eÂªÂ«Â¬Â­Â®Â¯Â°" "ÃÃÃ\u0014\u0014\u0014\u0014\u0014\u0014\u0014";
private yygo114 = decodeArr "Â¹ÂºÃÃ" "ÃÃss";
private yygo117 = decodeArr "\u008f\u0090\u0091\u0092\u0093Â©" "ÃÃÃÃÃÃ";
private yygo122 = decodeArr ")*" "ÃÃ";
private yygo125 = decodeArr "Â¿ÃÃ" "ÃÃÃ";
private yygo129 = decodeArr "\u0004\u0005\u0006\u0007\b\t\n\u000bÂ¿ÃÃÃÃÃÄ¡Ä¢" "ÃÃÃÃÃÃÃÃÃ Ã¡Ã¡Ã¢Ã¢Ã¢Ã£Ã£";
private yygo131 = decodeArr "Ã»Ã¼Ã½Ã¾Ã¿ÄªÄ«" "Ã©Ã©Ã©Ã©Ã©Ã¨Ã¨";
private yygo132 = decodeArr "Ã»Ã¼Ã½Ã¾Ã¿ÄªÄ«" "Ã©Ã©Ã©Ã©Ã©Ã«Ã«";
private yygo134 = decodeArr "Â¶Â·Â¸ÄÄÄÄ" "\u0087\u0087\u0087Ã­Ã®Ã®Ã®";
private yygo135 = decodeArr "Ã»Ã¼Ã½Ã¾Ã¿" "Ã¯Ã¯Ã¯Ã¯Ã¯";
private yygo137 = decodeArr "ÅÅÅ" "Ã±Ã±Ã±";
private yygo138 = decodeArr "Â¶Â·Â¸ÄÄÄÄ" "\u008b\u008b\u008bÃ²Ã³Ã³Ã³";
private yygo139 = decodeArr "Â¶Â·Â¸ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄ" "Ã¶Ã¶Ã¶Ã·Ã·Ã·Ã·Ã·Ã·Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹";
private yygo142 = decodeArr "ÅÅÅ" "Ã»Ã»Ã»";
private yygo145 = decodeArr "Ã»Ã¼Ã½Ã¾Ã¿ÄªÄ«" "Ã©Ã©Ã©Ã©Ã©Ã¾Ã¾";
private yygo147 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸Â¿ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿ÇÇ" "UUUVVVÄÄÄ```````````aÂ¦Â¦Â§Â§Â§Â§bbbbbccddffeeeeeeeeeeeeeeggggggggggggggggggggggÂ¥Â¥";
private yygo148 = decodeArr "ÆÆ" "ÄÄ";
private yygo152 = decodeArr "\u0087\u0088\u0089\u008a\u008bÂ©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "ÄÄÄÄÄTUUUVVVWWÄZZZZYYÄÄÄ^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo153 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å«Å¬Å­Å±Å²Å³Å´ÅµÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````ÄÄÄÄÄÄÄÄaÄÄ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo154 = decodeArr "Â©Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃ" "T~\u007f\u007f\u0080\u0080\u0080\u0080\u0081\u0081\u0081\u0081\u0082\u0082\u0082\u0082";
private yygo160 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````a\u009f\u009f\u009f\u009f\u009fccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo162 = decodeArr "ÇÇ" "ÄÄ";
private yygo163 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÄÄ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo164 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````Â²Â²ffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo167 = decodeArr "Â¿" "Ä";
private yygo171 = decodeArr "ÆÆÆ" "Ä¡Ä¢Ä¢";
private yygo172 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````Â¬Â¬Ä£Ä£ffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo174 = decodeArr "\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'(rstuvwxy}~\u007f\u008c\u008d\u008eÂ©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ£ÄÄÄÄÄÄÄ£Ä¤Ä¥Ä¦Ä§Ä¨Ä©ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "Ä¤Ä¤Ä¤BBBEEEEDDDDJCFFFFFFFPPPHHHTUUUVVVWWXXXIQZZZZYYRR[MMNOGL\\\\\\\\\\]]KKSSS^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo177 = decodeArr "Â©ÇÇÇÇÇ" "Ä§Ä¨Ä¨Ä¨Ä©Ä©";
private yygo182 = decodeArr "Â¿ÃÃÃÃÃ" "ÂµÂ¶Â¶Â¶ÄªÄª";
private yygo184 = decodeArr "Â¶Â·Â¸Ã¤Ã¥Ã¦Ã©ÃªÃ«Ã¬Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶Ä¬Ä¬Ä­Ä®Ä®Ä°Ä°Ä¯Ä²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo185 = decodeArr "Â©ÃÃÃÃÃÃ" "TZZZZÄ³Ä³";
private yygo189 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å´ÅµÅ¶Å·Å¸ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````Ä¶Ä¶Ä·Ä·Ä·aÄµÄµ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo190 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÄ¸Ä¸\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo192 = decodeArr "Å¹ÅºÅ»" "ÃÄ¹Ä¹";
private yygo193 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÄºÄºÄºÄºbbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo194 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÄ»Ä»Ä»Ä»bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo196 = decodeArr "Â¿ÃÃ" "Ä¿ÅÅ";
private yygo197 = decodeArr "ÇÇÇÇÇÇ" "ÅÅÅÅÅÅ";
private yygo198 = decodeArr "\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'(rstuvwxy}~\u007f\u008c\u008d\u008eÂ©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ£ÄÄÄÄÄÄÄ£Ä¤Ä¥Ä¦Ä§Ä¨Ä©ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "ÅÅÅBBBEEEEDDDDJCFFFFFFFPPPHHHTUUUVVVWWXXXIQZZZZYYRR[MMNOGL\\\\\\\\\\]]KKSSS^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo200 = decodeArr "Â±Â²Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃ" "ÅÅÅÅÅÅÅÅÅss";
private yygo206 = decodeArr "\u008f\u0090\u0091\u0092\u0093Â©" "ÅÅÅÅÅÃ";
private yygo207 = decodeArr "\u008f\u0090\u0091\u0092\u0093Â©" "ÅÅÅÅÅÃ";
private yygo208 = decodeArr "\u0094\u0095\u0096\u0097\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ³Â´ÂµÂ¶Â·Â¸Â¿ÃÃ" "ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ";
private yygo211 = decodeArr "Â¶Â·Â¸Ã¦Ã­Ã®Ã¯Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÅÅÅÅÅÄ²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo212 = decodeArr "+," "ÅÅ";
private yygo218 = decodeArr "\u0005\u0006\u0007\b\t\n\u000b" "Å¢Å¢Å¢Å¢Å¢Å¢Å¢";
private yygo221 = decodeArr "Â¶Â·Â¸Ã¦Ã­Ã®Ã¯Ã°Ã±Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÅÅ¥Å¥Å¥Å¦Å¦ÅÄ²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo226 = decodeArr "Ä¡Ä¢" "Å§Å§";
private yygo228 = decodeArr "Â¶Â·Â¸ÃÃ Ã¡Ã¢Ã¤Ã¥Ã¦Ã©ÃªÃ«Ã¬Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶Å©Å©ÅªÅªÅ¨Å¨Ä­Ä®Ä®Ä°Ä°Ä¯Ä²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo231 = decodeArr "Ä®Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹Äº" "ÅµÅµÅµÅ¶Å¶Å¶Å¶Å·Å·Å·Å¸Å¸Å¸";
private yygo233 = decodeArr "Ã»Ã¼Ã½Ã¾Ã¿ÄªÄ«" "Ã©Ã©Ã©Ã©Ã©ÅºÅº";
private yygo234 = decodeArr "ÄÄÄ¬Ä­Ä®Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹Äº" "Å½Å½Å¾Å¾Å¿Å¿Å¿Å¶Å¶Å¶Å¶Å·Å·Å·Å¸Å¸Å¸";
private yygo244 = decodeArr "Â¶Â·Â¸Ã¦Ã­Ã®Ã¯Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅÇÇ" "Ã¶Ã¶Ã¶ÅÆÆÆÅÄ²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±ÆÆ";
private yygo245 = decodeArr "Â¶Â·Â¸Ã¦Ã­Ã®Ã¯Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÅÆÆÆÅÄ²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo250 = decodeArr "Â¶Â·Â¸ÄÄÄÄÄ" "Ã¶Ã¶Ã¶ÆÆÆÆÆ";
private yygo252 = decodeArr "Ã»Ã¼Ã½Ã¾Ã¿ÄªÄ«" "Ã©Ã©Ã©Ã©Ã©ÆÆ";
private yygo253 = decodeArr "Â¶Â·Â¸Ã¤Ã¥Ã¦Ã©ÃªÃ«Ã¬Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÆÆÄ­Ä®Ä®Ä°Ä°Ä¯Ä²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo255 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````a\u009f\u009f\u009f\u009f\u009fccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo256 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÄÄ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo257 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````Â²Â²ffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo260 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÆÆ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo261 = decodeArr "Â¶Â·Â¸Ã¤Ã¥Ã¦Ã©ÃªÃ«Ã¬Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÆÆÄ­Ä®Ä®Ä°Ä°Ä¯Ä²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo264 = decodeArr "ÅÅ" "Â°Â°";
private yygo278 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿ÇÇÇ" "UUUVVVWW```````````aÆ£Æ£\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeeggggggggggggggggggggggÆ¤Æ¤Æ¤";
private yygo280 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿ÇÇÇ" "UUUVVVWW```````````aÆ¥Æ¥\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeeggggggggggggggggggggggÆ¦Æ¦Æ¦";
private yygo281 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÄºÄºÄºÄºbbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo282 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÄ»Ä»Ä»Ä»bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo284 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿ÇÇÇ" "UUUVVVWW```````````aÆ¥Æ¥\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeeggggggggggggggggggggggÆ©Æ©Æ©";
private yygo285 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å«Å¬Å­Å®Å¯Å°Å´ÅµÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````ÆªÆªÆªÆ«Æ«Æ«ÄÄaÄÄ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo286 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÆ­Æ­\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo288 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÆ®Æ®\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo293 = decodeArr "\u0087\u0088\u0089\u008a\u008bÂ©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "ÄÄÆ°Æ°Æ°TUUUVVVWWÄZZZZYYÄÄÄ^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo299 = decodeArr "Ã»Ã¼Ã½Ã¾Ã¿ÄªÄ«" "Ã©Ã©Ã©Ã©Ã©Æ´Æ´";
private yygo306 = decodeArr "Â¶Â·Â¸ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶Ä²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Æ·Æ·";
private yygo308 = decodeArr "rz{|}~\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086Â©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÃÃÃ£ÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "Æ¼Æ¾Æ¾Æ¾Æ½Æ½Æ½ÇÇÇÇÆ¿Æ¿Æ¿TUUUVVVWWQZZZZYYRR[SSS^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo311 = decodeArr "Å©Åª" "ÇÇ";
private yygo317 = decodeArr "ÇÇÇÇÇÇ" "ÇÇÇÅÅÅ";
private yygo318 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÇÇ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo325 = decodeArr "Â¹ÂºÃÃ" "ÇÇss";
private yygo330 = decodeArr "\u008f\u0090\u0091\u0092\u0093Â©" "ÇÇÇÇÇÃ";
private yygo334 = decodeArr "Â¹ÂºÃÃ" "ttss";
private yygo335 = decodeArr "\u0097\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ³Â´ÂµÂ¶Â·Â¸Â¿ÃÃ" "ÅÅÅÅÅÅÇÇÇÅÅÅÅÅÅÅÅÅ";
private yygo339 = decodeArr "Â¦Â§Â¨Â¿" "ÇÇÇÇ";
private yygo344 = decodeArr "\u0094\u0095\u0096\u0097\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ³Â´ÂµÂ¶Â·Â¸Â¿ÃÃ" "ÇÇÇÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ";
private yygo348 = decodeArr "Â¶Â·Â¸Ã¦Ã­Ã®Ã¯Ã°Ã±Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÅÅ¥Å¥Å¥ÇÇÅÄ²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo349 = decodeArr "-." "Ç Ç ";
private yygo353 = decodeArr "\u0005\u0006\u0007\b\t\n\u000b" "Ç¡Ç¡Ç¡Ç¡Ç¡Ç¡Ç¡";
private yygo355 = decodeArr "\u0005\u0006\u0007\b\t\n\u000b" "Ç¢Ç¢Ç¢Ç¢Ç¢Ç¢Ç¢";
private yygo364 = decodeArr "Â¶Â·Â¸Ã¦Ã­Ã®Ã¯Ã°Ã±Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÅÅ¥Å¥Å¥Ç©Ç©ÅÄ²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo365 = decodeArr "Â¶Â·Â¸Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÇªÄ²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo366 = decodeArr "Â¶Â·Â¸ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄ»Ä¼Ä½Ä¾Ä¿Å" "Ã¶Ã¶Ã¶Ç®Ç®Ç®Ç®Ç®Ç®Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ç¯Ç¯Ç°Ç°Ç°Ç±";
private yygo367 = decodeArr "Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹Äº" "Ç²Ç²Ç²Ç²Å·Å·Å·Å¸Å¸Å¸";
private yygo368 = decodeArr "ÄµÄ¶Ä·Ä¸Ä¹Äº" "Ç³Ç³Ç³Å¸Å¸Å¸";
private yygo369 = decodeArr "ÄµÄ¶Ä·Ä¸Ä¹Äº" "Ç´Ç´Ç´Å¸Å¸Å¸";
private yygo370 = decodeArr "ÄµÄ¶Ä·Ä¸Ä¹Äº" "ÇµÇµÇµÅ¸Å¸Å¸";
private yygo371 = decodeArr "Ä¸Ä¹Äº" "Ç¶Ç¶Ç¶";
private yygo372 = decodeArr "Ä¸Ä¹Äº" "Ç·Ç·Ç·";
private yygo377 = decodeArr "Ä®Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹Äº" "Ç¹Ç¹Ç¹Å¶Å¶Å¶Å¶Å·Å·Å·Å¸Å¸Å¸";
private yygo381 = decodeArr "\u0004\u0005\u0006\u0007\b\t\n\u000bÄÄ " "Ç»ÃÃÃÃÃÃÃÇ¼Ç¼";
private yygo384 = decodeArr "ÄÄÄ¬Ä­Ä®Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹Äº" "Ç¾Ç¾Ç¿Ç¿Å¿Å¿Å¿Å¶Å¶Å¶Å¶Å·Å·Å·Å¸Å¸Å¸";
private yygo385 = decodeArr "Â¶Â·Â¸ÄÄÄÄ" "\u0087\u0087\u0087Ã­ÈÈÈ";
private yygo387 = decodeArr "Ã»Ã¼Ã½Ã¾Ã¿" "ÈÈÈÈÈ";
private yygo388 = decodeArr "Â¶Â·Â¸ÄÄÄÄ" "\u008b\u008b\u008bÃ²ÈÈÈ";
private yygo397 = decodeArr "ÇÇ" "ÆÆ";
private yygo399 = decodeArr "Â¶Â·Â¸ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄ" "Ã¶Ã¶Ã¶ÈÈÈÈÈÈÃ¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹";
private yygo400 = decodeArr "Ä¬Ä­Ä®Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹Äº" "Å¾Å¾Å¿Å¿Å¿Å¶Å¶Å¶Å¶Å·Å·Å·Å¸Å¸Å¸";
private yygo403 = decodeArr "Â¶Â·Â¸Ã¤Ã¥Ã¦Ã©ÃªÃ«Ã¬Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÈÈÄ­Ä®Ä®Ä°Ä°Ä¯Ä²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo408 = decodeArr "ÆÆ" "ÈÈ";
private yygo410 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å¨Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````ÈÈÈÈÈÈÈaÈÈ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo411 = decodeArr "\u0087\u0088\u0089\u008a\u008bÂ©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "ÄÄÈÈÈTUUUVVVWWÄZZZZYYÄÄÄ^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo413 = decodeArr "\u0087\u0088\u0089\u008a\u008bÂ©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "ÄÄÈÈÈTUUUVVVWWÄZZZZYYÄÄÄ^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo414 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÈÈ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo415 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÈÈ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo416 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å«Å¬Å­Å±Å²Å³Å´ÅµÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````ÄÄÄÈÈÈÄÄaÄÄ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo433 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÈ È \u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo435 = decodeArr "Â©ÇÇÇÇÇ" "Ä§È¡È¡È¡Ä©Ä©";
private yygo436 = decodeArr "Ã§Ã¨" "È¤È¤";
private yygo437 = decodeArr "Â¶Â·Â¸Ã«Ã¬Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶È¦È¦È¥Ä²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo438 = decodeArr "Â¶Â·Â¸Ã«Ã¬Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶È§È§È¥Ä²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo440 = decodeArr "}~\u007fÂ©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÃÃÃ£ÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "È¨È¨È¨TUUUVVVWWQZZZZYYRR[SSS^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo441 = decodeArr "}~\u007fÂ©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÃÃÃ£ÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "È©È©È©TUUUVVVWWQZZZZYYRR[SSS^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo442 = decodeArr "}~\u007fÂ©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÃÃÃ£ÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "ÈªÈªÈªTUUUVVVWWQZZZZYYRR[SSS^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo444 = decodeArr "r}~\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086Â©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÃÃÃ£ÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "Æ¼Æ½Æ½Æ½ÇÇÇÇÈ«È«È«TUUUVVVWWQZZZZYYRR[SSS^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo449 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å´ÅµÅ¶Å·Å¸ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````Ä¶Ä¶È®È®È®aÄµÄµ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo452 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÈ¯È¯\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo456 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÈ¶È¶\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo458 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÈ¹È¹\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo460 = decodeArr "ÇÇÇÇÇÇ" "È»È»È»ÅÅÅ";
private yygo462 = decodeArr "Â¹ÂºÃÃ" "È¼È¼ss";
private yygo465 = decodeArr "Â±Â²Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃ" "È½È½ÅÅÅÅÅÅÅss";
private yygo467 = decodeArr "Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â¿" "ÉÉÉÉÉÉÉÉÉÇ";
private yygo468 = decodeArr "Â¹ÂºÃÃ" "ÃÃss";
private yygo471 = decodeArr "\u0094\u0095\u0096\u0097\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ³Â´ÂµÂ¶Â·Â¸Â¿ÃÃ" "ÉÉÉÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ";
private yygo477 = decodeArr "Â¶Â·Â¸Ã¦Ã­Ã®Ã¯Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÅÉÉÉÅÄ²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo483 = decodeArr "Â¶Â·Â¸Ã¦Ã­Ã®Ã¯Ã°Ã±Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÅÅ¥Å¥Å¥ÉÉÅÄ²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo485 = decodeArr "Â¶Â·Â¸Ã¦Ã­Ã®Ã¯Ã°Ã±Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÅÅ¥Å¥Å¥ÉÉÅÄ²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo486 = decodeArr "Â¶Â·Â¸ÃÃ Ã¡Ã¢Ã¤Ã¥Ã¦Ã©ÃªÃ«Ã¬Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶Å©Å©ÉÉÅ¨Å¨Ä­Ä®Ä®Ä°Ä°Ä¯Ä²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo487 = decodeArr "Â¶Â·Â¸Ã¦Ã­Ã®Ã¯Ã°Ã±Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÅÅ¥Å¥Å¥ÉÉÅÄ²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo488 = decodeArr "ÄÄÄÄ" "ÉÉÉÉ";
private yygo491 = decodeArr "\u0010\u0011\u0012\u0013ÅÅÅÅÅÅ" "\u0004\u0004ÉÉÉÉÉÉÉÉ";
private yygo492 = decodeArr "Â¶Â·Â¸ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅ" "Ã¶Ã¶Ã¶Ç®Ç®Ç®Ç®Ç®Ç®Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹É";
private yygo493 = decodeArr "Â¶Â·Â¸ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅ" "Ã¶Ã¶Ã¶Ç®Ç®Ç®Ç®Ç®Ç®Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹É";
private yygo496 = decodeArr "Â¶Â·Â¸ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄ»Ä¼Ä½Ä¾Ä¿Å" "Ã¶Ã¶Ã¶Ç®Ç®Ç®Ç®Ç®Ç®Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹ÉÉÇ°Ç°Ç°Ç±";
private yygo507 = decodeArr "Ä¡Ä¢" "ÉÉ";
private yygo509 = decodeArr "Ä¬Ä­Ä®Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹Äº" "ÉÉÅ¿Å¿Å¿Å¶Å¶Å¶Å¶Å·Å·Å·Å¸Å¸Å¸";
private yygo510 = decodeArr "\u0004\u0005\u0006\u0007\b\t\n\u000bÄÄ " "Ç»ÃÃÃÃÃÃÃÉÉ";
private yygo513 = decodeArr "ÅÅÅ" "ÉÉÉ";
private yygo517 = decodeArr "Â¶Â·Â¸Ã¦Ã­Ã®Ã¯Ã°Ã±Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÅÅ¥Å¥Å¥ÉÉÅÄ²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo518 = decodeArr "Â¶Â·Â¸Ã¦Ã­Ã®Ã¯Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÅÉÉÉÉÉÅÄ²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo522 = decodeArr "Ä¬Ä­Ä®Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹Äº" "Ç¿Ç¿Å¿Å¿Å¿Å¶Å¶Å¶Å¶Å·Å·Å·Å¸Å¸Å¸";
private yygo526 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÉÉ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo528 = decodeArr "Å©ÅªÅ¹ÅºÅ»" "É¡É¡ÃÉ É ";
private yygo529 = decodeArr "ÅÅ" "É£É£";
private yygo532 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÉ¥É¥\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo537 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿ÇÇÇ" "UUUVVVWW```````````aÆ£Æ£\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeeggggggggggggggggggggggÉ§É§É§";
private yygo540 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å«Å¬Å­Å®Å¯Å°Å´ÅµÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````ÆªÆªÆªÉ¨É¨É¨ÄÄaÄÄ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo548 = decodeArr "Â¶Â·Â¸Ã©ÃªÃ«Ã¬Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶É©É©Ä°Ä°Ä¯Ä²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo557 = decodeArr "rz{|}~\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086Â©Â³Â´ÂµÂ¶Â·Â¸ÃÃÃÃÃÃÃÃÃÃÃÃ£ÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "Æ¼ÉªÉªÉªÆ½Æ½Æ½ÇÇÇÇÆ¿Æ¿Æ¿TUUUVVVWWQZZZZYYRR[SSS^```````````a____bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo560 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÈ¶È¶\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo562 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÈ¹È¹\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo574 = decodeArr "Â Â¡Â¢Â¦Â§Â¨Â¿" "É°É°É°ÉÉÉÇ";
private yygo577 = decodeArr "Â¦Â§Â¨Â¿" "É²É²É²Ç";
private yygo582 = decodeArr "/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopq" "Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê³Ê³Ê³Ê³Ê³Ê³";
private yygo588 = decodeArr "ÄÄÄÄ" "Ê¶Ê¶ÉÉ";
private yygo593 = decodeArr "Â©ÅÅÅÅÅÅÅÅÅ" "Ê½Ê¾Ê¾Ê¿Ê¿Ê¿ËËËË";
private yygo609 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aËË\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo610 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å¨Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````ÈÈÈÈËËËaÈÈ\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo622 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÈ¶È¶\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo623 = decodeArr "Â³Â´ÂµÂ¶Â·Â¸ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "UUUVVVWW```````````aÈ¹È¹\u0095\u0095\u0095\u0095bbbbbccddffeeeeeeeeeeeeeegggggggggggggggggggggg";
private yygo627 = decodeArr "Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â¿" "ÉÉÉËËËÉÉÉÇ";
private yygo678 = decodeArr "/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopq" "Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´ËËËËËË";
private yygo692 = decodeArr "/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopq" "Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´ËËËËËË";
private yygo696 = decodeArr "ÄÄÄÄ" "ËËÉÉ";
private yygo697 = decodeArr "Â©ÅÅÅÅ" "Ê½ËËËË";
private yygo698 = decodeArr "Â©ÅÅÅÅ" "Ê½ËËËË";
private yygo699 = decodeArr "Â©Å" "Ê½Ë";
private yygo700 = decodeArr "Â©Å" "Ê½Ë";
private yygo707 = decodeArr "\u0010\u0011\u0012\u0013ÅÅÅÅÅÅ" "\u0004\u0004ÉÉËËËËËÉ";
private yygo708 = decodeArr "\u0010\u0011\u0012\u0013ÅÅÅÅÅÅ" "\u0004\u0004ÉÉËËËËËÉ";
private yygo710 = decodeArr "Â¶Â·Â¸Ã¦Ã­Ã®Ã¯Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ÅÉÉÉËËÅÄ²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo715 = decodeArr "/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopq" "Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´ËËËËËË";
private yygo725 = decodeArr "Â¶Â·Â¸Ã¤Ã¥Ã¦Ã©ÃªÃ«Ã¬Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÅÅ" "Ã¶Ã¶Ã¶ËËÄ­Ä®Ä®Ä°Ä°Ä¯Ä²Ä²Ä²Ä²Ä²Ä²Ã¸Ã¸Ã¸Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä±Ä±";
private yygo726 = decodeArr "Â©ÅÅÅÅÅÅÅÅÅ" "Ê½ËËÊ¿Ê¿Ê¿ËËËË";
private yygo731 = decodeArr "/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopq" "Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´Ê´ËËËËËË";
private yygos = let 
    sub1 = [      (0, yygo0),
      (1, yygo1),
      (3, yygo3),
      (6, yygo6),
      (8, yygo8),
      (9, yygo9),
      (12, yygo12),
      (22, yygo22),
      (25, yygo25),
      (27, yygo27),
      (31, yygo31),
      (34, yygo34),
      (35, yygo35),
      (36, yygo36),
      (40, yygo40),
      (41, yygo41),
      (42, yygo42),
      (45, yygo45),
      (46, yygo46),
      (47, yygo47),
      (48, yygo48),
      (58, yygo58),
      (59, yygo59),
      (60, yygo60),
      (63, yygo63),
      (83, yygo83),
      (87, yygo87),
      (88, yygo88),
      (92, yygo92),
      (93, yygo93),
      (94, yygo94),
      (99, yygo99),
      (106, yygo106),
      (108, yygo108),
      (110, yygo110),
      (114, yygo114),
      (117, yygo117),
      (122, yygo122),
      (125, yygo125),
      (129, yygo129),
      (131, yygo131),
      (132, yygo132),
      (134, yygo134),
      (135, yygo135),
      (137, yygo137),
      (138, yygo138),
      (139, yygo139),
      (142, yygo142),
      (145, yygo145),
      (147, yygo147),
      (148, yygo148),
      (152, yygo152),
      (153, yygo153),
      (154, yygo154),
      (160, yygo160),
      (162, yygo162),
      (163, yygo163),
      (164, yygo164),
      (167, yygo167),
      (171, yygo171),
      (172, yygo172),
      (174, yygo174),
      (177, yygo177),
      (182, yygo182)];
    sub2 = [      (184, yygo184),
      (185, yygo185),
      (189, yygo189),
      (190, yygo190),
      (192, yygo192),
      (193, yygo193),
      (194, yygo194),
      (196, yygo196),
      (197, yygo197),
      (198, yygo198),
      (200, yygo200),
      (206, yygo206),
      (207, yygo207),
      (208, yygo208),
      (211, yygo211),
      (212, yygo212),
      (218, yygo218),
      (221, yygo221),
      (226, yygo226),
      (228, yygo228),
      (231, yygo231),
      (233, yygo233),
      (234, yygo234),
      (244, yygo244),
      (245, yygo245),
      (250, yygo250),
      (252, yygo252),
      (253, yygo253),
      (255, yygo255),
      (256, yygo256),
      (257, yygo257),
      (260, yygo260),
      (261, yygo261),
      (264, yygo264),
      (278, yygo278),
      (280, yygo280),
      (281, yygo281),
      (282, yygo282),
      (284, yygo284),
      (285, yygo285),
      (286, yygo286),
      (288, yygo288),
      (293, yygo293),
      (299, yygo299),
      (306, yygo306),
      (308, yygo308),
      (311, yygo311),
      (317, yygo317),
      (318, yygo318),
      (325, yygo325),
      (330, yygo330),
      (334, yygo334),
      (335, yygo335),
      (339, yygo339),
      (344, yygo344),
      (348, yygo348),
      (349, yygo349),
      (353, yygo353),
      (355, yygo355),
      (364, yygo364),
      (365, yygo365),
      (366, yygo366),
      (367, yygo367),
      (368, yygo368)];
    sub3 = [      (369, yygo369),
      (370, yygo370),
      (371, yygo371),
      (372, yygo372),
      (377, yygo377),
      (381, yygo381),
      (384, yygo384),
      (385, yygo385),
      (387, yygo387),
      (388, yygo388),
      (397, yygo397),
      (399, yygo399),
      (400, yygo400),
      (403, yygo403),
      (408, yygo408),
      (410, yygo410),
      (411, yygo411),
      (413, yygo413),
      (414, yygo414),
      (415, yygo415),
      (416, yygo416),
      (433, yygo433),
      (435, yygo435),
      (436, yygo436),
      (437, yygo437),
      (438, yygo438),
      (440, yygo440),
      (441, yygo441),
      (442, yygo442),
      (444, yygo444),
      (449, yygo449),
      (452, yygo452),
      (456, yygo456),
      (458, yygo458),
      (460, yygo460),
      (462, yygo462),
      (465, yygo465),
      (467, yygo467),
      (468, yygo468),
      (471, yygo471),
      (477, yygo477),
      (483, yygo483),
      (485, yygo485),
      (486, yygo486),
      (487, yygo487),
      (488, yygo488),
      (491, yygo491),
      (492, yygo492),
      (493, yygo493),
      (496, yygo496),
      (507, yygo507),
      (509, yygo509),
      (510, yygo510),
      (513, yygo513),
      (517, yygo517),
      (518, yygo518),
      (522, yygo522),
      (526, yygo526),
      (528, yygo528),
      (529, yygo529),
      (532, yygo532),
      (537, yygo537),
      (540, yygo540),
      (548, yygo548)];
    sub4 = [      (557, yygo557),
      (560, yygo560),
      (562, yygo562),
      (574, yygo574),
      (577, yygo577),
      (582, yygo582),
      (588, yygo588),
      (593, yygo593),
      (609, yygo609),
      (610, yygo610),
      (622, yygo622),
      (623, yygo623),
      (627, yygo627),
      (678, yygo678),
      (692, yygo692),
      (696, yygo696),
      (697, yygo697),
      (698, yygo698),
      (699, yygo699),
      (700, yygo700),
      (707, yygo707),
      (708, yygo708),
      (710, yygo710),
      (715, yygo715),
      (725, yygo725),
      (726, yygo726),
      (731, yygo731)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` genericArrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4);
{-

    this file will be appended to every parser YYgen.fr builds

 -}

dropBrace !n (t:ts) = case yychar t of
    '{' -> t:dropBrace (n+1) ts
    '}' | n == 1 = ts
        | otherwise = t : dropBrace (n-1) ts
    _   -> t : dropBrace n ts
;
dropBrace n [] = [];

-- the main loop of the parser
yyloop (yyvals@(st, _):_) (yytoks@yyt:yyts) =
    case yyaction st yyt of
        YYAction act
            | act == yyAccept -> YYM.pure (yyaccept (yyvals, yytoks))  -- will this ever happen?
            | act == yyErr    -> do
                            let fun = elemAt yyrecs st
                            toks <- fun yytoks
                            yyloop yyvals toks
            | act == yyBrace = yyloop yyvals (yyt.{tokid=CHAR, value="}"} : dropBrace 1 yytoks) -- insert '}'
            -- shift?
            | act >= 0, yydebug, traceLn (show st ++ ": shift to " ++ show act ++ " on " ++ yyshow yyt) = undefined
            | act >= 0 = yyloop ((act, YYTok yyt)!:yyvals) yyts
            -- must be reduction
            | yydebug, traceLn (show st ++ ": reduce by rule " ++ yyrule (-act)) = undefined
            | otherwise = do
                vals <- yyreduce (-act) yyvals
                yyloop vals yytoks
;
yyloop (yyvals@(st, _):_) [] =
    case yyeaction st of
        YYAction act
            | act == yyAccept -> YYM.pure (yyaccept (yyvals, []))
            | act == yyErr = do
                yyerror yyEOF ("syntax error on end of file")
                YYM.pure (yyvals, [])
            -- shift?
            | act >= 0 -> error ("Can't shift on end of file in state " ++ show act)
            -- must be reduction
            | yydebug, traceLn (show st ++ ": reduce by rule " ++ yyrule (-act)) = undefined
            | otherwise = do
                vals <- yyreduce (-act) yyvals
                yyloop vals []
    ;
yyloop [] yytoks = error "empty stack in yyloop";

yyaction n tok = case itemAt yyacts n of {
    Just fun -> fun tok;
    Nothing  -> YYAction yyErr;
};

yyeaction n = case elemAt yyeacts n of  {
    0 -> YYAction yyErr;
    this -> YYAction this; 
};

{-- nowarn: application of 'yybadprod' will diverge --};
yybadprod p yyvs = error ("bad stack for rule " ++ show p ++ ": " ++ showst yyvs);



-- drop tokens until token is valid in this state
yydrop i [] = yyrecover i [];
yydrop i (t:ts) = case yyaction i t of {
        YYAction err
            | yyErr == err, yydebug, trace (show i ++ ": error recovery drops " ++ yyshow t ++ "\n") = undefined
            | yyErr == err = yydrop i ts
            | otherwise  =  YYM.pure (t:ts);
    };
yyrecover i []
    | yydebug, trace (show i ++ ": error recovery reaches end of file\n") = undefined
    | otherwise = YYM.pure [];

yyrecover i (ts@t:_) = do
    yyerror (yyline t) ("syntax error on " ++ yynice t)
    yydrop i ts
;

yyexpect n trep (ts@t:_) = do
    yyerror (yyline t) ("expected " ++ yynice trep ++ ", found " ++ yynice t)
    YYM.pure (trep:ts)
;

yyexpect n trep [] = do
    yyerror yyEOF ("expected " ++ yynice trep ++ ", found end of file")
    YYM.pure [trep]
;

yyparsing n item (ts@t:_) = do
    yyerror (yyline t) ("unexpected " ++ yynice t ++ " while trying to parse " ++ item)
    yydrop n ts
;
yyparsing n item [] = do
    yyerror yyEOF ("unexpected end of file while parsing " ++ item)
    yyrecover n []
;
yybadstart n item (ts@t:_) = do
    yyerror (yyline t) ("syntax error, " ++ item ++ " cannot start with " ++ yynice t)
    yydrop n ts
;
yybadstart n item [] = do
    yyerror yyEOF ("end of file while expecting " ++ item)
    yyrecover n []
;
yyreduce red yyvs = case itemAt yyprods red of
    Just fun -> do
        reduced <- fun yyvs
        case reduced of
            (yyv, yyvals@(popst, _):_) -> case yygos.genericItemAt popst of
                Just arr -> case elemAt arr red of
                    go | go > 0, yydebug, trace (show popst
                                    ++ ": after reduction goto "
                                    ++ show go ++ "\n") = undefined
                       | go > 0 = YYM.pure ((go, yyv):yyvals)
                       | otherwise = error ("nowhere to go in state "
                                                ++ show popst ++ " after reduction " ++ show red)
                Nothing -> error ("nowhere to go in state "
                                            ++ show popst ++ " after any reduction")
            _ -> error ("reduction " ++ show red ++ " yields nonsensical result.")
    Nothing -> error ("reduction " ++ show red ++ " is unknown.")
;


yyparse yytoks = do
    res <- yyloop [(0, YYStart ())] yytoks
    case res of
        ([(_, YYAcc x)], []) -> YYM.pure (Just x)
        ([(_, YYAcc x)], (yyt:_)) -> do
            yyerror (yyline yyt) ("expected end of file, found `" ++ yynice yyt ++ "`")
            YYM.pure (Just x)
        _ -> YYM.pure Nothing;
;
--begin tail
{--
    the parser pass
 -};
pass :: [Token] -> StG (Maybe ParseResult); -- Global -> IO (Maybe ParseResult, Global);
pass toks = (yyparse . substQQ) toks;
--end tail
