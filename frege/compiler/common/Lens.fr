module frege.compiler.common.Lens where

import  frege.data.Monoid (First)
import  frege.data.wrapper.Const (Const)
import  frege.data.wrapper.Identity (Identity)

-- note: currently the compiler fails to infer the correct kinds of @f@
-- when incrementally compiling, so you have to write type annotations without the aliases

type ASetter s t a b = (a -> Identity b) -> s -> Identity t
type ASetter' s a = ASetter s s a a
type Getting r s a = (a -> Const r a) -> s -> Const r s
type Lens s t a b = forall f. Functor f => (a -> f b) -> s -> f t
type Lens' s a = Lens s s a a
type LensLike f s t a b = (a -> f b) -> s -> f t
type LensLike' f s a = LensLike f s s a a
type Traversal s t a b = forall f. Applicative f => (a -> f b) -> s -> f t
type Traversal' s a = Traversal s s a a

-- getters

-- dealing with Lenses

view :: Getting a s a -> (s -> a)
view l = Const.get . (l Const)

views :: Getting r s a -> (a -> r) -> (s -> r)
views l f = Const.get . l (Const . f)

-- dealing with optional fields (Traversals)

preview :: Getting (First a) s a -> s -> Maybe a
preview l s = First.getFirst $ views l (First . Just) s

-- setters

over :: ASetter s t a b -> (a -> b) -> s -> t
over l f = Identity.run . l (Identity . f)

set :: ASetter s t a b -> b -> s -> t
set l b = Identity.run . l (\_ -> Identity b)

--- warning: this function is partial
-- TODO eliminate the uses of these functions
unsafePartialView :: Getting (First a) s a -> s -> a
unsafePartialView l s = unJust $ preview l s
