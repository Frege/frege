{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}

{--
    This package defines basic data structures used in the compiler.
 -}
{-
 * $Author: Ingo.Wechsung@googlemail.com $
 * $Revision: 528 $
 * $Date: 2012-02-25 23:55:35 +0100 (Sat, 25 Feb 2012) $
 * $Id:  $
 -}

package frege.compiler.BaseTypes where

--- This is $Revision: 528 $
protected version = v "$Revision: 528 $" where
    v (m ~ #(\d+)#) | Just g <- m.group 1 = g.atoi
    v _ = 0

{--
 * The tokens for the frege language.
 -}

data TokenID =
    CHAR
    | DOCUMENTATION | COMMENT
    | QUALIFIER | VARID | CONID
    | QVARID    | QCONID
    | INTCONST  | STRCONST  | CHRCONST | BIGCONST
    | FLTCONST  | LONGCONST  | DBLCONST  | REGEXP
    | DCOLON  | ARROW  | GETS | EARROW
    | PACKAGE   | IMPORT  | NATIVE
    | IF  | THEN  | ELSE  | CLASS  | WHERE
    | INSTANCE
    | DATA  |  CASE  | OF  | DERIVE
    | LET  | IN  | TYPE  | TRUE  | FALSE | PURE
    | PRIVATE  | PUBLIC  | PROTECTED | ABSTRACT | DO  | FORALL
    -- EXCLUDING
    -- CONTINUE  | BREAK  | WHILE
    | INFIX  | INFIXL  | INFIXR
    -- left, right and non associative operators with precedence order 1 to 16
    | LOP0
    | LOP1   | LOP2   | LOP3   | LOP4
    | LOP5   | LOP6   | LOP7   | LOP8
    | LOP9   | LOP10  | LOP11  | LOP12
    | LOP13  | LOP14  | LOP15  | LOP16
    | ROP0
    | ROP1   | ROP2   | ROP3   | ROP4
    | ROP5   | ROP6   | ROP7   | ROP8
    | ROP9   | ROP10  | ROP11  | ROP12
    | ROP13  | ROP14  | ROP15  | ROP16
    | NOP0
    | NOP1   | NOP2   | NOP3   | NOP4
    | NOP5   | NOP6   | NOP7   | NOP8
    | NOP9   | NOP10  | NOP11  | NOP12
    | NOP13  | NOP14  | NOP15  | NOP16
    | SOMEOP                -- pseudo operator token
    | LEXERROR
    | INTERPRET


derive Show TokenID
derive Eq TokenID
derive Ord TokenID
derive Enum TokenID

--- line numbers
type Line = Int

--- numbers that tell on which column a token started, 1 based
type Indent = Int

--- offset in characters from the beginning of something, 0 based
type Offset = Int


--- bit set for 'Flag's
type Flags = Int

--- the data structure for tokens along with string, line and columen info
data Token = !Token { tokid :: TokenID,
                      value :: String,
                      line  :: Line,
                      col   :: Indent,
                      offset :: Offset } where
    isComment Token{tokid}     = tokid.== COMMENT
    noComment Token{tokid}     = tokid.!= COMMENT
    position  tok              = Pos tok tok
    --- check if first token is followed without space by second
    vor :: Token -> Token -> Bool
    vor t1 t2 = t1.line.== t2.line &&
            (t1.tokid.== CHAR && (t1.col + 1).== t2.col ||
             t1.tokid.== QUALIFIER && (t1.col + t1.length + 1).== t2.col ||
             t1.tokid.!= CHAR && (t1.col + t1.length).== t2.col)
    length Token{tokid, value} = case tokid of
        REGEXP    -> 2 + value.length
        -- QUALIFIER -> 1 + value.length
        sonst     -> value.length

derive Show Token
instance Eq Token where
    t1 == t2 = t1.tokid.== t2.tokid
                && t1.value. == t2.value
                && t1.line.  == t2.line
                && t1.col.   == t2.col
                && t1.offset.== t2.offset
    hashCode Token{tokid,value,line,col,offset} 
        = (((hashCode tokid*31 + hashCode value) * 31 + hashCode line) * 31 + hashCode col) * 31 + hashCode offset                

data KeyToken = KeyTk Token

instance Ord KeyToken where
    hashCode (KeyTk t) = hashCode t
    KeyTk t1 <=> KeyTk t2 = case t1.offset <=> t2.offset of
        Eq -> (t1.tokid, t1.value) <=> (t2.tokid, t2.value)
        ordering -> ordering

--- the compiler flags
data Flag =
    HINTS | VERBOSE | WARNINGS | WITHCP | RUNJAVAC | INPRELUDE | MAKE | IDE | INLINE | SPECIAL
    -- trace options
    | TRACE1 | TRACE2 | TRACE3 | TRACE4 | TRACE5 | TRACE6 | TRACE7 | TRACE8 | TRACE9 | TRACE10
    | TRACET | TRACEX | TRACEM | TRACEO | TRACES | TRACEG | EXPLAIN | TRACEZ


derive Show Flag
derive Enum Flag


--- things that know where they were introduced and what they are
class Positioned a where
    --- Get the position of an item.
    --- This is used for eror messages and the like
    getpos  :: a -> Position
    --- This should span the full extent of the item
    getrange :: a -> Position
    is       :: a -> String       -- pattern, expr, ....

    --- Falls back to 'getpos', if not defined.
    getrange = getpos

instance Positioned Position where
    getpos pos = pos
    is _       = "position"

instance Eq Position where
    pos1 == pos2 = pos1.start.== pos2.start && pos1.end.== pos2.end
    hashCode pos = 31*hashCode pos.first + hashCode pos.last

instance Ord Position where
    pos1 <=> pos2 = pos1.start.<=> pos2.start

instance Show Position where
    show pos = pos.line.show

data Position = !Pos { first, last :: Token } where
    --- overwrite 'first's token id and value and set last = first
    --- used to construct custom tokens for generated code
    change :: Position -> TokenID -> String -> Position
    change p t s = Pos f f where f = p.first.{tokid = t, value = s}
    --- pseudo position, does not influence merge operations
    null = Pos n n where
        n = Token LEXERROR "?¿" 1 0 0
    --- Make a new position that subsumes both
    merge :: Position -> Position -> Position
    merge pos1 pos2
        | pos1 == null = pos2
        | pos2 == null = pos1
        | pos2.start >= pos1.start && pos2.end <= pos1.end = pos1       -- already subsumed
        | pos1.start >= pos2.start && pos1.end <= pos2.end = pos2       -- dito
        | pos1.start < pos2.start = Pos pos1.first pos2.last
        | otherwise               = Pos pos2.first pos1.last
    --- Merge a list of positions
    merges :: [Position] -> Position
    merges = fold merge null
    --- get the line number where it starts
    line  Pos{first} = first.line
    --- get start offset of item
    start Pos{first} = first.offset
    --- get first offset after item
    end   Pos{last}  = last.offset + last.length
    
--- encoding for type kinds    
data Kind = 
        KType                    --- indicates a type
        | KApp Kind Kind         --- indicates it will be 2nd kind when applied to 1st kind
        where
            fun   = kind 2    -- * -> * -> *
            unary = kind 1    -- * -> * 
            --- @(kind n)@ is the kind of a type constructor with @n@ type arguments of kind 0
            kind 0 = KType
            kind n = KApp KType (kind (n-1))
  
instance Show Kind where
    show KType        = "*"
    show (KApp k1 k2) = showsub k1 ++ "->" ++ show k2
    showsub KType     = "*"
    showsub k         = "(" ++ show k ++ ")"

derive Eq Kind
    
    