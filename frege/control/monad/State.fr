
--- The strict 'State' 'Monad'

module frege.control.monad.State
        inline  (State.State.>>=, State.State.>>, 
                State.State.return, State.State.get,
                State.run,
                StateT.>>=, StateT.>>, 
                StateT.return, StateT.get,
                StateT.lift, StateT.liftIO) 
    where

import frege.control.monad.trans.MonadTrans
import frege.control.monad.trans.MonadIO
-- class MonadState m where
--     get :: m s s
--     put :: s -> m s ()
--     modify :: (s -> s) -> m s () 


{--
    @State s a@ is an abstract data type that resembles a stateful computation
    with State _s_ and result _a_,
    i.e. functions of type @s -> (a, s)@
    where the State is immutable.
 -}
abstract data State s a = State (s -> (a, s)) where
    --- run a stateful computation
    public run (State x) s = x s
    --- return the state from the internals of the monad
    public get   = State (\s -> (s,s))
    
    --- replace the 'State' inside the monad 
    public put x = State (const ((); x))
    --- modify the 'State'
    public modify f = State (\state -> ((); f state))
    --- lift a value to the 'State' monad
    public return !a =  State ((,) a)
    --- monadic bind for the 'State' monad
    public State a >>= k  =  State (\s -> case a s of 
                                        (v, s') -> case k v of 
                                            State.State b -> b s'
                                    )
    public a >> b = a  State.>>=  (const b)    

    
instance Monad (State s)
-- instance MonadState State

-- Haskell compatibility

-- runState :: State s a -> s -> (a,s)
runState    = State.run
evalState s = fst . State.run s
execState s = snd . State.run s


runStateT :: Monad 𝖒 ⇒ StateT 𝖘 𝖒 𝖛 → 𝖘 → 𝖒 (𝖛, 𝖘)
runStateT   = StateT.run

evalStateT ∷ Monad 𝖒 ⇒ StateT 𝖘 𝖒 𝖛 → 𝖘 → 𝖒 𝖛
evalStateT s z = fst <$> runStateT s z

execStateT ∷ Monad 𝖒 ⇒ StateT 𝖘 𝖒 𝖛 → 𝖘 → 𝖒 𝖘
execStateT s z = snd <$> runStateT s z
-- state       = State.State

--- > StateT s m a
--- A stateful computation that transforms an inner 'Monad' _m_
abstract data StateT s m a = StateT { run ::  s -> m (a,s) } where
    public get   = StateT (\s -> return (s, s)) 
    public put s = StateT (\_ -> return ((); s))
    public modify f = StateT (\s -> return ((); f s))
 
   
instance Monad  (Monad m) => (StateT s m) where
    a >> b = a  >>=  (const b)
    return !a = StateT.StateT (\s -> return (a,s))
    (StateT.StateT x) >>= f = StateT.StateT (\s -> do
        (v,s') <- x s          -- get new value and state
        case f v of
            StateT.StateT y ->  y s'     -- pass them to f
      )

instance MonadPlus (MonadPlus m) => (StateT s m) where
    mzero = StateT.StateT (\s -> mzero)
    (StateT.StateT x1) `mplus` (StateT.StateT x2) = StateT.StateT (\s -> (x1 s) `mplus` (x2 s))

instance MonadAlt (MonadAlt m) => (StateT s m) where
    pzero = StateT.StateT (\s -> pzero)
    (StateT.StateT x1) <|> (StateT.StateT x2) = StateT.StateT (\s -> (x1 s) <|> (x2 s))
    (StateT.StateT x1) <+> (StateT.StateT x2) = StateT.StateT (\s -> (x1 s) <+> (x2 s))
    
instance MonadTrans (StateT s) where
    lift c = StateT.StateT (\s -> c >>= (\x -> return (x;s)))

instance MonadIO (MonadIO m) =>  (StateT s m) where
    liftIO = lift . liftIO
    
promote st = StateT.StateT (\s -> return (State.run st s))