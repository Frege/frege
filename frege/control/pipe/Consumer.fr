module frege.control.pipe.Consumer where

import Control.monad.trans.MonadTrans (MonadTrans (lift))
import Control.pipe.Coroutine (Coroutine, resume, suspend)

--- An Consumer is a coroutine that uses @(->) a@ as the to-be-suspended functor.
type Consumer a m res = Coroutine ((->) a) m res

consume :: Monad m => Consumer a m a
consume = suspend pure

runConsumer :: Monad m => [a] -> Consumer a m res -> m res
runConsumer xs consumer = do
  eitherCo <- resume consumer
  case eitherCo of
    (Left co) ->
      case xs of
          []      -> runConsumer []  $ co $ error "No more values to consume."
          (x:xs') -> runConsumer xs' $ co x
    (Right x) -> pure x

-- test cases see text.qc.ProducerConsumer
-- examples   see examples.LineProducerConsumer
