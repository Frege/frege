
module frege.control.pipe.Producer where

import Control.pipe.Coroutine (Coroutine, resume, suspend)

--- A Producer is a coroutine that uses @(,) a@ as the to-be-suspended functor.
type Producer a m res = Coroutine ((,) a) m res

runProducer :: Monad m => Producer a m res -> m ([a], res)
runProducer = go id
  where
    go f gen = do
      eitherGen <- resume gen
      case eitherGen of
        (Left (x, newGen)) -> go (f . (x:)) newGen
        (Right x)          -> pure (f [], x)

produce :: Monad m => a -> Producer a m ()
produce a = suspend (a, pure ())

endWith x = pure x

-- test cases see text.qc.ProducerConsumer
-- examples   see examples.LineProducerConsumer
